// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet_define.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "packet_define.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* proto_gc_game_start_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_game_start_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_counts_not1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_counts_not1_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_sic_bet_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_sic_bet_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_task_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_task_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_two_lord_card_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_two_lord_card_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_expression_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_expression_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_cg_get_redpackets_newbie_award_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_cg_get_redpackets_newbie_award_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_beishu_info_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_beishu_info_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_use_card_recode_noti_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_use_card_recode_noti_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_cg_win_doubel_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_cg_win_doubel_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_card_recode_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_card_recode_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_two_let_card_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_two_let_card_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_update_player_tokenmoney_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_update_player_tokenmoney_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_card_count_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_card_count_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_cg_regain_lose_score_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_cg_regain_lose_score_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_private_room_result_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_private_room_result_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_enable_invincible_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_enable_invincible_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_cg_bet_lord_card_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_cg_bet_lord_card_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_look_lord_card_item_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_look_lord_card_item_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_stUserData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_stUserData_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_double_score_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_double_score_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_game_result_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_game_result_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_user_savestar_card_noti_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_user_savestar_card_noti_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_get_redpackets_award_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_get_redpackets_award_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_refresh_card_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_refresh_card_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_cg_three_draw_req_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_cg_three_draw_req_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_ItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_ItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_player_itemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_player_itemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_cg_get_redpackets_88yuan_award_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_cg_get_redpackets_88yuan_award_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_starsky_update_item_noti_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_starsky_update_item_noti_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_cg_look_lord_card_item_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_cg_look_lord_card_item_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_cg_get_redpackets_award_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_cg_get_redpackets_award_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_send_dizhu_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_send_dizhu_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_cg_complete_data_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_cg_complete_data_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_sic_bet_update_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_sic_bet_update_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_item_add_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_item_add_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_bet_lord_card_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_bet_lord_card_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_replay_data_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_replay_data_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_ju_count_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_ju_count_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_had_start_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_had_start_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_double_score_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_double_score_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_sic_new_round_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_sic_new_round_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_pause_game_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_pause_game_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_private_room_result_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_private_room_result_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_st_sic_cell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_st_sic_cell_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_play_card_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_play_card_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_item_info_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_item_info_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_cg_private_room_result_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_cg_private_room_result_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_stUserResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_stUserResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_cg_starsky_season_noti_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_cg_starsky_season_noti_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_GameStatisc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_GameStatisc_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_two_complete_data_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_two_complete_data_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_win_doubel_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_win_doubel_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_common_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_common_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_complete_data_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_complete_data_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_sic_show_result_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_sic_show_result_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_cg_three_draw_req_card_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_cg_three_draw_req_card_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_game_model_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_game_model_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_magic_emoji_config_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_magic_emoji_config_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_emojiConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_emojiConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_show_card_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_show_card_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_extra_double_score_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_extra_double_score_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_cg_enable_invincible_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_cg_enable_invincible_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_magic_emoji_noti_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_magic_emoji_noti_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_task_complete_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_task_complete_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_get_card_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_get_card_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_cg_lord_card_lottery_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_cg_lord_card_lottery_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_mj_completedata_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_mj_completedata_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_two_show_card_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_two_show_card_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_three_draw_ack_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_three_draw_ack_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_stUserResult1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_stUserResult1_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_Kind_Rate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_Kind_Rate_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_cg_get_card_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_cg_get_card_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_lord_card_lottery_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_lord_card_lottery_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_get_lord_card_reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_get_lord_card_reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_Money_DiZhu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_Money_DiZhu_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_three_draw_ack_card_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_three_draw_ack_card_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_svr_test_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_svr_test_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_get_redpackets_newbie_award_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_get_redpackets_newbie_award_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_CCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_CCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_lord_card_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_lord_card_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_counts_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_counts_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_regain_lose_score_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_regain_lose_score_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_cli_my_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_cli_my_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_sic_bet_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_sic_bet_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_card_count_ack1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_card_count_ack1_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_sic_bet_clear_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_sic_bet_clear_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_CCardsType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_CCardsType_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_sic_bet_update_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_sic_bet_update_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_sic_bet_clear_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_sic_bet_clear_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_bomb_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_bomb_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_cg_look_lord_card_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_cg_look_lord_card_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_cg_auto_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_cg_auto_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_sic_history_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_sic_history_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_auto_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_auto_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_call_score_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_call_score_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_cg_call_score_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_cg_call_score_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_sic_show_light_cell_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_sic_show_light_cell_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_get_redpackets_88yuan_award_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_get_redpackets_88yuan_award_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_TaskItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_TaskItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_clienttimer_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_clienttimer_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_cg_card_count_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_cg_card_count_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_three_draw_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_three_draw_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_laizi_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_laizi_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_magic_emoji_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_magic_emoji_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_cg_double_score_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_cg_double_score_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_win_doubel_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_win_doubel_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_sic_bet_begin_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_sic_bet_begin_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_cg_get_lord_card_reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_cg_get_lord_card_reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_bet_lord_card_result_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_bet_lord_card_result_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_svr_my_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_svr_my_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_get_redpackets_newbie_award_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_get_redpackets_newbie_award_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_play_card_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_play_card_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_lord_card_lottery_base_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_lord_card_lottery_base_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_cg_play_card_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_cg_play_card_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_cg_beishu_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_cg_beishu_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_rob_lord_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_rob_lord_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_sic_history_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_sic_history_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_cg_rob_lord_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_cg_rob_lord_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_show_card_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_show_card_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_sic_result_data_not_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_sic_result_data_not_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_cg_show_card_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_cg_show_card_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_cg_send_card_ok_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_cg_send_card_ok_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* proto_gc_game_result_not1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_gc_game_result_not1_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_packet_5fdefine_2eproto() {
  protobuf_AddDesc_packet_5fdefine_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "packet_define.proto");
  GOOGLE_CHECK(file != NULL);
  proto_gc_game_start_not_descriptor_ = file->message_type(0);
  static const int proto_gc_game_start_not_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_game_start_not, ngamemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_game_start_not, ncardnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_game_start_not, nlordpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_game_start_not, clordcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_game_start_not, nserialid_),
  };
  proto_gc_game_start_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_game_start_not_descriptor_,
      proto_gc_game_start_not::default_instance_,
      proto_gc_game_start_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_game_start_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_game_start_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_game_start_not));
  proto_gc_counts_not1_descriptor_ = file->message_type(1);
  static const int proto_gc_counts_not1_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_counts_not1, counts_num_),
  };
  proto_gc_counts_not1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_counts_not1_descriptor_,
      proto_gc_counts_not1::default_instance_,
      proto_gc_counts_not1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_counts_not1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_counts_not1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_counts_not1));
  proto_sic_bet_req_descriptor_ = file->message_type(2);
  static const int proto_sic_bet_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_bet_req, ccellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_bet_req, namount_),
  };
  proto_sic_bet_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_sic_bet_req_descriptor_,
      proto_sic_bet_req::default_instance_,
      proto_sic_bet_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_bet_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_bet_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_sic_bet_req));
  proto_gc_task_not_descriptor_ = file->message_type(3);
  static const int proto_gc_task_not_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_task_not, task_item_),
  };
  proto_gc_task_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_task_not_descriptor_,
      proto_gc_task_not::default_instance_,
      proto_gc_task_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_task_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_task_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_task_not));
  proto_gc_two_lord_card_not_descriptor_ = file->message_type(4);
  static const int proto_gc_two_lord_card_not_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_two_lord_card_not, clord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_two_lord_card_not, veccards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_two_lord_card_not, nletnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_two_lord_card_not, nlordletnum_),
  };
  proto_gc_two_lord_card_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_two_lord_card_not_descriptor_,
      proto_gc_two_lord_card_not::default_instance_,
      proto_gc_two_lord_card_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_two_lord_card_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_two_lord_card_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_two_lord_card_not));
  proto_gc_expression_not_descriptor_ = file->message_type(5);
  static const int proto_gc_expression_not_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_expression_not, expression_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_expression_not, expression_num_),
  };
  proto_gc_expression_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_expression_not_descriptor_,
      proto_gc_expression_not::default_instance_,
      proto_gc_expression_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_expression_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_expression_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_expression_not));
  proto_cg_get_redpackets_newbie_award_ack_descriptor_ = file->message_type(6);
  static const int proto_cg_get_redpackets_newbie_award_ack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_get_redpackets_newbie_award_ack, cdouble_),
  };
  proto_cg_get_redpackets_newbie_award_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_cg_get_redpackets_newbie_award_ack_descriptor_,
      proto_cg_get_redpackets_newbie_award_ack::default_instance_,
      proto_cg_get_redpackets_newbie_award_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_get_redpackets_newbie_award_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_get_redpackets_newbie_award_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_cg_get_redpackets_newbie_award_ack));
  proto_gc_beishu_info_ack_descriptor_ = file->message_type(7);
  static const int proto_gc_beishu_info_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_beishu_info_ack, vecbeishuinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_beishu_info_ack, vecplayerbeishu_),
  };
  proto_gc_beishu_info_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_beishu_info_ack_descriptor_,
      proto_gc_beishu_info_ack::default_instance_,
      proto_gc_beishu_info_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_beishu_info_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_beishu_info_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_beishu_info_ack));
  proto_gc_use_card_recode_noti_descriptor_ = file->message_type(8);
  static const int proto_gc_use_card_recode_noti_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_use_card_recode_noti, cchairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_use_card_recode_noti, creconnection_),
  };
  proto_gc_use_card_recode_noti_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_use_card_recode_noti_descriptor_,
      proto_gc_use_card_recode_noti::default_instance_,
      proto_gc_use_card_recode_noti_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_use_card_recode_noti, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_use_card_recode_noti, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_use_card_recode_noti));
  proto_cg_win_doubel_req_descriptor_ = file->message_type(9);
  static const int proto_cg_win_doubel_req_offsets_[1] = {
  };
  proto_cg_win_doubel_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_cg_win_doubel_req_descriptor_,
      proto_cg_win_doubel_req::default_instance_,
      proto_cg_win_doubel_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_win_doubel_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_win_doubel_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_cg_win_doubel_req));
  proto_gc_card_recode_req_descriptor_ = file->message_type(10);
  static const int proto_gc_card_recode_req_offsets_[1] = {
  };
  proto_gc_card_recode_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_card_recode_req_descriptor_,
      proto_gc_card_recode_req::default_instance_,
      proto_gc_card_recode_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_card_recode_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_card_recode_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_card_recode_req));
  proto_gc_two_let_card_not_descriptor_ = file->message_type(11);
  static const int proto_gc_two_let_card_not_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_two_let_card_not, nletnum_),
  };
  proto_gc_two_let_card_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_two_let_card_not_descriptor_,
      proto_gc_two_let_card_not::default_instance_,
      proto_gc_two_let_card_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_two_let_card_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_two_let_card_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_two_let_card_not));
  proto_gc_update_player_tokenmoney_not_descriptor_ = file->message_type(12);
  static const int proto_gc_update_player_tokenmoney_not_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_update_player_tokenmoney_not, ply_chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_update_player_tokenmoney_not, iteminfo_),
  };
  proto_gc_update_player_tokenmoney_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_update_player_tokenmoney_not_descriptor_,
      proto_gc_update_player_tokenmoney_not::default_instance_,
      proto_gc_update_player_tokenmoney_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_update_player_tokenmoney_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_update_player_tokenmoney_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_update_player_tokenmoney_not));
  proto_gc_card_count_ack_descriptor_ = file->message_type(13);
  static const int proto_gc_card_count_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_card_count_ack, counts_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_card_count_ack, m_vecputcard_),
  };
  proto_gc_card_count_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_card_count_ack_descriptor_,
      proto_gc_card_count_ack::default_instance_,
      proto_gc_card_count_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_card_count_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_card_count_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_card_count_ack));
  proto_cg_regain_lose_score_req_descriptor_ = file->message_type(14);
  static const int proto_cg_regain_lose_score_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_regain_lose_score_req, nop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_regain_lose_score_req, nitemindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_regain_lose_score_req, nitemnum_),
  };
  proto_cg_regain_lose_score_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_cg_regain_lose_score_req_descriptor_,
      proto_cg_regain_lose_score_req::default_instance_,
      proto_cg_regain_lose_score_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_regain_lose_score_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_regain_lose_score_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_cg_regain_lose_score_req));
  proto_gc_private_room_result_ack_descriptor_ = file->message_type(15);
  static const int proto_gc_private_room_result_ack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_private_room_result_ack, vecgamestatiscs_),
  };
  proto_gc_private_room_result_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_private_room_result_ack_descriptor_,
      proto_gc_private_room_result_ack::default_instance_,
      proto_gc_private_room_result_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_private_room_result_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_private_room_result_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_private_room_result_ack));
  proto_gc_enable_invincible_ack_descriptor_ = file->message_type(16);
  static const int proto_gc_enable_invincible_ack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_enable_invincible_ack, nret_),
  };
  proto_gc_enable_invincible_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_enable_invincible_ack_descriptor_,
      proto_gc_enable_invincible_ack::default_instance_,
      proto_gc_enable_invincible_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_enable_invincible_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_enable_invincible_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_enable_invincible_ack));
  proto_cg_bet_lord_card_req_descriptor_ = file->message_type(17);
  static const int proto_cg_bet_lord_card_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_bet_lord_card_req, index_),
  };
  proto_cg_bet_lord_card_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_cg_bet_lord_card_req_descriptor_,
      proto_cg_bet_lord_card_req::default_instance_,
      proto_cg_bet_lord_card_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_bet_lord_card_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_bet_lord_card_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_cg_bet_lord_card_req));
  proto_gc_look_lord_card_item_ack_descriptor_ = file->message_type(18);
  static const int proto_gc_look_lord_card_item_ack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_look_lord_card_item_ack, nret_),
  };
  proto_gc_look_lord_card_item_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_look_lord_card_item_ack_descriptor_,
      proto_gc_look_lord_card_item_ack::default_instance_,
      proto_gc_look_lord_card_item_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_look_lord_card_item_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_look_lord_card_item_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_look_lord_card_item_ack));
  proto_stUserData_descriptor_ = file->message_type(19);
  static const int proto_stUserData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_stUserData, cchairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_stUserData, vechandcards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_stUserData, vecputcards_),
  };
  proto_stUserData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_stUserData_descriptor_,
      proto_stUserData::default_instance_,
      proto_stUserData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_stUserData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_stUserData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_stUserData));
  proto_gc_double_score_req_descriptor_ = file->message_type(20);
  static const int proto_gc_double_score_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_double_score_req, nserialid_),
  };
  proto_gc_double_score_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_double_score_req_descriptor_,
      proto_gc_double_score_req::default_instance_,
      proto_gc_double_score_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_double_score_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_double_score_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_double_score_req));
  proto_gc_game_result_not_descriptor_ = file->message_type(21);
  static const int proto_gc_game_result_not_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_game_result_not, btype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_game_result_not, cdouble_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_game_result_not, ccallscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_game_result_not, bshowcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_game_result_not, nbombcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_game_result_not, bspring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_game_result_not, breversespring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_game_result_not, broblord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_game_result_not, vecuserresult_),
  };
  proto_gc_game_result_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_game_result_not_descriptor_,
      proto_gc_game_result_not::default_instance_,
      proto_gc_game_result_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_game_result_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_game_result_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_game_result_not));
  proto_gc_user_savestar_card_noti_descriptor_ = file->message_type(22);
  static const int proto_gc_user_savestar_card_noti_offsets_[1] = {
  };
  proto_gc_user_savestar_card_noti_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_user_savestar_card_noti_descriptor_,
      proto_gc_user_savestar_card_noti::default_instance_,
      proto_gc_user_savestar_card_noti_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_user_savestar_card_noti, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_user_savestar_card_noti, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_user_savestar_card_noti));
  proto_gc_get_redpackets_award_ack_descriptor_ = file->message_type(23);
  static const int proto_gc_get_redpackets_award_ack_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_get_redpackets_award_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_get_redpackets_award_ack, cur_rounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_get_redpackets_award_ack, limit_rounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_get_redpackets_award_ack, namount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_get_redpackets_award_ack, citemtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_get_redpackets_award_ack, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_get_redpackets_award_ack, fakeitem_),
  };
  proto_gc_get_redpackets_award_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_get_redpackets_award_ack_descriptor_,
      proto_gc_get_redpackets_award_ack::default_instance_,
      proto_gc_get_redpackets_award_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_get_redpackets_award_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_get_redpackets_award_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_get_redpackets_award_ack));
  proto_gc_refresh_card_not_descriptor_ = file->message_type(24);
  static const int proto_gc_refresh_card_not_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_refresh_card_not, cchairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_refresh_card_not, veccards_),
  };
  proto_gc_refresh_card_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_refresh_card_not_descriptor_,
      proto_gc_refresh_card_not::default_instance_,
      proto_gc_refresh_card_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_refresh_card_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_refresh_card_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_refresh_card_not));
  proto_cg_three_draw_req_data_descriptor_ = file->message_type(25);
  static const int proto_cg_three_draw_req_data_offsets_[1] = {
  };
  proto_cg_three_draw_req_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_cg_three_draw_req_data_descriptor_,
      proto_cg_three_draw_req_data::default_instance_,
      proto_cg_three_draw_req_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_three_draw_req_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_three_draw_req_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_cg_three_draw_req_data));
  proto_ItemInfo_descriptor_ = file->message_type(26);
  static const int proto_ItemInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_ItemInfo, nitemindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_ItemInfo, nitemnum_),
  };
  proto_ItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_ItemInfo_descriptor_,
      proto_ItemInfo::default_instance_,
      proto_ItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_ItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_ItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_ItemInfo));
  proto_player_itemInfo_descriptor_ = file->message_type(27);
  static const int proto_player_itemInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_player_itemInfo, nitemindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_player_itemInfo, nitemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_player_itemInfo, nitemnum64_),
  };
  proto_player_itemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_player_itemInfo_descriptor_,
      proto_player_itemInfo::default_instance_,
      proto_player_itemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_player_itemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_player_itemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_player_itemInfo));
  proto_cg_get_redpackets_88yuan_award_req_descriptor_ = file->message_type(28);
  static const int proto_cg_get_redpackets_88yuan_award_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_get_redpackets_88yuan_award_req, type_),
  };
  proto_cg_get_redpackets_88yuan_award_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_cg_get_redpackets_88yuan_award_req_descriptor_,
      proto_cg_get_redpackets_88yuan_award_req::default_instance_,
      proto_cg_get_redpackets_88yuan_award_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_get_redpackets_88yuan_award_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_get_redpackets_88yuan_award_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_cg_get_redpackets_88yuan_award_req));
  proto_gc_starsky_update_item_noti_descriptor_ = file->message_type(29);
  static const int proto_gc_starsky_update_item_noti_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_starsky_update_item_noti, stamina_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_starsky_update_item_noti, match_ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_starsky_update_item_noti, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_starsky_update_item_noti, savestar_card_),
  };
  proto_gc_starsky_update_item_noti_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_starsky_update_item_noti_descriptor_,
      proto_gc_starsky_update_item_noti::default_instance_,
      proto_gc_starsky_update_item_noti_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_starsky_update_item_noti, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_starsky_update_item_noti, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_starsky_update_item_noti));
  proto_cg_look_lord_card_item_req_descriptor_ = file->message_type(30);
  static const int proto_cg_look_lord_card_item_req_offsets_[1] = {
  };
  proto_cg_look_lord_card_item_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_cg_look_lord_card_item_req_descriptor_,
      proto_cg_look_lord_card_item_req::default_instance_,
      proto_cg_look_lord_card_item_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_look_lord_card_item_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_look_lord_card_item_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_cg_look_lord_card_item_req));
  proto_cg_get_redpackets_award_req_descriptor_ = file->message_type(31);
  static const int proto_cg_get_redpackets_award_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_get_redpackets_award_req, type_),
  };
  proto_cg_get_redpackets_award_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_cg_get_redpackets_award_req_descriptor_,
      proto_cg_get_redpackets_award_req::default_instance_,
      proto_cg_get_redpackets_award_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_get_redpackets_award_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_get_redpackets_award_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_cg_get_redpackets_award_req));
  proto_gc_send_dizhu_not_descriptor_ = file->message_type(32);
  static const int proto_gc_send_dizhu_not_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_send_dizhu_not, ngamemoney_),
  };
  proto_gc_send_dizhu_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_send_dizhu_not_descriptor_,
      proto_gc_send_dizhu_not::default_instance_,
      proto_gc_send_dizhu_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_send_dizhu_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_send_dizhu_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_send_dizhu_not));
  proto_cg_complete_data_req_descriptor_ = file->message_type(33);
  static const int proto_cg_complete_data_req_offsets_[1] = {
  };
  proto_cg_complete_data_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_cg_complete_data_req_descriptor_,
      proto_cg_complete_data_req::default_instance_,
      proto_cg_complete_data_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_complete_data_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_complete_data_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_cg_complete_data_req));
  proto_sic_bet_update_ack_descriptor_ = file->message_type(34);
  static const int proto_sic_bet_update_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_bet_update_ack, nbetupdateacktag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_bet_update_ack, vecamountcell_),
  };
  proto_sic_bet_update_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_sic_bet_update_ack_descriptor_,
      proto_sic_bet_update_ack::default_instance_,
      proto_sic_bet_update_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_bet_update_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_bet_update_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_sic_bet_update_ack));
  proto_gc_item_add_not_descriptor_ = file->message_type(35);
  static const int proto_gc_item_add_not_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_item_add_not, nitemindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_item_add_not, nitemcount_),
  };
  proto_gc_item_add_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_item_add_not_descriptor_,
      proto_gc_item_add_not::default_instance_,
      proto_gc_item_add_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_item_add_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_item_add_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_item_add_not));
  proto_gc_bet_lord_card_ack_descriptor_ = file->message_type(36);
  static const int proto_gc_bet_lord_card_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_bet_lord_card_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_bet_lord_card_ack, index_),
  };
  proto_gc_bet_lord_card_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_bet_lord_card_ack_descriptor_,
      proto_gc_bet_lord_card_ack::default_instance_,
      proto_gc_bet_lord_card_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_bet_lord_card_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_bet_lord_card_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_bet_lord_card_ack));
  proto_gc_replay_data_not_descriptor_ = file->message_type(37);
  static const int proto_gc_replay_data_not_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_replay_data_not, vecchangecards_),
  };
  proto_gc_replay_data_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_replay_data_not_descriptor_,
      proto_gc_replay_data_not::default_instance_,
      proto_gc_replay_data_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_replay_data_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_replay_data_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_replay_data_not));
  proto_gc_ju_count_not_descriptor_ = file->message_type(38);
  static const int proto_gc_ju_count_not_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_ju_count_not, njucount_),
  };
  proto_gc_ju_count_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_ju_count_not_descriptor_,
      proto_gc_ju_count_not::default_instance_,
      proto_gc_ju_count_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_ju_count_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_ju_count_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_ju_count_not));
  proto_gc_had_start_not_descriptor_ = file->message_type(39);
  static const int proto_gc_had_start_not_offsets_[1] = {
  };
  proto_gc_had_start_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_had_start_not_descriptor_,
      proto_gc_had_start_not::default_instance_,
      proto_gc_had_start_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_had_start_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_had_start_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_had_start_not));
  proto_gc_double_score_not_descriptor_ = file->message_type(40);
  static const int proto_gc_double_score_not_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_double_score_not, ndouble_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_double_score_not, nserialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_double_score_not, cchairid_),
  };
  proto_gc_double_score_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_double_score_not_descriptor_,
      proto_gc_double_score_not::default_instance_,
      proto_gc_double_score_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_double_score_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_double_score_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_double_score_not));
  proto_sic_new_round_not_descriptor_ = file->message_type(41);
  static const int proto_sic_new_round_not_offsets_[1] = {
  };
  proto_sic_new_round_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_sic_new_round_not_descriptor_,
      proto_sic_new_round_not::default_instance_,
      proto_sic_new_round_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_new_round_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_new_round_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_sic_new_round_not));
  proto_gc_pause_game_not_descriptor_ = file->message_type(42);
  static const int proto_gc_pause_game_not_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_pause_game_not, nflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_pause_game_not, nmintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_pause_game_not, nsectime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_pause_game_not, cchairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_pause_game_not, snickname_),
  };
  proto_gc_pause_game_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_pause_game_not_descriptor_,
      proto_gc_pause_game_not::default_instance_,
      proto_gc_pause_game_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_pause_game_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_pause_game_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_pause_game_not));
  proto_gc_private_room_result_not_descriptor_ = file->message_type(43);
  static const int proto_gc_private_room_result_not_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_private_room_result_not, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_private_room_result_not, vecgamestatiscs_),
  };
  proto_gc_private_room_result_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_private_room_result_not_descriptor_,
      proto_gc_private_room_result_not::default_instance_,
      proto_gc_private_room_result_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_private_room_result_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_private_room_result_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_private_room_result_not));
  proto_st_sic_cell_descriptor_ = file->message_type(44);
  static const int proto_st_sic_cell_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_st_sic_cell, ccellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_st_sic_cell, namount_),
  };
  proto_st_sic_cell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_st_sic_cell_descriptor_,
      proto_st_sic_cell::default_instance_,
      proto_st_sic_cell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_st_sic_cell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_st_sic_cell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_st_sic_cell));
  proto_gc_play_card_not_descriptor_ = file->message_type(45);
  static const int proto_gc_play_card_not_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_play_card_not, cchairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_play_card_not, veccards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_play_card_not, ctype_),
  };
  proto_gc_play_card_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_play_card_not_descriptor_,
      proto_gc_play_card_not::default_instance_,
      proto_gc_play_card_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_play_card_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_play_card_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_play_card_not));
  proto_gc_item_info_not_descriptor_ = file->message_type(46);
  static const int proto_gc_item_info_not_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_item_info_not, nitemindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_item_info_not, nitemcount_),
  };
  proto_gc_item_info_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_item_info_not_descriptor_,
      proto_gc_item_info_not::default_instance_,
      proto_gc_item_info_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_item_info_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_item_info_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_item_info_not));
  proto_cg_private_room_result_req_descriptor_ = file->message_type(47);
  static const int proto_cg_private_room_result_req_offsets_[1] = {
  };
  proto_cg_private_room_result_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_cg_private_room_result_req_descriptor_,
      proto_cg_private_room_result_req::default_instance_,
      proto_cg_private_room_result_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_private_room_result_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_private_room_result_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_cg_private_room_result_req));
  proto_stUserResult_descriptor_ = file->message_type(48);
  static const int proto_stUserResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_stUserResult, nchairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_stUserResult, nscore_),
  };
  proto_stUserResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_stUserResult_descriptor_,
      proto_stUserResult::default_instance_,
      proto_stUserResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_stUserResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_stUserResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_stUserResult));
  proto_cg_starsky_season_noti_descriptor_ = file->message_type(49);
  static const int proto_cg_starsky_season_noti_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_starsky_season_noti, season_),
  };
  proto_cg_starsky_season_noti_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_cg_starsky_season_noti_descriptor_,
      proto_cg_starsky_season_noti::default_instance_,
      proto_cg_starsky_season_noti_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_starsky_season_noti, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_starsky_season_noti, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_cg_starsky_season_noti));
  proto_GameStatisc_descriptor_ = file->message_type(50);
  static const int proto_GameStatisc_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_GameStatisc, cchairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_GameStatisc, ncalltimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_GameStatisc, nlordtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_GameStatisc, nwintimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_GameStatisc, nzhanji_),
  };
  proto_GameStatisc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_GameStatisc_descriptor_,
      proto_GameStatisc::default_instance_,
      proto_GameStatisc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_GameStatisc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_GameStatisc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_GameStatisc));
  proto_gc_two_complete_data_not_descriptor_ = file->message_type(51);
  static const int proto_gc_two_complete_data_not_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_two_complete_data_not, ngamemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_two_complete_data_not, ndouble_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_two_complete_data_not, clord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_two_complete_data_not, veclordcards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_two_complete_data_not, vecdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_two_complete_data_not, nletnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_two_complete_data_not, nstart_),
  };
  proto_gc_two_complete_data_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_two_complete_data_not_descriptor_,
      proto_gc_two_complete_data_not::default_instance_,
      proto_gc_two_complete_data_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_two_complete_data_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_two_complete_data_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_two_complete_data_not));
  proto_gc_win_doubel_req_descriptor_ = file->message_type(52);
  static const int proto_gc_win_doubel_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_win_doubel_req, naddamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_win_doubel_req, naddprobabily_),
  };
  proto_gc_win_doubel_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_win_doubel_req_descriptor_,
      proto_gc_win_doubel_req::default_instance_,
      proto_gc_win_doubel_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_win_doubel_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_win_doubel_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_win_doubel_req));
  proto_gc_common_not_descriptor_ = file->message_type(53);
  static const int proto_gc_common_not_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_common_not, nop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_common_not, cchairid_),
  };
  proto_gc_common_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_common_not_descriptor_,
      proto_gc_common_not::default_instance_,
      proto_gc_common_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_common_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_common_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_common_not));
  proto_gc_complete_data_not_descriptor_ = file->message_type(54);
  static const int proto_gc_complete_data_not_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_complete_data_not, ngamemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_complete_data_not, ndouble_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_complete_data_not, clord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_complete_data_not, veclordcards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_complete_data_not, vecdata_),
  };
  proto_gc_complete_data_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_complete_data_not_descriptor_,
      proto_gc_complete_data_not::default_instance_,
      proto_gc_complete_data_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_complete_data_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_complete_data_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_complete_data_not));
  proto_sic_show_result_not_descriptor_ = file->message_type(55);
  static const int proto_sic_show_result_not_offsets_[1] = {
  };
  proto_sic_show_result_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_sic_show_result_not_descriptor_,
      proto_sic_show_result_not::default_instance_,
      proto_sic_show_result_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_show_result_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_show_result_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_sic_show_result_not));
  proto_cg_three_draw_req_card_descriptor_ = file->message_type(56);
  static const int proto_cg_three_draw_req_card_offsets_[1] = {
  };
  proto_cg_three_draw_req_card_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_cg_three_draw_req_card_descriptor_,
      proto_cg_three_draw_req_card::default_instance_,
      proto_cg_three_draw_req_card_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_three_draw_req_card, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_three_draw_req_card, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_cg_three_draw_req_card));
  proto_gc_game_model_descriptor_ = file->message_type(57);
  static const int proto_gc_game_model_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_game_model, cmodeltype_),
  };
  proto_gc_game_model_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_game_model_descriptor_,
      proto_gc_game_model::default_instance_,
      proto_gc_game_model_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_game_model, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_game_model, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_game_model));
  proto_gc_magic_emoji_config_not_descriptor_ = file->message_type(58);
  static const int proto_gc_magic_emoji_config_not_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_magic_emoji_config_not, emojiconfigs_),
  };
  proto_gc_magic_emoji_config_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_magic_emoji_config_not_descriptor_,
      proto_gc_magic_emoji_config_not::default_instance_,
      proto_gc_magic_emoji_config_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_magic_emoji_config_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_magic_emoji_config_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_magic_emoji_config_not));
  proto_emojiConfig_descriptor_ = file->message_type(59);
  static const int proto_emojiConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_emojiConfig, cemojiindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_emojiConfig, ccosttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_emojiConfig, ccostvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_emojiConfig, ntenitemindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_emojiConfig, ntenitemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_emojiConfig, ntenemojinum_),
  };
  proto_emojiConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_emojiConfig_descriptor_,
      proto_emojiConfig::default_instance_,
      proto_emojiConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_emojiConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_emojiConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_emojiConfig));
  proto_gc_show_card_req_descriptor_ = file->message_type(60);
  static const int proto_gc_show_card_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_show_card_req, nserialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_show_card_req, nshowcardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_show_card_req, nshowcardbet_),
  };
  proto_gc_show_card_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_show_card_req_descriptor_,
      proto_gc_show_card_req::default_instance_,
      proto_gc_show_card_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_show_card_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_show_card_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_show_card_req));
  proto_gc_extra_double_score_not_descriptor_ = file->message_type(61);
  static const int proto_gc_extra_double_score_not_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_extra_double_score_not, ndouble_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_extra_double_score_not, nlorddouble_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_extra_double_score_not, nserialid_),
  };
  proto_gc_extra_double_score_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_extra_double_score_not_descriptor_,
      proto_gc_extra_double_score_not::default_instance_,
      proto_gc_extra_double_score_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_extra_double_score_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_extra_double_score_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_extra_double_score_not));
  proto_cg_enable_invincible_req_descriptor_ = file->message_type(62);
  static const int proto_cg_enable_invincible_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_enable_invincible_req, nop_),
  };
  proto_cg_enable_invincible_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_cg_enable_invincible_req_descriptor_,
      proto_cg_enable_invincible_req::default_instance_,
      proto_cg_enable_invincible_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_enable_invincible_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_enable_invincible_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_cg_enable_invincible_req));
  proto_magic_emoji_noti_descriptor_ = file->message_type(63);
  static const int proto_magic_emoji_noti_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_magic_emoji_noti, ciserror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_magic_emoji_noti, cemojiindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_magic_emoji_noti, cfromchairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_magic_emoji_noti, ctochairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_magic_emoji_noti, cemojinum_),
  };
  proto_magic_emoji_noti_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_magic_emoji_noti_descriptor_,
      proto_magic_emoji_noti::default_instance_,
      proto_magic_emoji_noti_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_magic_emoji_noti, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_magic_emoji_noti, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_magic_emoji_noti));
  proto_gc_task_complete_not_descriptor_ = file->message_type(64);
  static const int proto_gc_task_complete_not_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_task_complete_not, chair_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_task_complete_not, task_status_),
  };
  proto_gc_task_complete_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_task_complete_not_descriptor_,
      proto_gc_task_complete_not::default_instance_,
      proto_gc_task_complete_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_task_complete_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_task_complete_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_task_complete_not));
  proto_gc_get_card_ack_descriptor_ = file->message_type(65);
  static const int proto_gc_get_card_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_get_card_ack, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_get_card_ack, veccards0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_get_card_ack, veccards1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_get_card_ack, veccards2_),
  };
  proto_gc_get_card_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_get_card_ack_descriptor_,
      proto_gc_get_card_ack::default_instance_,
      proto_gc_get_card_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_get_card_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_get_card_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_get_card_ack));
  proto_cg_lord_card_lottery_info_descriptor_ = file->message_type(66);
  static const int proto_cg_lord_card_lottery_info_offsets_[1] = {
  };
  proto_cg_lord_card_lottery_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_cg_lord_card_lottery_info_descriptor_,
      proto_cg_lord_card_lottery_info::default_instance_,
      proto_cg_lord_card_lottery_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_lord_card_lottery_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_lord_card_lottery_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_cg_lord_card_lottery_info));
  proto_mj_completedata_req_descriptor_ = file->message_type(67);
  static const int proto_mj_completedata_req_offsets_[1] = {
  };
  proto_mj_completedata_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_mj_completedata_req_descriptor_,
      proto_mj_completedata_req::default_instance_,
      proto_mj_completedata_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_mj_completedata_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_mj_completedata_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_mj_completedata_req));
  proto_gc_two_show_card_not_descriptor_ = file->message_type(68);
  static const int proto_gc_two_show_card_not_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_two_show_card_not, cchairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_two_show_card_not, nlordpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_two_show_card_not, clordcard_),
  };
  proto_gc_two_show_card_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_two_show_card_not_descriptor_,
      proto_gc_two_show_card_not::default_instance_,
      proto_gc_two_show_card_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_two_show_card_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_two_show_card_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_two_show_card_not));
  proto_gc_three_draw_ack_data_descriptor_ = file->message_type(69);
  static const int proto_gc_three_draw_ack_data_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_three_draw_ack_data, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_three_draw_ack_data, vecmoneydizhus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_three_draw_ack_data, veckindrates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_three_draw_ack_data, nbaodimoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_three_draw_ack_data, nbaodirate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_three_draw_ack_data, fminrate_),
  };
  proto_gc_three_draw_ack_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_three_draw_ack_data_descriptor_,
      proto_gc_three_draw_ack_data::default_instance_,
      proto_gc_three_draw_ack_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_three_draw_ack_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_three_draw_ack_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_three_draw_ack_data));
  proto_stUserResult1_descriptor_ = file->message_type(70);
  static const int proto_stUserResult1_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_stUserResult1, nchairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_stUserResult1, nscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_stUserResult1, njifen_),
  };
  proto_stUserResult1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_stUserResult1_descriptor_,
      proto_stUserResult1::default_instance_,
      proto_stUserResult1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_stUserResult1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_stUserResult1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_stUserResult1));
  proto_Kind_Rate_descriptor_ = file->message_type(71);
  static const int proto_Kind_Rate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_Kind_Rate, strkind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_Kind_Rate, strrate_),
  };
  proto_Kind_Rate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_Kind_Rate_descriptor_,
      proto_Kind_Rate::default_instance_,
      proto_Kind_Rate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_Kind_Rate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_Kind_Rate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_Kind_Rate));
  proto_cg_get_card_req_descriptor_ = file->message_type(72);
  static const int proto_cg_get_card_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_get_card_req, nserialid_),
  };
  proto_cg_get_card_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_cg_get_card_req_descriptor_,
      proto_cg_get_card_req::default_instance_,
      proto_cg_get_card_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_get_card_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_get_card_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_cg_get_card_req));
  proto_gc_lord_card_lottery_info_descriptor_ = file->message_type(73);
  static const int proto_gc_lord_card_lottery_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_lord_card_lottery_info, fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_lord_card_lottery_info, vecreward_),
  };
  proto_gc_lord_card_lottery_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_lord_card_lottery_info_descriptor_,
      proto_gc_lord_card_lottery_info::default_instance_,
      proto_gc_lord_card_lottery_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_lord_card_lottery_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_lord_card_lottery_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_lord_card_lottery_info));
  proto_gc_get_lord_card_reward_descriptor_ = file->message_type(74);
  static const int proto_gc_get_lord_card_reward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_get_lord_card_reward, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_get_lord_card_reward, money_),
  };
  proto_gc_get_lord_card_reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_get_lord_card_reward_descriptor_,
      proto_gc_get_lord_card_reward::default_instance_,
      proto_gc_get_lord_card_reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_get_lord_card_reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_get_lord_card_reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_get_lord_card_reward));
  proto_Money_DiZhu_descriptor_ = file->message_type(75);
  static const int proto_Money_DiZhu_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_Money_DiZhu, nmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_Money_DiZhu, ndizhu_),
  };
  proto_Money_DiZhu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_Money_DiZhu_descriptor_,
      proto_Money_DiZhu::default_instance_,
      proto_Money_DiZhu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_Money_DiZhu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_Money_DiZhu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_Money_DiZhu));
  proto_gc_three_draw_ack_card_descriptor_ = file->message_type(76);
  static const int proto_gc_three_draw_ack_card_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_three_draw_ack_card, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_three_draw_ack_card, veccards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_three_draw_ack_card, vecrates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_three_draw_ack_card, nmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_three_draw_ack_card, ndizhu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_three_draw_ack_card, frate_),
  };
  proto_gc_three_draw_ack_card_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_three_draw_ack_card_descriptor_,
      proto_gc_three_draw_ack_card::default_instance_,
      proto_gc_three_draw_ack_card_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_three_draw_ack_card, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_three_draw_ack_card, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_three_draw_ack_card));
  proto_svr_test_not_descriptor_ = file->message_type(77);
  static const int proto_svr_test_not_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_svr_test_not, ctest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_svr_test_not, ntest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_svr_test_not, vectest_),
  };
  proto_svr_test_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_svr_test_not_descriptor_,
      proto_svr_test_not::default_instance_,
      proto_svr_test_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_svr_test_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_svr_test_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_svr_test_not));
  proto_gc_get_redpackets_newbie_award_not_descriptor_ = file->message_type(78);
  static const int proto_gc_get_redpackets_newbie_award_not_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_get_redpackets_newbie_award_not, nret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_get_redpackets_newbie_award_not, namount_),
  };
  proto_gc_get_redpackets_newbie_award_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_get_redpackets_newbie_award_not_descriptor_,
      proto_gc_get_redpackets_newbie_award_not::default_instance_,
      proto_gc_get_redpackets_newbie_award_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_get_redpackets_newbie_award_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_get_redpackets_newbie_award_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_get_redpackets_newbie_award_not));
  proto_CCard_descriptor_ = file->message_type(79);
  static const int proto_CCard_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_CCard, m_ncolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_CCard, m_nvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_CCard, m_ncard_baovalue_),
  };
  proto_CCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_CCard_descriptor_,
      proto_CCard::default_instance_,
      proto_CCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_CCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_CCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_CCard));
  proto_gc_lord_card_not_descriptor_ = file->message_type(80);
  static const int proto_gc_lord_card_not_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_lord_card_not, clord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_lord_card_not, veccards_),
  };
  proto_gc_lord_card_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_lord_card_not_descriptor_,
      proto_gc_lord_card_not::default_instance_,
      proto_gc_lord_card_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_lord_card_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_lord_card_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_lord_card_not));
  proto_gc_counts_not_descriptor_ = file->message_type(81);
  static const int proto_gc_counts_not_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_counts_not, counts_num_),
  };
  proto_gc_counts_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_counts_not_descriptor_,
      proto_gc_counts_not::default_instance_,
      proto_gc_counts_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_counts_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_counts_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_counts_not));
  proto_gc_regain_lose_score_ack_descriptor_ = file->message_type(82);
  static const int proto_gc_regain_lose_score_ack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_regain_lose_score_ack, nret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_regain_lose_score_ack, ntime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_regain_lose_score_ack, nvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_regain_lose_score_ack, ncurcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_regain_lose_score_ack, nitemindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_regain_lose_score_ack, nitemnum_),
  };
  proto_gc_regain_lose_score_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_regain_lose_score_ack_descriptor_,
      proto_gc_regain_lose_score_ack::default_instance_,
      proto_gc_regain_lose_score_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_regain_lose_score_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_regain_lose_score_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_regain_lose_score_ack));
  proto_cli_my_req_descriptor_ = file->message_type(83);
  static const int proto_cli_my_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cli_my_req, a_),
  };
  proto_cli_my_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_cli_my_req_descriptor_,
      proto_cli_my_req::default_instance_,
      proto_cli_my_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cli_my_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cli_my_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_cli_my_req));
  proto_sic_bet_ack_descriptor_ = file->message_type(84);
  static const int proto_sic_bet_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_bet_ack, ballow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_bet_ack, ccellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_bet_ack, namountcell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_bet_ack, namountcelltotal_),
  };
  proto_sic_bet_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_sic_bet_ack_descriptor_,
      proto_sic_bet_ack::default_instance_,
      proto_sic_bet_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_bet_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_bet_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_sic_bet_ack));
  proto_gc_card_count_ack1_descriptor_ = file->message_type(85);
  static const int proto_gc_card_count_ack1_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_card_count_ack1, counts_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_card_count_ack1, m_vecputcard_),
  };
  proto_gc_card_count_ack1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_card_count_ack1_descriptor_,
      proto_gc_card_count_ack1::default_instance_,
      proto_gc_card_count_ack1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_card_count_ack1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_card_count_ack1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_card_count_ack1));
  proto_sic_bet_clear_req_descriptor_ = file->message_type(86);
  static const int proto_sic_bet_clear_req_offsets_[1] = {
  };
  proto_sic_bet_clear_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_sic_bet_clear_req_descriptor_,
      proto_sic_bet_clear_req::default_instance_,
      proto_sic_bet_clear_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_bet_clear_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_bet_clear_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_sic_bet_clear_req));
  proto_CCardsType_descriptor_ = file->message_type(87);
  static const int proto_CCardsType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_CCardsType, m_ntypebomb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_CCardsType, m_ntypenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_CCardsType, m_ntypevalue_),
  };
  proto_CCardsType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_CCardsType_descriptor_,
      proto_CCardsType::default_instance_,
      proto_CCardsType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_CCardsType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_CCardsType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_CCardsType));
  proto_sic_bet_update_req_descriptor_ = file->message_type(88);
  static const int proto_sic_bet_update_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_bet_update_req, nbetupdateacktag_),
  };
  proto_sic_bet_update_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_sic_bet_update_req_descriptor_,
      proto_sic_bet_update_req::default_instance_,
      proto_sic_bet_update_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_bet_update_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_bet_update_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_sic_bet_update_req));
  proto_sic_bet_clear_ack_descriptor_ = file->message_type(89);
  static const int proto_sic_bet_clear_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_bet_clear_ack, nbetupdateacktag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_bet_clear_ack, namountback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_bet_clear_ack, namounttotal_),
  };
  proto_sic_bet_clear_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_sic_bet_clear_ack_descriptor_,
      proto_sic_bet_clear_ack::default_instance_,
      proto_sic_bet_clear_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_bet_clear_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_bet_clear_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_sic_bet_clear_ack));
  proto_gc_bomb_not_descriptor_ = file->message_type(90);
  static const int proto_gc_bomb_not_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_bomb_not, ndouble_),
  };
  proto_gc_bomb_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_bomb_not_descriptor_,
      proto_gc_bomb_not::default_instance_,
      proto_gc_bomb_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_bomb_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_bomb_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_bomb_not));
  proto_cg_look_lord_card_req_descriptor_ = file->message_type(91);
  static const int proto_cg_look_lord_card_req_offsets_[1] = {
  };
  proto_cg_look_lord_card_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_cg_look_lord_card_req_descriptor_,
      proto_cg_look_lord_card_req::default_instance_,
      proto_cg_look_lord_card_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_look_lord_card_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_look_lord_card_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_cg_look_lord_card_req));
  proto_cg_auto_req_descriptor_ = file->message_type(92);
  static const int proto_cg_auto_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_auto_req, cauto_),
  };
  proto_cg_auto_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_cg_auto_req_descriptor_,
      proto_cg_auto_req::default_instance_,
      proto_cg_auto_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_auto_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_auto_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_cg_auto_req));
  proto_sic_history_req_descriptor_ = file->message_type(93);
  static const int proto_sic_history_req_offsets_[1] = {
  };
  proto_sic_history_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_sic_history_req_descriptor_,
      proto_sic_history_req::default_instance_,
      proto_sic_history_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_history_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_history_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_sic_history_req));
  proto_gc_auto_not_descriptor_ = file->message_type(94);
  static const int proto_gc_auto_not_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_auto_not, cchairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_auto_not, cauto_),
  };
  proto_gc_auto_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_auto_not_descriptor_,
      proto_gc_auto_not::default_instance_,
      proto_gc_auto_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_auto_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_auto_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_auto_not));
  proto_gc_call_score_req_descriptor_ = file->message_type(95);
  static const int proto_gc_call_score_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_call_score_req, nscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_call_score_req, nserialid_),
  };
  proto_gc_call_score_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_call_score_req_descriptor_,
      proto_gc_call_score_req::default_instance_,
      proto_gc_call_score_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_call_score_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_call_score_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_call_score_req));
  proto_cg_call_score_ack_descriptor_ = file->message_type(96);
  static const int proto_cg_call_score_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_call_score_ack, nscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_call_score_ack, nserialid_),
  };
  proto_cg_call_score_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_cg_call_score_ack_descriptor_,
      proto_cg_call_score_ack::default_instance_,
      proto_cg_call_score_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_call_score_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_call_score_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_cg_call_score_ack));
  proto_sic_show_light_cell_not_descriptor_ = file->message_type(97);
  static const int proto_sic_show_light_cell_not_offsets_[1] = {
  };
  proto_sic_show_light_cell_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_sic_show_light_cell_not_descriptor_,
      proto_sic_show_light_cell_not::default_instance_,
      proto_sic_show_light_cell_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_show_light_cell_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_show_light_cell_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_sic_show_light_cell_not));
  proto_gc_get_redpackets_88yuan_award_ack_descriptor_ = file->message_type(98);
  static const int proto_gc_get_redpackets_88yuan_award_ack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_get_redpackets_88yuan_award_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_get_redpackets_88yuan_award_ack, cur_rounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_get_redpackets_88yuan_award_ack, limit_rounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_get_redpackets_88yuan_award_ack, namount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_get_redpackets_88yuan_award_ack, citemtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_get_redpackets_88yuan_award_ack, task_id_),
  };
  proto_gc_get_redpackets_88yuan_award_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_get_redpackets_88yuan_award_ack_descriptor_,
      proto_gc_get_redpackets_88yuan_award_ack::default_instance_,
      proto_gc_get_redpackets_88yuan_award_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_get_redpackets_88yuan_award_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_get_redpackets_88yuan_award_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_get_redpackets_88yuan_award_ack));
  proto_TaskItem_descriptor_ = file->message_type(99);
  static const int proto_TaskItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_TaskItem, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_TaskItem, task_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_TaskItem, task_mission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_TaskItem, task_money_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_TaskItem, task_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_TaskItem, task_rate_),
  };
  proto_TaskItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_TaskItem_descriptor_,
      proto_TaskItem::default_instance_,
      proto_TaskItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_TaskItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_TaskItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_TaskItem));
  proto_gc_clienttimer_not_descriptor_ = file->message_type(100);
  static const int proto_gc_clienttimer_not_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_clienttimer_not, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_clienttimer_not, speriod_),
  };
  proto_gc_clienttimer_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_clienttimer_not_descriptor_,
      proto_gc_clienttimer_not::default_instance_,
      proto_gc_clienttimer_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_clienttimer_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_clienttimer_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_clienttimer_not));
  proto_cg_card_count_req_descriptor_ = file->message_type(101);
  static const int proto_cg_card_count_req_offsets_[1] = {
  };
  proto_cg_card_count_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_cg_card_count_req_descriptor_,
      proto_cg_card_count_req::default_instance_,
      proto_cg_card_count_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_card_count_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_card_count_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_cg_card_count_req));
  proto_gc_three_draw_notify_descriptor_ = file->message_type(102);
  static const int proto_gc_three_draw_notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_three_draw_notify, message_),
  };
  proto_gc_three_draw_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_three_draw_notify_descriptor_,
      proto_gc_three_draw_notify::default_instance_,
      proto_gc_three_draw_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_three_draw_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_three_draw_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_three_draw_notify));
  proto_gc_laizi_not_descriptor_ = file->message_type(103);
  static const int proto_gc_laizi_not_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_laizi_not, card_value_),
  };
  proto_gc_laizi_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_laizi_not_descriptor_,
      proto_gc_laizi_not::default_instance_,
      proto_gc_laizi_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_laizi_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_laizi_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_laizi_not));
  proto_magic_emoji_req_descriptor_ = file->message_type(104);
  static const int proto_magic_emoji_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_magic_emoji_req, cemojiindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_magic_emoji_req, ctochairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_magic_emoji_req, ccosttype_),
  };
  proto_magic_emoji_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_magic_emoji_req_descriptor_,
      proto_magic_emoji_req::default_instance_,
      proto_magic_emoji_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_magic_emoji_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_magic_emoji_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_magic_emoji_req));
  proto_cg_double_score_ack_descriptor_ = file->message_type(105);
  static const int proto_cg_double_score_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_double_score_ack, nscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_double_score_ack, nserialid_),
  };
  proto_cg_double_score_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_cg_double_score_ack_descriptor_,
      proto_cg_double_score_ack::default_instance_,
      proto_cg_double_score_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_double_score_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_double_score_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_cg_double_score_ack));
  proto_gc_win_doubel_ack_descriptor_ = file->message_type(106);
  static const int proto_gc_win_doubel_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_win_doubel_ack, cret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_win_doubel_ack, veciteminfo_),
  };
  proto_gc_win_doubel_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_win_doubel_ack_descriptor_,
      proto_gc_win_doubel_ack::default_instance_,
      proto_gc_win_doubel_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_win_doubel_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_win_doubel_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_win_doubel_ack));
  proto_sic_bet_begin_not_descriptor_ = file->message_type(107);
  static const int proto_sic_bet_begin_not_offsets_[1] = {
  };
  proto_sic_bet_begin_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_sic_bet_begin_not_descriptor_,
      proto_sic_bet_begin_not::default_instance_,
      proto_sic_bet_begin_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_bet_begin_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_bet_begin_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_sic_bet_begin_not));
  proto_cg_get_lord_card_reward_descriptor_ = file->message_type(108);
  static const int proto_cg_get_lord_card_reward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_get_lord_card_reward, index_),
  };
  proto_cg_get_lord_card_reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_cg_get_lord_card_reward_descriptor_,
      proto_cg_get_lord_card_reward::default_instance_,
      proto_cg_get_lord_card_reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_get_lord_card_reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_get_lord_card_reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_cg_get_lord_card_reward));
  proto_gc_bet_lord_card_result_ack_descriptor_ = file->message_type(109);
  static const int proto_gc_bet_lord_card_result_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_bet_lord_card_result_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_bet_lord_card_result_ack, money_),
  };
  proto_gc_bet_lord_card_result_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_bet_lord_card_result_ack_descriptor_,
      proto_gc_bet_lord_card_result_ack::default_instance_,
      proto_gc_bet_lord_card_result_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_bet_lord_card_result_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_bet_lord_card_result_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_bet_lord_card_result_ack));
  proto_svr_my_ack_descriptor_ = file->message_type(110);
  static const int proto_svr_my_ack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_svr_my_ack, b_),
  };
  proto_svr_my_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_svr_my_ack_descriptor_,
      proto_svr_my_ack::default_instance_,
      proto_svr_my_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_svr_my_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_svr_my_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_svr_my_ack));
  proto_gc_get_redpackets_newbie_award_req_descriptor_ = file->message_type(111);
  static const int proto_gc_get_redpackets_newbie_award_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_get_redpackets_newbie_award_req, namount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_get_redpackets_newbie_award_req, cdouble_),
  };
  proto_gc_get_redpackets_newbie_award_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_get_redpackets_newbie_award_req_descriptor_,
      proto_gc_get_redpackets_newbie_award_req::default_instance_,
      proto_gc_get_redpackets_newbie_award_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_get_redpackets_newbie_award_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_get_redpackets_newbie_award_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_get_redpackets_newbie_award_req));
  proto_gc_play_card_req_descriptor_ = file->message_type(112);
  static const int proto_gc_play_card_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_play_card_req, cauto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_play_card_req, nserialid_),
  };
  proto_gc_play_card_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_play_card_req_descriptor_,
      proto_gc_play_card_req::default_instance_,
      proto_gc_play_card_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_play_card_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_play_card_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_play_card_req));
  proto_gc_lord_card_lottery_base_descriptor_ = file->message_type(113);
  static const int proto_gc_lord_card_lottery_base_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_lord_card_lottery_base, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_lord_card_lottery_base, index_),
  };
  proto_gc_lord_card_lottery_base_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_lord_card_lottery_base_descriptor_,
      proto_gc_lord_card_lottery_base::default_instance_,
      proto_gc_lord_card_lottery_base_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_lord_card_lottery_base, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_lord_card_lottery_base, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_lord_card_lottery_base));
  proto_cg_play_card_ack_descriptor_ = file->message_type(114);
  static const int proto_cg_play_card_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_play_card_ack, nserialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_play_card_ack, ctimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_play_card_ack, veccards_),
  };
  proto_cg_play_card_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_cg_play_card_ack_descriptor_,
      proto_cg_play_card_ack::default_instance_,
      proto_cg_play_card_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_play_card_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_play_card_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_cg_play_card_ack));
  proto_cg_beishu_info_req_descriptor_ = file->message_type(115);
  static const int proto_cg_beishu_info_req_offsets_[1] = {
  };
  proto_cg_beishu_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_cg_beishu_info_req_descriptor_,
      proto_cg_beishu_info_req::default_instance_,
      proto_cg_beishu_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_beishu_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_beishu_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_cg_beishu_info_req));
  proto_gc_rob_lord_req_descriptor_ = file->message_type(116);
  static const int proto_gc_rob_lord_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_rob_lord_req, cdefaultlord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_rob_lord_req, nserialid_),
  };
  proto_gc_rob_lord_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_rob_lord_req_descriptor_,
      proto_gc_rob_lord_req::default_instance_,
      proto_gc_rob_lord_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_rob_lord_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_rob_lord_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_rob_lord_req));
  proto_sic_history_ack_descriptor_ = file->message_type(117);
  static const int proto_sic_history_ack_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_history_ack, bisfounder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_history_ack, nplayermoneybefore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_history_ack, vechistory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_history_ack, nchiptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_history_ack, vecchipvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_history_ack, namountmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_history_ack, fnextroundtimewait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_history_ack, vecperiod_),
  };
  proto_sic_history_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_sic_history_ack_descriptor_,
      proto_sic_history_ack::default_instance_,
      proto_sic_history_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_history_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_history_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_sic_history_ack));
  proto_cg_rob_lord_ack_descriptor_ = file->message_type(118);
  static const int proto_cg_rob_lord_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_rob_lord_ack, crob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_rob_lord_ack, nserialid_),
  };
  proto_cg_rob_lord_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_cg_rob_lord_ack_descriptor_,
      proto_cg_rob_lord_ack::default_instance_,
      proto_cg_rob_lord_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_rob_lord_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_rob_lord_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_cg_rob_lord_ack));
  proto_gc_show_card_not_descriptor_ = file->message_type(119);
  static const int proto_gc_show_card_not_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_show_card_not, nchairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_show_card_not, veccards_),
  };
  proto_gc_show_card_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_show_card_not_descriptor_,
      proto_gc_show_card_not::default_instance_,
      proto_gc_show_card_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_show_card_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_show_card_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_show_card_not));
  proto_sic_result_data_not_descriptor_ = file->message_type(120);
  static const int proto_sic_result_data_not_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_result_data_not, vecdice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_result_data_not, nwinmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_result_data_not, nplayermoneyafter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_result_data_not, vecwincells_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_result_data_not, vecplayerwincells_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_result_data_not, vechitaward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_result_data_not, vecrank_),
  };
  proto_sic_result_data_not_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_sic_result_data_not_descriptor_,
      proto_sic_result_data_not::default_instance_,
      proto_sic_result_data_not_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_result_data_not, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_sic_result_data_not, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_sic_result_data_not));
  proto_cg_show_card_ack_descriptor_ = file->message_type(121);
  static const int proto_cg_show_card_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_show_card_ack, cshowcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_show_card_ack, nserialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_show_card_ack, nshowcardbet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_show_card_ack, nshowcardtype_),
  };
  proto_cg_show_card_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_cg_show_card_ack_descriptor_,
      proto_cg_show_card_ack::default_instance_,
      proto_cg_show_card_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_show_card_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_show_card_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_cg_show_card_ack));
  proto_cg_send_card_ok_ack_descriptor_ = file->message_type(122);
  static const int proto_cg_send_card_ok_ack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_send_card_ok_ack, nserialid_),
  };
  proto_cg_send_card_ok_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_cg_send_card_ok_ack_descriptor_,
      proto_cg_send_card_ok_ack::default_instance_,
      proto_cg_send_card_ok_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_send_card_ok_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_cg_send_card_ok_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_cg_send_card_ok_ack));
  proto_gc_game_result_not1_descriptor_ = file->message_type(123);
  static const int proto_gc_game_result_not1_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_game_result_not1, btype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_game_result_not1, cdouble_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_game_result_not1, ccallscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_game_result_not1, bshowcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_game_result_not1, nbombcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_game_result_not1, bspring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_game_result_not1, breversespring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_game_result_not1, broblord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_game_result_not1, vecuserresult1_),
  };
  proto_gc_game_result_not1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_gc_game_result_not1_descriptor_,
      proto_gc_game_result_not1::default_instance_,
      proto_gc_game_result_not1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_game_result_not1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_gc_game_result_not1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_gc_game_result_not1));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_packet_5fdefine_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_game_start_not_descriptor_, &proto_gc_game_start_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_counts_not1_descriptor_, &proto_gc_counts_not1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_sic_bet_req_descriptor_, &proto_sic_bet_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_task_not_descriptor_, &proto_gc_task_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_two_lord_card_not_descriptor_, &proto_gc_two_lord_card_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_expression_not_descriptor_, &proto_gc_expression_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_cg_get_redpackets_newbie_award_ack_descriptor_, &proto_cg_get_redpackets_newbie_award_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_beishu_info_ack_descriptor_, &proto_gc_beishu_info_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_use_card_recode_noti_descriptor_, &proto_gc_use_card_recode_noti::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_cg_win_doubel_req_descriptor_, &proto_cg_win_doubel_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_card_recode_req_descriptor_, &proto_gc_card_recode_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_two_let_card_not_descriptor_, &proto_gc_two_let_card_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_update_player_tokenmoney_not_descriptor_, &proto_gc_update_player_tokenmoney_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_card_count_ack_descriptor_, &proto_gc_card_count_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_cg_regain_lose_score_req_descriptor_, &proto_cg_regain_lose_score_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_private_room_result_ack_descriptor_, &proto_gc_private_room_result_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_enable_invincible_ack_descriptor_, &proto_gc_enable_invincible_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_cg_bet_lord_card_req_descriptor_, &proto_cg_bet_lord_card_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_look_lord_card_item_ack_descriptor_, &proto_gc_look_lord_card_item_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_stUserData_descriptor_, &proto_stUserData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_double_score_req_descriptor_, &proto_gc_double_score_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_game_result_not_descriptor_, &proto_gc_game_result_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_user_savestar_card_noti_descriptor_, &proto_gc_user_savestar_card_noti::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_get_redpackets_award_ack_descriptor_, &proto_gc_get_redpackets_award_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_refresh_card_not_descriptor_, &proto_gc_refresh_card_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_cg_three_draw_req_data_descriptor_, &proto_cg_three_draw_req_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_ItemInfo_descriptor_, &proto_ItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_player_itemInfo_descriptor_, &proto_player_itemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_cg_get_redpackets_88yuan_award_req_descriptor_, &proto_cg_get_redpackets_88yuan_award_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_starsky_update_item_noti_descriptor_, &proto_gc_starsky_update_item_noti::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_cg_look_lord_card_item_req_descriptor_, &proto_cg_look_lord_card_item_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_cg_get_redpackets_award_req_descriptor_, &proto_cg_get_redpackets_award_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_send_dizhu_not_descriptor_, &proto_gc_send_dizhu_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_cg_complete_data_req_descriptor_, &proto_cg_complete_data_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_sic_bet_update_ack_descriptor_, &proto_sic_bet_update_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_item_add_not_descriptor_, &proto_gc_item_add_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_bet_lord_card_ack_descriptor_, &proto_gc_bet_lord_card_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_replay_data_not_descriptor_, &proto_gc_replay_data_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_ju_count_not_descriptor_, &proto_gc_ju_count_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_had_start_not_descriptor_, &proto_gc_had_start_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_double_score_not_descriptor_, &proto_gc_double_score_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_sic_new_round_not_descriptor_, &proto_sic_new_round_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_pause_game_not_descriptor_, &proto_gc_pause_game_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_private_room_result_not_descriptor_, &proto_gc_private_room_result_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_st_sic_cell_descriptor_, &proto_st_sic_cell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_play_card_not_descriptor_, &proto_gc_play_card_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_item_info_not_descriptor_, &proto_gc_item_info_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_cg_private_room_result_req_descriptor_, &proto_cg_private_room_result_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_stUserResult_descriptor_, &proto_stUserResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_cg_starsky_season_noti_descriptor_, &proto_cg_starsky_season_noti::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_GameStatisc_descriptor_, &proto_GameStatisc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_two_complete_data_not_descriptor_, &proto_gc_two_complete_data_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_win_doubel_req_descriptor_, &proto_gc_win_doubel_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_common_not_descriptor_, &proto_gc_common_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_complete_data_not_descriptor_, &proto_gc_complete_data_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_sic_show_result_not_descriptor_, &proto_sic_show_result_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_cg_three_draw_req_card_descriptor_, &proto_cg_three_draw_req_card::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_game_model_descriptor_, &proto_gc_game_model::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_magic_emoji_config_not_descriptor_, &proto_gc_magic_emoji_config_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_emojiConfig_descriptor_, &proto_emojiConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_show_card_req_descriptor_, &proto_gc_show_card_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_extra_double_score_not_descriptor_, &proto_gc_extra_double_score_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_cg_enable_invincible_req_descriptor_, &proto_cg_enable_invincible_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_magic_emoji_noti_descriptor_, &proto_magic_emoji_noti::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_task_complete_not_descriptor_, &proto_gc_task_complete_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_get_card_ack_descriptor_, &proto_gc_get_card_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_cg_lord_card_lottery_info_descriptor_, &proto_cg_lord_card_lottery_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_mj_completedata_req_descriptor_, &proto_mj_completedata_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_two_show_card_not_descriptor_, &proto_gc_two_show_card_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_three_draw_ack_data_descriptor_, &proto_gc_three_draw_ack_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_stUserResult1_descriptor_, &proto_stUserResult1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_Kind_Rate_descriptor_, &proto_Kind_Rate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_cg_get_card_req_descriptor_, &proto_cg_get_card_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_lord_card_lottery_info_descriptor_, &proto_gc_lord_card_lottery_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_get_lord_card_reward_descriptor_, &proto_gc_get_lord_card_reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_Money_DiZhu_descriptor_, &proto_Money_DiZhu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_three_draw_ack_card_descriptor_, &proto_gc_three_draw_ack_card::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_svr_test_not_descriptor_, &proto_svr_test_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_get_redpackets_newbie_award_not_descriptor_, &proto_gc_get_redpackets_newbie_award_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_CCard_descriptor_, &proto_CCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_lord_card_not_descriptor_, &proto_gc_lord_card_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_counts_not_descriptor_, &proto_gc_counts_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_regain_lose_score_ack_descriptor_, &proto_gc_regain_lose_score_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_cli_my_req_descriptor_, &proto_cli_my_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_sic_bet_ack_descriptor_, &proto_sic_bet_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_card_count_ack1_descriptor_, &proto_gc_card_count_ack1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_sic_bet_clear_req_descriptor_, &proto_sic_bet_clear_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_CCardsType_descriptor_, &proto_CCardsType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_sic_bet_update_req_descriptor_, &proto_sic_bet_update_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_sic_bet_clear_ack_descriptor_, &proto_sic_bet_clear_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_bomb_not_descriptor_, &proto_gc_bomb_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_cg_look_lord_card_req_descriptor_, &proto_cg_look_lord_card_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_cg_auto_req_descriptor_, &proto_cg_auto_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_sic_history_req_descriptor_, &proto_sic_history_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_auto_not_descriptor_, &proto_gc_auto_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_call_score_req_descriptor_, &proto_gc_call_score_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_cg_call_score_ack_descriptor_, &proto_cg_call_score_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_sic_show_light_cell_not_descriptor_, &proto_sic_show_light_cell_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_get_redpackets_88yuan_award_ack_descriptor_, &proto_gc_get_redpackets_88yuan_award_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_TaskItem_descriptor_, &proto_TaskItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_clienttimer_not_descriptor_, &proto_gc_clienttimer_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_cg_card_count_req_descriptor_, &proto_cg_card_count_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_three_draw_notify_descriptor_, &proto_gc_three_draw_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_laizi_not_descriptor_, &proto_gc_laizi_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_magic_emoji_req_descriptor_, &proto_magic_emoji_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_cg_double_score_ack_descriptor_, &proto_cg_double_score_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_win_doubel_ack_descriptor_, &proto_gc_win_doubel_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_sic_bet_begin_not_descriptor_, &proto_sic_bet_begin_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_cg_get_lord_card_reward_descriptor_, &proto_cg_get_lord_card_reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_bet_lord_card_result_ack_descriptor_, &proto_gc_bet_lord_card_result_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_svr_my_ack_descriptor_, &proto_svr_my_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_get_redpackets_newbie_award_req_descriptor_, &proto_gc_get_redpackets_newbie_award_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_play_card_req_descriptor_, &proto_gc_play_card_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_lord_card_lottery_base_descriptor_, &proto_gc_lord_card_lottery_base::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_cg_play_card_ack_descriptor_, &proto_cg_play_card_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_cg_beishu_info_req_descriptor_, &proto_cg_beishu_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_rob_lord_req_descriptor_, &proto_gc_rob_lord_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_sic_history_ack_descriptor_, &proto_sic_history_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_cg_rob_lord_ack_descriptor_, &proto_cg_rob_lord_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_show_card_not_descriptor_, &proto_gc_show_card_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_sic_result_data_not_descriptor_, &proto_sic_result_data_not::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_cg_show_card_ack_descriptor_, &proto_cg_show_card_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_cg_send_card_ok_ack_descriptor_, &proto_cg_send_card_ok_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_gc_game_result_not1_descriptor_, &proto_gc_game_result_not1::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_packet_5fdefine_2eproto() {
  delete proto_gc_game_start_not::default_instance_;
  delete proto_gc_game_start_not_reflection_;
  delete proto_gc_counts_not1::default_instance_;
  delete proto_gc_counts_not1_reflection_;
  delete proto_sic_bet_req::default_instance_;
  delete proto_sic_bet_req_reflection_;
  delete proto_gc_task_not::default_instance_;
  delete proto_gc_task_not_reflection_;
  delete proto_gc_two_lord_card_not::default_instance_;
  delete proto_gc_two_lord_card_not_reflection_;
  delete proto_gc_expression_not::default_instance_;
  delete proto_gc_expression_not_reflection_;
  delete proto_cg_get_redpackets_newbie_award_ack::default_instance_;
  delete proto_cg_get_redpackets_newbie_award_ack_reflection_;
  delete proto_gc_beishu_info_ack::default_instance_;
  delete proto_gc_beishu_info_ack_reflection_;
  delete proto_gc_use_card_recode_noti::default_instance_;
  delete proto_gc_use_card_recode_noti_reflection_;
  delete proto_cg_win_doubel_req::default_instance_;
  delete proto_cg_win_doubel_req_reflection_;
  delete proto_gc_card_recode_req::default_instance_;
  delete proto_gc_card_recode_req_reflection_;
  delete proto_gc_two_let_card_not::default_instance_;
  delete proto_gc_two_let_card_not_reflection_;
  delete proto_gc_update_player_tokenmoney_not::default_instance_;
  delete proto_gc_update_player_tokenmoney_not_reflection_;
  delete proto_gc_card_count_ack::default_instance_;
  delete proto_gc_card_count_ack_reflection_;
  delete proto_cg_regain_lose_score_req::default_instance_;
  delete proto_cg_regain_lose_score_req_reflection_;
  delete proto_gc_private_room_result_ack::default_instance_;
  delete proto_gc_private_room_result_ack_reflection_;
  delete proto_gc_enable_invincible_ack::default_instance_;
  delete proto_gc_enable_invincible_ack_reflection_;
  delete proto_cg_bet_lord_card_req::default_instance_;
  delete proto_cg_bet_lord_card_req_reflection_;
  delete proto_gc_look_lord_card_item_ack::default_instance_;
  delete proto_gc_look_lord_card_item_ack_reflection_;
  delete proto_stUserData::default_instance_;
  delete proto_stUserData_reflection_;
  delete proto_gc_double_score_req::default_instance_;
  delete proto_gc_double_score_req_reflection_;
  delete proto_gc_game_result_not::default_instance_;
  delete proto_gc_game_result_not_reflection_;
  delete proto_gc_user_savestar_card_noti::default_instance_;
  delete proto_gc_user_savestar_card_noti_reflection_;
  delete proto_gc_get_redpackets_award_ack::default_instance_;
  delete proto_gc_get_redpackets_award_ack_reflection_;
  delete proto_gc_refresh_card_not::default_instance_;
  delete proto_gc_refresh_card_not_reflection_;
  delete proto_cg_three_draw_req_data::default_instance_;
  delete proto_cg_three_draw_req_data_reflection_;
  delete proto_ItemInfo::default_instance_;
  delete proto_ItemInfo_reflection_;
  delete proto_player_itemInfo::default_instance_;
  delete proto_player_itemInfo_reflection_;
  delete proto_cg_get_redpackets_88yuan_award_req::default_instance_;
  delete proto_cg_get_redpackets_88yuan_award_req_reflection_;
  delete proto_gc_starsky_update_item_noti::default_instance_;
  delete proto_gc_starsky_update_item_noti_reflection_;
  delete proto_cg_look_lord_card_item_req::default_instance_;
  delete proto_cg_look_lord_card_item_req_reflection_;
  delete proto_cg_get_redpackets_award_req::default_instance_;
  delete proto_cg_get_redpackets_award_req_reflection_;
  delete proto_gc_send_dizhu_not::default_instance_;
  delete proto_gc_send_dizhu_not_reflection_;
  delete proto_cg_complete_data_req::default_instance_;
  delete proto_cg_complete_data_req_reflection_;
  delete proto_sic_bet_update_ack::default_instance_;
  delete proto_sic_bet_update_ack_reflection_;
  delete proto_gc_item_add_not::default_instance_;
  delete proto_gc_item_add_not_reflection_;
  delete proto_gc_bet_lord_card_ack::default_instance_;
  delete proto_gc_bet_lord_card_ack_reflection_;
  delete proto_gc_replay_data_not::default_instance_;
  delete proto_gc_replay_data_not_reflection_;
  delete proto_gc_ju_count_not::default_instance_;
  delete proto_gc_ju_count_not_reflection_;
  delete proto_gc_had_start_not::default_instance_;
  delete proto_gc_had_start_not_reflection_;
  delete proto_gc_double_score_not::default_instance_;
  delete proto_gc_double_score_not_reflection_;
  delete proto_sic_new_round_not::default_instance_;
  delete proto_sic_new_round_not_reflection_;
  delete proto_gc_pause_game_not::default_instance_;
  delete proto_gc_pause_game_not_reflection_;
  delete proto_gc_private_room_result_not::default_instance_;
  delete proto_gc_private_room_result_not_reflection_;
  delete proto_st_sic_cell::default_instance_;
  delete proto_st_sic_cell_reflection_;
  delete proto_gc_play_card_not::default_instance_;
  delete proto_gc_play_card_not_reflection_;
  delete proto_gc_item_info_not::default_instance_;
  delete proto_gc_item_info_not_reflection_;
  delete proto_cg_private_room_result_req::default_instance_;
  delete proto_cg_private_room_result_req_reflection_;
  delete proto_stUserResult::default_instance_;
  delete proto_stUserResult_reflection_;
  delete proto_cg_starsky_season_noti::default_instance_;
  delete proto_cg_starsky_season_noti_reflection_;
  delete proto_GameStatisc::default_instance_;
  delete proto_GameStatisc_reflection_;
  delete proto_gc_two_complete_data_not::default_instance_;
  delete proto_gc_two_complete_data_not_reflection_;
  delete proto_gc_win_doubel_req::default_instance_;
  delete proto_gc_win_doubel_req_reflection_;
  delete proto_gc_common_not::default_instance_;
  delete proto_gc_common_not_reflection_;
  delete proto_gc_complete_data_not::default_instance_;
  delete proto_gc_complete_data_not_reflection_;
  delete proto_sic_show_result_not::default_instance_;
  delete proto_sic_show_result_not_reflection_;
  delete proto_cg_three_draw_req_card::default_instance_;
  delete proto_cg_three_draw_req_card_reflection_;
  delete proto_gc_game_model::default_instance_;
  delete proto_gc_game_model_reflection_;
  delete proto_gc_magic_emoji_config_not::default_instance_;
  delete proto_gc_magic_emoji_config_not_reflection_;
  delete proto_emojiConfig::default_instance_;
  delete proto_emojiConfig_reflection_;
  delete proto_gc_show_card_req::default_instance_;
  delete proto_gc_show_card_req_reflection_;
  delete proto_gc_extra_double_score_not::default_instance_;
  delete proto_gc_extra_double_score_not_reflection_;
  delete proto_cg_enable_invincible_req::default_instance_;
  delete proto_cg_enable_invincible_req_reflection_;
  delete proto_magic_emoji_noti::default_instance_;
  delete proto_magic_emoji_noti_reflection_;
  delete proto_gc_task_complete_not::default_instance_;
  delete proto_gc_task_complete_not_reflection_;
  delete proto_gc_get_card_ack::default_instance_;
  delete proto_gc_get_card_ack_reflection_;
  delete proto_cg_lord_card_lottery_info::default_instance_;
  delete proto_cg_lord_card_lottery_info_reflection_;
  delete proto_mj_completedata_req::default_instance_;
  delete proto_mj_completedata_req_reflection_;
  delete proto_gc_two_show_card_not::default_instance_;
  delete proto_gc_two_show_card_not_reflection_;
  delete proto_gc_three_draw_ack_data::default_instance_;
  delete proto_gc_three_draw_ack_data_reflection_;
  delete proto_stUserResult1::default_instance_;
  delete proto_stUserResult1_reflection_;
  delete proto_Kind_Rate::default_instance_;
  delete proto_Kind_Rate_reflection_;
  delete proto_cg_get_card_req::default_instance_;
  delete proto_cg_get_card_req_reflection_;
  delete proto_gc_lord_card_lottery_info::default_instance_;
  delete proto_gc_lord_card_lottery_info_reflection_;
  delete proto_gc_get_lord_card_reward::default_instance_;
  delete proto_gc_get_lord_card_reward_reflection_;
  delete proto_Money_DiZhu::default_instance_;
  delete proto_Money_DiZhu_reflection_;
  delete proto_gc_three_draw_ack_card::default_instance_;
  delete proto_gc_three_draw_ack_card_reflection_;
  delete proto_svr_test_not::default_instance_;
  delete proto_svr_test_not_reflection_;
  delete proto_gc_get_redpackets_newbie_award_not::default_instance_;
  delete proto_gc_get_redpackets_newbie_award_not_reflection_;
  delete proto_CCard::default_instance_;
  delete proto_CCard_reflection_;
  delete proto_gc_lord_card_not::default_instance_;
  delete proto_gc_lord_card_not_reflection_;
  delete proto_gc_counts_not::default_instance_;
  delete proto_gc_counts_not_reflection_;
  delete proto_gc_regain_lose_score_ack::default_instance_;
  delete proto_gc_regain_lose_score_ack_reflection_;
  delete proto_cli_my_req::default_instance_;
  delete proto_cli_my_req_reflection_;
  delete proto_sic_bet_ack::default_instance_;
  delete proto_sic_bet_ack_reflection_;
  delete proto_gc_card_count_ack1::default_instance_;
  delete proto_gc_card_count_ack1_reflection_;
  delete proto_sic_bet_clear_req::default_instance_;
  delete proto_sic_bet_clear_req_reflection_;
  delete proto_CCardsType::default_instance_;
  delete proto_CCardsType_reflection_;
  delete proto_sic_bet_update_req::default_instance_;
  delete proto_sic_bet_update_req_reflection_;
  delete proto_sic_bet_clear_ack::default_instance_;
  delete proto_sic_bet_clear_ack_reflection_;
  delete proto_gc_bomb_not::default_instance_;
  delete proto_gc_bomb_not_reflection_;
  delete proto_cg_look_lord_card_req::default_instance_;
  delete proto_cg_look_lord_card_req_reflection_;
  delete proto_cg_auto_req::default_instance_;
  delete proto_cg_auto_req_reflection_;
  delete proto_sic_history_req::default_instance_;
  delete proto_sic_history_req_reflection_;
  delete proto_gc_auto_not::default_instance_;
  delete proto_gc_auto_not_reflection_;
  delete proto_gc_call_score_req::default_instance_;
  delete proto_gc_call_score_req_reflection_;
  delete proto_cg_call_score_ack::default_instance_;
  delete proto_cg_call_score_ack_reflection_;
  delete proto_sic_show_light_cell_not::default_instance_;
  delete proto_sic_show_light_cell_not_reflection_;
  delete proto_gc_get_redpackets_88yuan_award_ack::default_instance_;
  delete proto_gc_get_redpackets_88yuan_award_ack_reflection_;
  delete proto_TaskItem::default_instance_;
  delete proto_TaskItem_reflection_;
  delete proto_gc_clienttimer_not::default_instance_;
  delete proto_gc_clienttimer_not_reflection_;
  delete proto_cg_card_count_req::default_instance_;
  delete proto_cg_card_count_req_reflection_;
  delete proto_gc_three_draw_notify::default_instance_;
  delete proto_gc_three_draw_notify_reflection_;
  delete proto_gc_laizi_not::default_instance_;
  delete proto_gc_laizi_not_reflection_;
  delete proto_magic_emoji_req::default_instance_;
  delete proto_magic_emoji_req_reflection_;
  delete proto_cg_double_score_ack::default_instance_;
  delete proto_cg_double_score_ack_reflection_;
  delete proto_gc_win_doubel_ack::default_instance_;
  delete proto_gc_win_doubel_ack_reflection_;
  delete proto_sic_bet_begin_not::default_instance_;
  delete proto_sic_bet_begin_not_reflection_;
  delete proto_cg_get_lord_card_reward::default_instance_;
  delete proto_cg_get_lord_card_reward_reflection_;
  delete proto_gc_bet_lord_card_result_ack::default_instance_;
  delete proto_gc_bet_lord_card_result_ack_reflection_;
  delete proto_svr_my_ack::default_instance_;
  delete proto_svr_my_ack_reflection_;
  delete proto_gc_get_redpackets_newbie_award_req::default_instance_;
  delete proto_gc_get_redpackets_newbie_award_req_reflection_;
  delete proto_gc_play_card_req::default_instance_;
  delete proto_gc_play_card_req_reflection_;
  delete proto_gc_lord_card_lottery_base::default_instance_;
  delete proto_gc_lord_card_lottery_base_reflection_;
  delete proto_cg_play_card_ack::default_instance_;
  delete proto_cg_play_card_ack_reflection_;
  delete proto_cg_beishu_info_req::default_instance_;
  delete proto_cg_beishu_info_req_reflection_;
  delete proto_gc_rob_lord_req::default_instance_;
  delete proto_gc_rob_lord_req_reflection_;
  delete proto_sic_history_ack::default_instance_;
  delete proto_sic_history_ack_reflection_;
  delete proto_cg_rob_lord_ack::default_instance_;
  delete proto_cg_rob_lord_ack_reflection_;
  delete proto_gc_show_card_not::default_instance_;
  delete proto_gc_show_card_not_reflection_;
  delete proto_sic_result_data_not::default_instance_;
  delete proto_sic_result_data_not_reflection_;
  delete proto_cg_show_card_ack::default_instance_;
  delete proto_cg_show_card_ack_reflection_;
  delete proto_cg_send_card_ok_ack::default_instance_;
  delete proto_cg_send_card_ok_ack_reflection_;
  delete proto_gc_game_result_not1::default_instance_;
  delete proto_gc_game_result_not1_reflection_;
}

void protobuf_AddDesc_packet_5fdefine_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023packet_define.proto\"\205\001\n\027proto_gc_game_"
    "start_not\022\022\n\nnGameMoney\030\001 \002(\005\022\020\n\010nCardNu"
    "m\030\002 \002(\005\022\020\n\010nLordPos\030\003 \002(\005\022\037\n\tcLordCard\030\004"
    " \002(\0132\014.proto_CCard\022\021\n\tnSerialID\030\005 \002(\005\"*\n"
    "\024proto_gc_counts_not1\022\022\n\ncounts_num\030\001 \002("
    "\005\"5\n\021proto_sic_bet_req\022\017\n\007cCellID\030\001 \002(\005\022"
    "\017\n\007nAmount\030\002 \002(\005\"7\n\021proto_gc_task_not\022\"\n"
    "\ttask_item\030\001 \002(\0132\017.proto_TaskItem\"q\n\032pro"
    "to_gc_two_lord_card_not\022\r\n\005cLord\030\001 \002(\005\022\036"
    "\n\010vecCards\030\002 \003(\0132\014.proto_CCard\022\017\n\007nLetNu"
    "m\030\003 \002(\005\022\023\n\013nLordLetNum\030\004 \002(\005\"J\n\027proto_gc"
    "_expression_not\022\027\n\017expression_type\030\001 \002(\005"
    "\022\026\n\016expression_num\030\002 \002(\005\";\n(proto_cg_get"
    "_redpackets_newbie_award_ack\022\017\n\007cDouble\030"
    "\001 \002(\005\"J\n\030proto_gc_beishu_info_ack\022\025\n\rvec"
    "BeiShuInfo\030\001 \003(\005\022\027\n\017vecPlayerBeiShu\030\002 \003("
    "\005\"H\n\035proto_gc_use_card_recode_noti\022\020\n\010cC"
    "hairID\030\001 \002(\005\022\025\n\rcReconnection\030\002 \002(\005\"\031\n\027p"
    "roto_cg_win_doubel_req\"\032\n\030proto_gc_card_"
    "recode_req\",\n\031proto_gc_two_let_card_not\022"
    "\017\n\007nLetNum\030\001 \002(\005\"f\n%proto_gc_update_play"
    "er_tokenmoney_not\022\023\n\013ply_chairid\030\001 \002(\005\022("
    "\n\010itemInfo\030\002 \003(\0132\026.proto_player_itemInfo"
    "\"Q\n\027proto_gc_card_count_ack\022\022\n\ncounts_nu"
    "m\030\001 \002(\005\022\"\n\014m_vecPutCard\030\002 \003(\0132\014.proto_CC"
    "ard\"S\n\036proto_cg_regain_lose_score_req\022\013\n"
    "\003nOp\030\001 \002(\005\022\022\n\nnItemIndex\030\002 \002(\005\022\020\n\010nItemN"
    "um\030\003 \002(\005\"O\n proto_gc_private_room_result"
    "_ack\022+\n\017vecGameStatiscs\030\001 \003(\0132\022.proto_Ga"
    "meStatisc\".\n\036proto_gc_enable_invincible_"
    "ack\022\014\n\004nRet\030\001 \002(\005\"+\n\032proto_cg_bet_lord_c"
    "ard_req\022\r\n\005index\030\001 \002(\005\"0\n proto_gc_look_"
    "lord_card_item_ack\022\014\n\004nRet\030\001 \002(\005\"k\n\020prot"
    "o_stUserData\022\020\n\010cChairID\030\001 \002(\005\022\"\n\014vecHan"
    "dCards\030\002 \003(\0132\014.proto_CCard\022!\n\013vecPutCard"
    "s\030\003 \003(\0132\014.proto_CCard\".\n\031proto_gc_double"
    "_score_req\022\021\n\tnSerialID\030\001 \002(\005\"\334\001\n\030proto_"
    "gc_game_result_not\022\r\n\005bType\030\001 \002(\005\022\017\n\007cDo"
    "uble\030\002 \002(\005\022\022\n\ncCallScore\030\003 \002(\005\022\021\n\tbShowC"
    "ard\030\004 \002(\005\022\022\n\nnBombCount\030\005 \002(\005\022\017\n\007bSpring"
    "\030\006 \002(\005\022\026\n\016bReverseSpring\030\007 \002(\005\022\020\n\010bRobLo"
    "rd\030\010 \002(\005\022*\n\rvecUserResult\030\t \003(\0132\023.proto_"
    "stUserResult\"\"\n proto_gc_user_savestar_c"
    "ard_noti\"\271\001\n!proto_gc_get_redpackets_awa"
    "rd_ack\022\013\n\003ret\030\001 \002(\005\022\022\n\ncur_rounds\030\002 \002(\005\022"
    "\024\n\014limit_rounds\030\003 \002(\005\022\017\n\007nAmount\030\004 \002(\005\022\021"
    "\n\tcItemtype\030\005 \002(\005\022\017\n\007task_id\030\006 \002(\005\022(\n\010fa"
    "keItem\030\007 \003(\0132\026.proto_player_itemInfo\"M\n\031"
    "proto_gc_refresh_card_not\022\020\n\010cChairID\030\001 "
    "\002(\005\022\036\n\010vecCards\030\002 \003(\0132\014.proto_CCard\"\036\n\034p"
    "roto_cg_three_draw_req_data\"6\n\016proto_Ite"
    "mInfo\022\022\n\nnItemIndex\030\001 \002(\005\022\020\n\010nItemNum\030\002 "
    "\002(\003\"Q\n\025proto_player_itemInfo\022\022\n\nnItemInd"
    "ex\030\001 \002(\005\022\020\n\010nItemNum\030\002 \002(\005\022\022\n\nnItemNum64"
    "\030\003 \002(\003\"8\n(proto_cg_get_redpackets_88yuan"
    "_award_req\022\014\n\004type\030\001 \002(\005\"p\n!proto_gc_sta"
    "rsky_update_item_noti\022\017\n\007stamina\030\001 \002(\005\022\024"
    "\n\014match_ticket\030\002 \002(\005\022\r\n\005score\030\003 \002(\005\022\025\n\rs"
    "avestar_card\030\004 \002(\005\"\"\n proto_cg_look_lord"
    "_card_item_req\"1\n!proto_cg_get_redpacket"
    "s_award_req\022\014\n\004type\030\001 \002(\005\"-\n\027proto_gc_se"
    "nd_dizhu_not\022\022\n\nnGameMoney\030\001 \002(\005\"\034\n\032prot"
    "o_cg_complete_data_req\"_\n\030proto_sic_bet_"
    "update_ack\022\030\n\020nBetUpdateAckTag\030\001 \002(\005\022)\n\r"
    "vecAmountCell\030\002 \003(\0132\022.proto_st_sic_cell\""
    "\?\n\025proto_gc_item_add_not\022\022\n\nnItemIndex\030\001"
    " \002(\005\022\022\n\nnItemCount\030\002 \002(\005\"8\n\032proto_gc_bet"
    "_lord_card_ack\022\013\n\003ret\030\001 \002(\005\022\r\n\005index\030\002 \002"
    "(\005\"N\n\030proto_gc_replay_data_not\0222\n\016vecCha"
    "ngeCards\030\001 \003(\0132\032.proto_gc_refresh_card_n"
    "ot\")\n\025proto_gc_ju_count_not\022\020\n\010nJuCount\030"
    "\001 \002(\005\"\030\n\026proto_gc_had_start_not\"Q\n\031proto"
    "_gc_double_score_not\022\017\n\007nDouble\030\001 \002(\005\022\021\n"
    "\tnSerialID\030\002 \002(\005\022\020\n\010cChairID\030\003 \002(\005\"\031\n\027pr"
    "oto_sic_new_round_not\"q\n\027proto_gc_pause_"
    "game_not\022\r\n\005nFlag\030\001 \002(\005\022\020\n\010nMinTime\030\002 \002("
    "\005\022\020\n\010nSecTime\030\003 \002(\005\022\020\n\010cChairId\030\004 \002(\005\022\021\n"
    "\tsNickName\030\005 \002(\t\"\\\n proto_gc_private_roo"
    "m_result_not\022\013\n\003ret\030\001 \002(\005\022+\n\017vecGameStat"
    "iscs\030\002 \003(\0132\022.proto_GameStatisc\"5\n\021proto_"
    "st_sic_cell\022\017\n\007cCellID\030\001 \002(\005\022\017\n\007nAmount\030"
    "\002 \002(\005\"l\n\026proto_gc_play_card_not\022\020\n\010cChai"
    "rID\030\001 \002(\005\022\036\n\010vecCards\030\002 \003(\0132\014.proto_CCar"
    "d\022 \n\005cType\030\003 \002(\0132\021.proto_CCardsType\"@\n\026p"
    "roto_gc_item_info_not\022\022\n\nnItemIndex\030\001 \002("
    "\005\022\022\n\nnItemCount\030\002 \002(\005\"\"\n proto_cg_privat"
    "e_room_result_req\"6\n\022proto_stUserResult\022"
    "\020\n\010nChairID\030\001 \002(\005\022\016\n\006nScore\030\002 \002(\005\".\n\034pro"
    "to_cg_starsky_season_noti\022\016\n\006season\030\001 \002("
    "\005\"q\n\021proto_GameStatisc\022\020\n\010cChairID\030\001 \002(\005"
    "\022\022\n\nnCallTimes\030\002 \002(\005\022\022\n\nnLordTimes\030\003 \002(\005"
    "\022\021\n\tnWinTimes\030\004 \002(\005\022\017\n\007nZhanJi\030\005 \002(\003\"\275\001\n"
    "\036proto_gc_two_complete_data_not\022\022\n\nnGame"
    "Money\030\001 \002(\005\022\017\n\007nDouble\030\002 \002(\005\022\r\n\005cLord\030\003 "
    "\002(\005\022\"\n\014vecLordCards\030\004 \003(\0132\014.proto_CCard\022"
    "\"\n\007vecData\030\005 \003(\0132\021.proto_stUserData\022\017\n\007n"
    "LetNum\030\006 \002(\005\022\016\n\006nStart\030\007 \002(\005\"D\n\027proto_gc"
    "_win_doubel_req\022\022\n\nnAddAmount\030\001 \002(\005\022\025\n\rn"
    "AddProbabily\030\002 \002(\005\"4\n\023proto_gc_common_no"
    "t\022\013\n\003nOp\030\001 \002(\005\022\020\n\010cChairID\030\002 \002(\005\"\230\001\n\032pro"
    "to_gc_complete_data_not\022\022\n\nnGameMoney\030\001 "
    "\002(\005\022\017\n\007nDouble\030\002 \002(\005\022\r\n\005cLord\030\003 \002(\005\022\"\n\014v"
    "ecLordCards\030\004 \003(\0132\014.proto_CCard\022\"\n\007vecDa"
    "ta\030\005 \003(\0132\021.proto_stUserData\"\033\n\031proto_sic"
    "_show_result_not\"\036\n\034proto_cg_three_draw_"
    "req_card\")\n\023proto_gc_game_model\022\022\n\ncMode"
    "lType\030\001 \002(\005\"K\n\037proto_gc_magic_emoji_conf"
    "ig_not\022(\n\014emojiConfigs\030\001 \003(\0132\022.proto_emo"
    "jiConfig\"\221\001\n\021proto_emojiConfig\022\023\n\013cEmoji"
    "Index\030\001 \002(\005\022\021\n\tcCostType\030\002 \002(\005\022\022\n\ncCostV"
    "alue\030\003 \002(\005\022\025\n\rnTenItemIndex\030\004 \002(\005\022\023\n\013nTe"
    "nItemNum\030\005 \002(\005\022\024\n\014nTenEmojiNum\030\006 \002(\005\"X\n\026"
    "proto_gc_show_card_req\022\021\n\tnSerialID\030\001 \002("
    "\005\022\025\n\rnShowCardType\030\002 \002(\005\022\024\n\014nShowCardBet"
    "\030\003 \002(\005\"Z\n\037proto_gc_extra_double_score_no"
    "t\022\017\n\007nDouble\030\001 \002(\005\022\023\n\013nLordDouble\030\002 \002(\005\022"
    "\021\n\tnSerialID\030\003 \002(\005\"-\n\036proto_cg_enable_in"
    "vincible_req\022\013\n\003nOp\030\001 \002(\005\"|\n\026proto_magic"
    "_emoji_noti\022\020\n\010cIsError\030\001 \002(\005\022\023\n\013cEmojiI"
    "ndex\030\002 \002(\005\022\024\n\014cFromChairID\030\003 \002(\005\022\022\n\ncToC"
    "hairID\030\004 \002(\005\022\021\n\tcEmojiNum\030\005 \002(\005\"C\n\032proto"
    "_gc_task_complete_not\022\020\n\010chair_id\030\001 \002(\005\022"
    "\023\n\013task_status\030\002 \002(\005\"\207\001\n\025proto_gc_get_ca"
    "rd_ack\022\013\n\003num\030\001 \002(\005\022\037\n\tvecCards0\030\002 \003(\0132\014"
    ".proto_CCard\022\037\n\tvecCards1\030\003 \003(\0132\014.proto_"
    "CCard\022\037\n\tvecCards2\030\004 \003(\0132\014.proto_CCard\"!"
    "\n\037proto_cg_lord_card_lottery_info\"\033\n\031pro"
    "to_mj_completedata_req\"a\n\032proto_gc_two_s"
    "how_card_not\022\020\n\010cChairID\030\001 \002(\005\022\020\n\010nLordP"
    "os\030\002 \002(\005\022\037\n\tcLordCard\030\003 \002(\0132\014.proto_CCar"
    "d\"\272\001\n\034proto_gc_three_draw_ack_data\022\013\n\003re"
    "t\030\001 \002(\005\022*\n\016vecMoneyDiZhus\030\002 \003(\0132\022.proto_"
    "Money_DiZhu\022&\n\014vecKindRates\030\003 \003(\0132\020.prot"
    "o_Kind_Rate\022\023\n\013nBaoDiMoney\030\004 \002(\005\022\022\n\nnBao"
    "DiRate\030\005 \002(\005\022\020\n\010fMinRate\030\006 \002(\002\"G\n\023proto_"
    "stUserResult1\022\020\n\010nChairID\030\001 \002(\005\022\016\n\006nScor"
    "e\030\002 \002(\005\022\016\n\006nJifen\030\003 \002(\005\"3\n\017proto_Kind_Ra"
    "te\022\017\n\007strKind\030\001 \002(\t\022\017\n\007strRate\030\002 \002(\t\"*\n\025"
    "proto_cg_get_card_req\022\021\n\tnSerialID\030\001 \002(\005"
    "\"A\n\037proto_gc_lord_card_lottery_info\022\013\n\003f"
    "ee\030\001 \002(\005\022\021\n\tvecReward\030\002 \003(\005\"=\n\035proto_gc_"
    "get_lord_card_reward\022\r\n\005index\030\001 \002(\005\022\r\n\005m"
    "oney\030\002 \002(\005\"3\n\021proto_Money_DiZhu\022\016\n\006nMone"
    "y\030\001 \002(\003\022\016\n\006nDiZhu\030\002 \002(\003\"\214\001\n\034proto_gc_thr"
    "ee_draw_ack_card\022\013\n\003ret\030\001 \002(\005\022\036\n\010vecCard"
    "s\030\002 \003(\0132\014.proto_CCard\022\020\n\010vecRates\030\003 \003(\002\022"
    "\016\n\006nMoney\030\004 \002(\003\022\016\n\006nDiZhu\030\005 \002(\003\022\r\n\005fRate"
    "\030\006 \002(\002\"C\n\022proto_svr_test_not\022\r\n\005cTest\030\001 "
    "\002(\005\022\r\n\005nTest\030\002 \002(\005\022\017\n\007vecTest\030\003 \003(\005\"I\n(p"
    "roto_gc_get_redpackets_newbie_award_not\022"
    "\014\n\004nRet\030\001 \002(\005\022\017\n\007nAmount\030\002 \002(\005\"K\n\013proto_"
    "CCard\022\020\n\010m_nColor\030\001 \002(\005\022\020\n\010m_nValue\030\002 \002("
    "\005\022\030\n\020m_nCard_Baovalue\030\003 \002(\005\"G\n\026proto_gc_"
    "lord_card_not\022\r\n\005cLord\030\001 \002(\005\022\036\n\010vecCards"
    "\030\002 \003(\0132\014.proto_CCard\")\n\023proto_gc_counts_"
    "not\022\022\n\ncounts_num\030\001 \002(\005\"\206\001\n\036proto_gc_reg"
    "ain_lose_score_ack\022\014\n\004nRet\030\001 \002(\005\022\r\n\005nTim"
    "e\030\002 \002(\005\022\016\n\006nValue\030\003 \003(\005\022\021\n\tnCurCount\030\004 \002"
    "(\005\022\022\n\nnItemIndex\030\005 \002(\005\022\020\n\010nItemNum\030\006 \002(\005"
    "\"\035\n\020proto_cli_my_req\022\t\n\001a\030\001 \002(\005\"c\n\021proto"
    "_sic_bet_ack\022\016\n\006bAllow\030\001 \002(\005\022\017\n\007cCellID\030"
    "\002 \002(\005\022\023\n\013nAmountCell\030\003 \002(\005\022\030\n\020nAmountCel"
    "lTotal\030\004 \002(\005\"R\n\030proto_gc_card_count_ack1"
    "\022\022\n\ncounts_num\030\001 \002(\005\022\"\n\014m_vecPutCard\030\002 \003"
    "(\0132\014.proto_CCard\"\031\n\027proto_sic_bet_clear_"
    "req\"Q\n\020proto_CCardsType\022\023\n\013m_nTypeBomb\030\001"
    " \002(\005\022\022\n\nm_nTypeNum\030\002 \002(\005\022\024\n\014m_nTypeValue"
    "\030\003 \002(\005\"4\n\030proto_sic_bet_update_req\022\030\n\020nB"
    "etUpdateAckTag\030\001 \002(\005\"^\n\027proto_sic_bet_cl"
    "ear_ack\022\030\n\020nBetUpdateAckTag\030\001 \002(\005\022\023\n\013nAm"
    "ountBack\030\002 \002(\005\022\024\n\014nAmountTotal\030\003 \002(\005\"$\n\021"
    "proto_gc_bomb_not\022\017\n\007nDouble\030\001 \002(\005\"\035\n\033pr"
    "oto_cg_look_lord_card_req\"\"\n\021proto_cg_au"
    "to_req\022\r\n\005cAuto\030\001 \002(\005\"\027\n\025proto_sic_histo"
    "ry_req\"4\n\021proto_gc_auto_not\022\020\n\010cChairID\030"
    "\001 \002(\005\022\r\n\005cAuto\030\002 \002(\005\"<\n\027proto_gc_call_sc"
    "ore_req\022\016\n\006nScore\030\001 \002(\005\022\021\n\tnSerialID\030\002 \002"
    "(\005\"<\n\027proto_cg_call_score_ack\022\016\n\006nScore\030"
    "\001 \002(\005\022\021\n\tnSerialID\030\002 \002(\005\"\037\n\035proto_sic_sh"
    "ow_light_cell_not\"\226\001\n(proto_gc_get_redpa"
    "ckets_88yuan_award_ack\022\013\n\003ret\030\001 \002(\005\022\022\n\nc"
    "ur_rounds\030\002 \002(\005\022\024\n\014limit_rounds\030\003 \002(\005\022\017\n"
    "\007nAmount\030\004 \002(\005\022\021\n\tcItemtype\030\005 \002(\005\022\017\n\007tas"
    "k_id\030\006 \002(\005\"\212\001\n\016proto_TaskItem\022\017\n\007task_id"
    "\030\001 \002(\005\022\021\n\ttask_desc\030\002 \002(\t\022\024\n\014task_missio"
    "n\030\003 \002(\t\022\027\n\017task_money_type\030\004 \002(\005\022\022\n\ntask"
    "_money\030\005 \002(\005\022\021\n\ttask_rate\030\006 \002(\005\"<\n\030proto"
    "_gc_clienttimer_not\022\017\n\007chairId\030\001 \002(\005\022\017\n\007"
    "sPeriod\030\002 \002(\005\"\031\n\027proto_cg_card_count_req"
    "\"-\n\032proto_gc_three_draw_notify\022\017\n\007messag"
    "e\030\001 \002(\t\"(\n\022proto_gc_laizi_not\022\022\n\ncard_va"
    "lue\030\001 \002(\005\"S\n\025proto_magic_emoji_req\022\023\n\013cE"
    "mojiIndex\030\001 \002(\005\022\022\n\ncToChairID\030\002 \002(\005\022\021\n\tc"
    "CostType\030\003 \002(\005\">\n\031proto_cg_double_score_"
    "ack\022\016\n\006nScore\030\001 \002(\005\022\021\n\tnSerialID\030\002 \002(\005\"M"
    "\n\027proto_gc_win_doubel_ack\022\014\n\004cRet\030\001 \002(\005\022"
    "$\n\013vecItemInfo\030\002 \003(\0132\017.proto_ItemInfo\"\031\n"
    "\027proto_sic_bet_begin_not\".\n\035proto_cg_get"
    "_lord_card_reward\022\r\n\005index\030\001 \002(\005\"\?\n!prot"
    "o_gc_bet_lord_card_result_ack\022\013\n\003ret\030\001 \002"
    "(\005\022\r\n\005money\030\002 \002(\005\"\035\n\020proto_svr_my_ack\022\t\n"
    "\001b\030\001 \002(\005\"L\n(proto_gc_get_redpackets_newb"
    "ie_award_req\022\017\n\007nAmount\030\001 \002(\005\022\017\n\007cDouble"
    "\030\002 \002(\005\":\n\026proto_gc_play_card_req\022\r\n\005cAut"
    "o\030\001 \002(\005\022\021\n\tnSerialID\030\002 \002(\005\"=\n\037proto_gc_l"
    "ord_card_lottery_base\022\013\n\003ret\030\001 \002(\005\022\r\n\005in"
    "dex\030\002 \002(\005\"]\n\026proto_cg_play_card_ack\022\021\n\tn"
    "SerialID\030\001 \002(\005\022\020\n\010cTimeOut\030\002 \002(\005\022\036\n\010vecC"
    "ards\030\003 \003(\0132\014.proto_CCard\"\032\n\030proto_cg_bei"
    "shu_info_req\"@\n\025proto_gc_rob_lord_req\022\024\n"
    "\014cDefaultLord\030\001 \002(\005\022\021\n\tnSerialID\030\002 \002(\005\"\307"
    "\001\n\025proto_sic_history_ack\022\022\n\nbIsFounder\030\001"
    " \002(\005\022\032\n\022nPlayerMoneyBefore\030\002 \002(\005\022\022\n\nvecH"
    "istory\030\003 \003(\t\022\021\n\tnChipType\030\004 \002(\005\022\024\n\014vecCh"
    "ipValue\030\005 \003(\005\022\022\n\nnAmountMax\030\006 \002(\005\022\032\n\022fNe"
    "xtRoundTimeWait\030\007 \002(\002\022\021\n\tvecPeriod\030\010 \003(\005"
    "\"8\n\025proto_cg_rob_lord_ack\022\014\n\004cRob\030\001 \002(\005\022"
    "\021\n\tnSerialID\030\002 \002(\005\"J\n\026proto_gc_show_card"
    "_not\022\020\n\010nChairID\030\001 \002(\005\022\036\n\010vecCards\030\002 \003(\013"
    "2\014.proto_CCard\"\260\001\n\031proto_sic_result_data"
    "_not\022\017\n\007vecDice\030\001 \003(\005\022\021\n\tnWinMoney\030\002 \002(\005"
    "\022\031\n\021nPlayerMoneyAfter\030\003 \002(\005\022\023\n\013vecWinCel"
    "ls\030\004 \003(\005\022\031\n\021vecPlayerWinCells\030\005 \003(\005\022\023\n\013v"
    "ecHitAward\030\006 \003(\t\022\017\n\007vecRank\030\007 \003(\t\"k\n\026pro"
    "to_cg_show_card_ack\022\021\n\tcShowCard\030\001 \002(\005\022\021"
    "\n\tnSerialID\030\002 \002(\005\022\024\n\014nShowCardBet\030\003 \002(\005\022"
    "\025\n\rnShowCardType\030\004 \002(\005\".\n\031proto_cg_send_"
    "card_ok_ack\022\021\n\tnSerialID\030\001 \002(\005\"\337\001\n\031proto"
    "_gc_game_result_not1\022\r\n\005bType\030\001 \002(\005\022\017\n\007c"
    "Double\030\002 \002(\005\022\022\n\ncCallScore\030\003 \002(\005\022\021\n\tbSho"
    "wCard\030\004 \002(\005\022\022\n\nnBombCount\030\005 \002(\005\022\017\n\007bSpri"
    "ng\030\006 \002(\005\022\026\n\016bReverseSpring\030\007 \002(\005\022\020\n\010bRob"
    "Lord\030\010 \002(\005\022,\n\016vecUserResult1\030\t \003(\0132\024.pro"
    "to_stUserResult1", 9336);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "packet_define.proto", &protobuf_RegisterTypes);
  proto_gc_game_start_not::default_instance_ = new proto_gc_game_start_not();
  proto_gc_counts_not1::default_instance_ = new proto_gc_counts_not1();
  proto_sic_bet_req::default_instance_ = new proto_sic_bet_req();
  proto_gc_task_not::default_instance_ = new proto_gc_task_not();
  proto_gc_two_lord_card_not::default_instance_ = new proto_gc_two_lord_card_not();
  proto_gc_expression_not::default_instance_ = new proto_gc_expression_not();
  proto_cg_get_redpackets_newbie_award_ack::default_instance_ = new proto_cg_get_redpackets_newbie_award_ack();
  proto_gc_beishu_info_ack::default_instance_ = new proto_gc_beishu_info_ack();
  proto_gc_use_card_recode_noti::default_instance_ = new proto_gc_use_card_recode_noti();
  proto_cg_win_doubel_req::default_instance_ = new proto_cg_win_doubel_req();
  proto_gc_card_recode_req::default_instance_ = new proto_gc_card_recode_req();
  proto_gc_two_let_card_not::default_instance_ = new proto_gc_two_let_card_not();
  proto_gc_update_player_tokenmoney_not::default_instance_ = new proto_gc_update_player_tokenmoney_not();
  proto_gc_card_count_ack::default_instance_ = new proto_gc_card_count_ack();
  proto_cg_regain_lose_score_req::default_instance_ = new proto_cg_regain_lose_score_req();
  proto_gc_private_room_result_ack::default_instance_ = new proto_gc_private_room_result_ack();
  proto_gc_enable_invincible_ack::default_instance_ = new proto_gc_enable_invincible_ack();
  proto_cg_bet_lord_card_req::default_instance_ = new proto_cg_bet_lord_card_req();
  proto_gc_look_lord_card_item_ack::default_instance_ = new proto_gc_look_lord_card_item_ack();
  proto_stUserData::default_instance_ = new proto_stUserData();
  proto_gc_double_score_req::default_instance_ = new proto_gc_double_score_req();
  proto_gc_game_result_not::default_instance_ = new proto_gc_game_result_not();
  proto_gc_user_savestar_card_noti::default_instance_ = new proto_gc_user_savestar_card_noti();
  proto_gc_get_redpackets_award_ack::default_instance_ = new proto_gc_get_redpackets_award_ack();
  proto_gc_refresh_card_not::default_instance_ = new proto_gc_refresh_card_not();
  proto_cg_three_draw_req_data::default_instance_ = new proto_cg_three_draw_req_data();
  proto_ItemInfo::default_instance_ = new proto_ItemInfo();
  proto_player_itemInfo::default_instance_ = new proto_player_itemInfo();
  proto_cg_get_redpackets_88yuan_award_req::default_instance_ = new proto_cg_get_redpackets_88yuan_award_req();
  proto_gc_starsky_update_item_noti::default_instance_ = new proto_gc_starsky_update_item_noti();
  proto_cg_look_lord_card_item_req::default_instance_ = new proto_cg_look_lord_card_item_req();
  proto_cg_get_redpackets_award_req::default_instance_ = new proto_cg_get_redpackets_award_req();
  proto_gc_send_dizhu_not::default_instance_ = new proto_gc_send_dizhu_not();
  proto_cg_complete_data_req::default_instance_ = new proto_cg_complete_data_req();
  proto_sic_bet_update_ack::default_instance_ = new proto_sic_bet_update_ack();
  proto_gc_item_add_not::default_instance_ = new proto_gc_item_add_not();
  proto_gc_bet_lord_card_ack::default_instance_ = new proto_gc_bet_lord_card_ack();
  proto_gc_replay_data_not::default_instance_ = new proto_gc_replay_data_not();
  proto_gc_ju_count_not::default_instance_ = new proto_gc_ju_count_not();
  proto_gc_had_start_not::default_instance_ = new proto_gc_had_start_not();
  proto_gc_double_score_not::default_instance_ = new proto_gc_double_score_not();
  proto_sic_new_round_not::default_instance_ = new proto_sic_new_round_not();
  proto_gc_pause_game_not::default_instance_ = new proto_gc_pause_game_not();
  proto_gc_private_room_result_not::default_instance_ = new proto_gc_private_room_result_not();
  proto_st_sic_cell::default_instance_ = new proto_st_sic_cell();
  proto_gc_play_card_not::default_instance_ = new proto_gc_play_card_not();
  proto_gc_item_info_not::default_instance_ = new proto_gc_item_info_not();
  proto_cg_private_room_result_req::default_instance_ = new proto_cg_private_room_result_req();
  proto_stUserResult::default_instance_ = new proto_stUserResult();
  proto_cg_starsky_season_noti::default_instance_ = new proto_cg_starsky_season_noti();
  proto_GameStatisc::default_instance_ = new proto_GameStatisc();
  proto_gc_two_complete_data_not::default_instance_ = new proto_gc_two_complete_data_not();
  proto_gc_win_doubel_req::default_instance_ = new proto_gc_win_doubel_req();
  proto_gc_common_not::default_instance_ = new proto_gc_common_not();
  proto_gc_complete_data_not::default_instance_ = new proto_gc_complete_data_not();
  proto_sic_show_result_not::default_instance_ = new proto_sic_show_result_not();
  proto_cg_three_draw_req_card::default_instance_ = new proto_cg_three_draw_req_card();
  proto_gc_game_model::default_instance_ = new proto_gc_game_model();
  proto_gc_magic_emoji_config_not::default_instance_ = new proto_gc_magic_emoji_config_not();
  proto_emojiConfig::default_instance_ = new proto_emojiConfig();
  proto_gc_show_card_req::default_instance_ = new proto_gc_show_card_req();
  proto_gc_extra_double_score_not::default_instance_ = new proto_gc_extra_double_score_not();
  proto_cg_enable_invincible_req::default_instance_ = new proto_cg_enable_invincible_req();
  proto_magic_emoji_noti::default_instance_ = new proto_magic_emoji_noti();
  proto_gc_task_complete_not::default_instance_ = new proto_gc_task_complete_not();
  proto_gc_get_card_ack::default_instance_ = new proto_gc_get_card_ack();
  proto_cg_lord_card_lottery_info::default_instance_ = new proto_cg_lord_card_lottery_info();
  proto_mj_completedata_req::default_instance_ = new proto_mj_completedata_req();
  proto_gc_two_show_card_not::default_instance_ = new proto_gc_two_show_card_not();
  proto_gc_three_draw_ack_data::default_instance_ = new proto_gc_three_draw_ack_data();
  proto_stUserResult1::default_instance_ = new proto_stUserResult1();
  proto_Kind_Rate::default_instance_ = new proto_Kind_Rate();
  proto_cg_get_card_req::default_instance_ = new proto_cg_get_card_req();
  proto_gc_lord_card_lottery_info::default_instance_ = new proto_gc_lord_card_lottery_info();
  proto_gc_get_lord_card_reward::default_instance_ = new proto_gc_get_lord_card_reward();
  proto_Money_DiZhu::default_instance_ = new proto_Money_DiZhu();
  proto_gc_three_draw_ack_card::default_instance_ = new proto_gc_three_draw_ack_card();
  proto_svr_test_not::default_instance_ = new proto_svr_test_not();
  proto_gc_get_redpackets_newbie_award_not::default_instance_ = new proto_gc_get_redpackets_newbie_award_not();
  proto_CCard::default_instance_ = new proto_CCard();
  proto_gc_lord_card_not::default_instance_ = new proto_gc_lord_card_not();
  proto_gc_counts_not::default_instance_ = new proto_gc_counts_not();
  proto_gc_regain_lose_score_ack::default_instance_ = new proto_gc_regain_lose_score_ack();
  proto_cli_my_req::default_instance_ = new proto_cli_my_req();
  proto_sic_bet_ack::default_instance_ = new proto_sic_bet_ack();
  proto_gc_card_count_ack1::default_instance_ = new proto_gc_card_count_ack1();
  proto_sic_bet_clear_req::default_instance_ = new proto_sic_bet_clear_req();
  proto_CCardsType::default_instance_ = new proto_CCardsType();
  proto_sic_bet_update_req::default_instance_ = new proto_sic_bet_update_req();
  proto_sic_bet_clear_ack::default_instance_ = new proto_sic_bet_clear_ack();
  proto_gc_bomb_not::default_instance_ = new proto_gc_bomb_not();
  proto_cg_look_lord_card_req::default_instance_ = new proto_cg_look_lord_card_req();
  proto_cg_auto_req::default_instance_ = new proto_cg_auto_req();
  proto_sic_history_req::default_instance_ = new proto_sic_history_req();
  proto_gc_auto_not::default_instance_ = new proto_gc_auto_not();
  proto_gc_call_score_req::default_instance_ = new proto_gc_call_score_req();
  proto_cg_call_score_ack::default_instance_ = new proto_cg_call_score_ack();
  proto_sic_show_light_cell_not::default_instance_ = new proto_sic_show_light_cell_not();
  proto_gc_get_redpackets_88yuan_award_ack::default_instance_ = new proto_gc_get_redpackets_88yuan_award_ack();
  proto_TaskItem::default_instance_ = new proto_TaskItem();
  proto_gc_clienttimer_not::default_instance_ = new proto_gc_clienttimer_not();
  proto_cg_card_count_req::default_instance_ = new proto_cg_card_count_req();
  proto_gc_three_draw_notify::default_instance_ = new proto_gc_three_draw_notify();
  proto_gc_laizi_not::default_instance_ = new proto_gc_laizi_not();
  proto_magic_emoji_req::default_instance_ = new proto_magic_emoji_req();
  proto_cg_double_score_ack::default_instance_ = new proto_cg_double_score_ack();
  proto_gc_win_doubel_ack::default_instance_ = new proto_gc_win_doubel_ack();
  proto_sic_bet_begin_not::default_instance_ = new proto_sic_bet_begin_not();
  proto_cg_get_lord_card_reward::default_instance_ = new proto_cg_get_lord_card_reward();
  proto_gc_bet_lord_card_result_ack::default_instance_ = new proto_gc_bet_lord_card_result_ack();
  proto_svr_my_ack::default_instance_ = new proto_svr_my_ack();
  proto_gc_get_redpackets_newbie_award_req::default_instance_ = new proto_gc_get_redpackets_newbie_award_req();
  proto_gc_play_card_req::default_instance_ = new proto_gc_play_card_req();
  proto_gc_lord_card_lottery_base::default_instance_ = new proto_gc_lord_card_lottery_base();
  proto_cg_play_card_ack::default_instance_ = new proto_cg_play_card_ack();
  proto_cg_beishu_info_req::default_instance_ = new proto_cg_beishu_info_req();
  proto_gc_rob_lord_req::default_instance_ = new proto_gc_rob_lord_req();
  proto_sic_history_ack::default_instance_ = new proto_sic_history_ack();
  proto_cg_rob_lord_ack::default_instance_ = new proto_cg_rob_lord_ack();
  proto_gc_show_card_not::default_instance_ = new proto_gc_show_card_not();
  proto_sic_result_data_not::default_instance_ = new proto_sic_result_data_not();
  proto_cg_show_card_ack::default_instance_ = new proto_cg_show_card_ack();
  proto_cg_send_card_ok_ack::default_instance_ = new proto_cg_send_card_ok_ack();
  proto_gc_game_result_not1::default_instance_ = new proto_gc_game_result_not1();
  proto_gc_game_start_not::default_instance_->InitAsDefaultInstance();
  proto_gc_counts_not1::default_instance_->InitAsDefaultInstance();
  proto_sic_bet_req::default_instance_->InitAsDefaultInstance();
  proto_gc_task_not::default_instance_->InitAsDefaultInstance();
  proto_gc_two_lord_card_not::default_instance_->InitAsDefaultInstance();
  proto_gc_expression_not::default_instance_->InitAsDefaultInstance();
  proto_cg_get_redpackets_newbie_award_ack::default_instance_->InitAsDefaultInstance();
  proto_gc_beishu_info_ack::default_instance_->InitAsDefaultInstance();
  proto_gc_use_card_recode_noti::default_instance_->InitAsDefaultInstance();
  proto_cg_win_doubel_req::default_instance_->InitAsDefaultInstance();
  proto_gc_card_recode_req::default_instance_->InitAsDefaultInstance();
  proto_gc_two_let_card_not::default_instance_->InitAsDefaultInstance();
  proto_gc_update_player_tokenmoney_not::default_instance_->InitAsDefaultInstance();
  proto_gc_card_count_ack::default_instance_->InitAsDefaultInstance();
  proto_cg_regain_lose_score_req::default_instance_->InitAsDefaultInstance();
  proto_gc_private_room_result_ack::default_instance_->InitAsDefaultInstance();
  proto_gc_enable_invincible_ack::default_instance_->InitAsDefaultInstance();
  proto_cg_bet_lord_card_req::default_instance_->InitAsDefaultInstance();
  proto_gc_look_lord_card_item_ack::default_instance_->InitAsDefaultInstance();
  proto_stUserData::default_instance_->InitAsDefaultInstance();
  proto_gc_double_score_req::default_instance_->InitAsDefaultInstance();
  proto_gc_game_result_not::default_instance_->InitAsDefaultInstance();
  proto_gc_user_savestar_card_noti::default_instance_->InitAsDefaultInstance();
  proto_gc_get_redpackets_award_ack::default_instance_->InitAsDefaultInstance();
  proto_gc_refresh_card_not::default_instance_->InitAsDefaultInstance();
  proto_cg_three_draw_req_data::default_instance_->InitAsDefaultInstance();
  proto_ItemInfo::default_instance_->InitAsDefaultInstance();
  proto_player_itemInfo::default_instance_->InitAsDefaultInstance();
  proto_cg_get_redpackets_88yuan_award_req::default_instance_->InitAsDefaultInstance();
  proto_gc_starsky_update_item_noti::default_instance_->InitAsDefaultInstance();
  proto_cg_look_lord_card_item_req::default_instance_->InitAsDefaultInstance();
  proto_cg_get_redpackets_award_req::default_instance_->InitAsDefaultInstance();
  proto_gc_send_dizhu_not::default_instance_->InitAsDefaultInstance();
  proto_cg_complete_data_req::default_instance_->InitAsDefaultInstance();
  proto_sic_bet_update_ack::default_instance_->InitAsDefaultInstance();
  proto_gc_item_add_not::default_instance_->InitAsDefaultInstance();
  proto_gc_bet_lord_card_ack::default_instance_->InitAsDefaultInstance();
  proto_gc_replay_data_not::default_instance_->InitAsDefaultInstance();
  proto_gc_ju_count_not::default_instance_->InitAsDefaultInstance();
  proto_gc_had_start_not::default_instance_->InitAsDefaultInstance();
  proto_gc_double_score_not::default_instance_->InitAsDefaultInstance();
  proto_sic_new_round_not::default_instance_->InitAsDefaultInstance();
  proto_gc_pause_game_not::default_instance_->InitAsDefaultInstance();
  proto_gc_private_room_result_not::default_instance_->InitAsDefaultInstance();
  proto_st_sic_cell::default_instance_->InitAsDefaultInstance();
  proto_gc_play_card_not::default_instance_->InitAsDefaultInstance();
  proto_gc_item_info_not::default_instance_->InitAsDefaultInstance();
  proto_cg_private_room_result_req::default_instance_->InitAsDefaultInstance();
  proto_stUserResult::default_instance_->InitAsDefaultInstance();
  proto_cg_starsky_season_noti::default_instance_->InitAsDefaultInstance();
  proto_GameStatisc::default_instance_->InitAsDefaultInstance();
  proto_gc_two_complete_data_not::default_instance_->InitAsDefaultInstance();
  proto_gc_win_doubel_req::default_instance_->InitAsDefaultInstance();
  proto_gc_common_not::default_instance_->InitAsDefaultInstance();
  proto_gc_complete_data_not::default_instance_->InitAsDefaultInstance();
  proto_sic_show_result_not::default_instance_->InitAsDefaultInstance();
  proto_cg_three_draw_req_card::default_instance_->InitAsDefaultInstance();
  proto_gc_game_model::default_instance_->InitAsDefaultInstance();
  proto_gc_magic_emoji_config_not::default_instance_->InitAsDefaultInstance();
  proto_emojiConfig::default_instance_->InitAsDefaultInstance();
  proto_gc_show_card_req::default_instance_->InitAsDefaultInstance();
  proto_gc_extra_double_score_not::default_instance_->InitAsDefaultInstance();
  proto_cg_enable_invincible_req::default_instance_->InitAsDefaultInstance();
  proto_magic_emoji_noti::default_instance_->InitAsDefaultInstance();
  proto_gc_task_complete_not::default_instance_->InitAsDefaultInstance();
  proto_gc_get_card_ack::default_instance_->InitAsDefaultInstance();
  proto_cg_lord_card_lottery_info::default_instance_->InitAsDefaultInstance();
  proto_mj_completedata_req::default_instance_->InitAsDefaultInstance();
  proto_gc_two_show_card_not::default_instance_->InitAsDefaultInstance();
  proto_gc_three_draw_ack_data::default_instance_->InitAsDefaultInstance();
  proto_stUserResult1::default_instance_->InitAsDefaultInstance();
  proto_Kind_Rate::default_instance_->InitAsDefaultInstance();
  proto_cg_get_card_req::default_instance_->InitAsDefaultInstance();
  proto_gc_lord_card_lottery_info::default_instance_->InitAsDefaultInstance();
  proto_gc_get_lord_card_reward::default_instance_->InitAsDefaultInstance();
  proto_Money_DiZhu::default_instance_->InitAsDefaultInstance();
  proto_gc_three_draw_ack_card::default_instance_->InitAsDefaultInstance();
  proto_svr_test_not::default_instance_->InitAsDefaultInstance();
  proto_gc_get_redpackets_newbie_award_not::default_instance_->InitAsDefaultInstance();
  proto_CCard::default_instance_->InitAsDefaultInstance();
  proto_gc_lord_card_not::default_instance_->InitAsDefaultInstance();
  proto_gc_counts_not::default_instance_->InitAsDefaultInstance();
  proto_gc_regain_lose_score_ack::default_instance_->InitAsDefaultInstance();
  proto_cli_my_req::default_instance_->InitAsDefaultInstance();
  proto_sic_bet_ack::default_instance_->InitAsDefaultInstance();
  proto_gc_card_count_ack1::default_instance_->InitAsDefaultInstance();
  proto_sic_bet_clear_req::default_instance_->InitAsDefaultInstance();
  proto_CCardsType::default_instance_->InitAsDefaultInstance();
  proto_sic_bet_update_req::default_instance_->InitAsDefaultInstance();
  proto_sic_bet_clear_ack::default_instance_->InitAsDefaultInstance();
  proto_gc_bomb_not::default_instance_->InitAsDefaultInstance();
  proto_cg_look_lord_card_req::default_instance_->InitAsDefaultInstance();
  proto_cg_auto_req::default_instance_->InitAsDefaultInstance();
  proto_sic_history_req::default_instance_->InitAsDefaultInstance();
  proto_gc_auto_not::default_instance_->InitAsDefaultInstance();
  proto_gc_call_score_req::default_instance_->InitAsDefaultInstance();
  proto_cg_call_score_ack::default_instance_->InitAsDefaultInstance();
  proto_sic_show_light_cell_not::default_instance_->InitAsDefaultInstance();
  proto_gc_get_redpackets_88yuan_award_ack::default_instance_->InitAsDefaultInstance();
  proto_TaskItem::default_instance_->InitAsDefaultInstance();
  proto_gc_clienttimer_not::default_instance_->InitAsDefaultInstance();
  proto_cg_card_count_req::default_instance_->InitAsDefaultInstance();
  proto_gc_three_draw_notify::default_instance_->InitAsDefaultInstance();
  proto_gc_laizi_not::default_instance_->InitAsDefaultInstance();
  proto_magic_emoji_req::default_instance_->InitAsDefaultInstance();
  proto_cg_double_score_ack::default_instance_->InitAsDefaultInstance();
  proto_gc_win_doubel_ack::default_instance_->InitAsDefaultInstance();
  proto_sic_bet_begin_not::default_instance_->InitAsDefaultInstance();
  proto_cg_get_lord_card_reward::default_instance_->InitAsDefaultInstance();
  proto_gc_bet_lord_card_result_ack::default_instance_->InitAsDefaultInstance();
  proto_svr_my_ack::default_instance_->InitAsDefaultInstance();
  proto_gc_get_redpackets_newbie_award_req::default_instance_->InitAsDefaultInstance();
  proto_gc_play_card_req::default_instance_->InitAsDefaultInstance();
  proto_gc_lord_card_lottery_base::default_instance_->InitAsDefaultInstance();
  proto_cg_play_card_ack::default_instance_->InitAsDefaultInstance();
  proto_cg_beishu_info_req::default_instance_->InitAsDefaultInstance();
  proto_gc_rob_lord_req::default_instance_->InitAsDefaultInstance();
  proto_sic_history_ack::default_instance_->InitAsDefaultInstance();
  proto_cg_rob_lord_ack::default_instance_->InitAsDefaultInstance();
  proto_gc_show_card_not::default_instance_->InitAsDefaultInstance();
  proto_sic_result_data_not::default_instance_->InitAsDefaultInstance();
  proto_cg_show_card_ack::default_instance_->InitAsDefaultInstance();
  proto_cg_send_card_ok_ack::default_instance_->InitAsDefaultInstance();
  proto_gc_game_result_not1::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_packet_5fdefine_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_packet_5fdefine_2eproto {
  StaticDescriptorInitializer_packet_5fdefine_2eproto() {
    protobuf_AddDesc_packet_5fdefine_2eproto();
  }
} static_descriptor_initializer_packet_5fdefine_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int proto_gc_game_start_not::kNGameMoneyFieldNumber;
const int proto_gc_game_start_not::kNCardNumFieldNumber;
const int proto_gc_game_start_not::kNLordPosFieldNumber;
const int proto_gc_game_start_not::kCLordCardFieldNumber;
const int proto_gc_game_start_not::kNSerialIDFieldNumber;
#endif  // !_MSC_VER

proto_gc_game_start_not::proto_gc_game_start_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_game_start_not::InitAsDefaultInstance() {
  clordcard_ = const_cast< ::proto_CCard*>(&::proto_CCard::default_instance());
}

proto_gc_game_start_not::proto_gc_game_start_not(const proto_gc_game_start_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_game_start_not::SharedCtor() {
  _cached_size_ = 0;
  ngamemoney_ = 0;
  ncardnum_ = 0;
  nlordpos_ = 0;
  clordcard_ = NULL;
  nserialid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_game_start_not::~proto_gc_game_start_not() {
  SharedDtor();
}

void proto_gc_game_start_not::SharedDtor() {
  if (this != default_instance_) {
    delete clordcard_;
  }
}

void proto_gc_game_start_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_game_start_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_game_start_not_descriptor_;
}

const proto_gc_game_start_not& proto_gc_game_start_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_game_start_not* proto_gc_game_start_not::default_instance_ = NULL;

proto_gc_game_start_not* proto_gc_game_start_not::New() const {
  return new proto_gc_game_start_not;
}

void proto_gc_game_start_not::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ngamemoney_ = 0;
    ncardnum_ = 0;
    nlordpos_ = 0;
    if (has_clordcard()) {
      if (clordcard_ != NULL) clordcard_->::proto_CCard::Clear();
    }
    nserialid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_game_start_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nGameMoney = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ngamemoney_)));
          set_has_ngamemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nCardNum;
        break;
      }

      // required int32 nCardNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCardNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncardnum_)));
          set_has_ncardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nLordPos;
        break;
      }

      // required int32 nLordPos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nLordPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nlordpos_)));
          set_has_nlordpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cLordCard;
        break;
      }

      // required .proto_CCard cLordCard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cLordCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clordcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nSerialID;
        break;
      }

      // required int32 nSerialID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nSerialID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nserialid_)));
          set_has_nserialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_game_start_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nGameMoney = 1;
  if (has_ngamemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ngamemoney(), output);
  }

  // required int32 nCardNum = 2;
  if (has_ncardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ncardnum(), output);
  }

  // required int32 nLordPos = 3;
  if (has_nlordpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nlordpos(), output);
  }

  // required .proto_CCard cLordCard = 4;
  if (has_clordcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->clordcard(), output);
  }

  // required int32 nSerialID = 5;
  if (has_nserialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nserialid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_game_start_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nGameMoney = 1;
  if (has_ngamemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ngamemoney(), target);
  }

  // required int32 nCardNum = 2;
  if (has_ncardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ncardnum(), target);
  }

  // required int32 nLordPos = 3;
  if (has_nlordpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nlordpos(), target);
  }

  // required .proto_CCard cLordCard = 4;
  if (has_clordcard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->clordcard(), target);
  }

  // required int32 nSerialID = 5;
  if (has_nserialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nserialid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_game_start_not::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nGameMoney = 1;
    if (has_ngamemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ngamemoney());
    }

    // required int32 nCardNum = 2;
    if (has_ncardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncardnum());
    }

    // required int32 nLordPos = 3;
    if (has_nlordpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nlordpos());
    }

    // required .proto_CCard cLordCard = 4;
    if (has_clordcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clordcard());
    }

    // required int32 nSerialID = 5;
    if (has_nserialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nserialid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_game_start_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_game_start_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_game_start_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_game_start_not::MergeFrom(const proto_gc_game_start_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ngamemoney()) {
      set_ngamemoney(from.ngamemoney());
    }
    if (from.has_ncardnum()) {
      set_ncardnum(from.ncardnum());
    }
    if (from.has_nlordpos()) {
      set_nlordpos(from.nlordpos());
    }
    if (from.has_clordcard()) {
      mutable_clordcard()->::proto_CCard::MergeFrom(from.clordcard());
    }
    if (from.has_nserialid()) {
      set_nserialid(from.nserialid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_game_start_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_game_start_not::CopyFrom(const proto_gc_game_start_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_game_start_not::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_clordcard()) {
    if (!this->clordcard().IsInitialized()) return false;
  }
  return true;
}

void proto_gc_game_start_not::Swap(proto_gc_game_start_not* other) {
  if (other != this) {
    std::swap(ngamemoney_, other->ngamemoney_);
    std::swap(ncardnum_, other->ncardnum_);
    std::swap(nlordpos_, other->nlordpos_);
    std::swap(clordcard_, other->clordcard_);
    std::swap(nserialid_, other->nserialid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_game_start_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_game_start_not_descriptor_;
  metadata.reflection = proto_gc_game_start_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_counts_not1::kCountsNumFieldNumber;
#endif  // !_MSC_VER

proto_gc_counts_not1::proto_gc_counts_not1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_counts_not1::InitAsDefaultInstance() {
}

proto_gc_counts_not1::proto_gc_counts_not1(const proto_gc_counts_not1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_counts_not1::SharedCtor() {
  _cached_size_ = 0;
  counts_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_counts_not1::~proto_gc_counts_not1() {
  SharedDtor();
}

void proto_gc_counts_not1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_counts_not1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_counts_not1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_counts_not1_descriptor_;
}

const proto_gc_counts_not1& proto_gc_counts_not1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_counts_not1* proto_gc_counts_not1::default_instance_ = NULL;

proto_gc_counts_not1* proto_gc_counts_not1::New() const {
  return new proto_gc_counts_not1;
}

void proto_gc_counts_not1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    counts_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_counts_not1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 counts_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &counts_num_)));
          set_has_counts_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_counts_not1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 counts_num = 1;
  if (has_counts_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->counts_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_counts_not1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 counts_num = 1;
  if (has_counts_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->counts_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_counts_not1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 counts_num = 1;
    if (has_counts_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->counts_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_counts_not1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_counts_not1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_counts_not1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_counts_not1::MergeFrom(const proto_gc_counts_not1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_counts_num()) {
      set_counts_num(from.counts_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_counts_not1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_counts_not1::CopyFrom(const proto_gc_counts_not1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_counts_not1::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void proto_gc_counts_not1::Swap(proto_gc_counts_not1* other) {
  if (other != this) {
    std::swap(counts_num_, other->counts_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_counts_not1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_counts_not1_descriptor_;
  metadata.reflection = proto_gc_counts_not1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_sic_bet_req::kCCellIDFieldNumber;
const int proto_sic_bet_req::kNAmountFieldNumber;
#endif  // !_MSC_VER

proto_sic_bet_req::proto_sic_bet_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_sic_bet_req::InitAsDefaultInstance() {
}

proto_sic_bet_req::proto_sic_bet_req(const proto_sic_bet_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_sic_bet_req::SharedCtor() {
  _cached_size_ = 0;
  ccellid_ = 0;
  namount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_sic_bet_req::~proto_sic_bet_req() {
  SharedDtor();
}

void proto_sic_bet_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_sic_bet_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_sic_bet_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_sic_bet_req_descriptor_;
}

const proto_sic_bet_req& proto_sic_bet_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_sic_bet_req* proto_sic_bet_req::default_instance_ = NULL;

proto_sic_bet_req* proto_sic_bet_req::New() const {
  return new proto_sic_bet_req;
}

void proto_sic_bet_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ccellid_ = 0;
    namount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_sic_bet_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cCellID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ccellid_)));
          set_has_ccellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nAmount;
        break;
      }

      // required int32 nAmount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &namount_)));
          set_has_namount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_sic_bet_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cCellID = 1;
  if (has_ccellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ccellid(), output);
  }

  // required int32 nAmount = 2;
  if (has_namount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->namount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_sic_bet_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cCellID = 1;
  if (has_ccellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ccellid(), target);
  }

  // required int32 nAmount = 2;
  if (has_namount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->namount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_sic_bet_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cCellID = 1;
    if (has_ccellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ccellid());
    }

    // required int32 nAmount = 2;
    if (has_namount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->namount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_sic_bet_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_sic_bet_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_sic_bet_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_sic_bet_req::MergeFrom(const proto_sic_bet_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ccellid()) {
      set_ccellid(from.ccellid());
    }
    if (from.has_namount()) {
      set_namount(from.namount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_sic_bet_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_sic_bet_req::CopyFrom(const proto_sic_bet_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_sic_bet_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void proto_sic_bet_req::Swap(proto_sic_bet_req* other) {
  if (other != this) {
    std::swap(ccellid_, other->ccellid_);
    std::swap(namount_, other->namount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_sic_bet_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_sic_bet_req_descriptor_;
  metadata.reflection = proto_sic_bet_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_task_not::kTaskItemFieldNumber;
#endif  // !_MSC_VER

proto_gc_task_not::proto_gc_task_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_task_not::InitAsDefaultInstance() {
  task_item_ = const_cast< ::proto_TaskItem*>(&::proto_TaskItem::default_instance());
}

proto_gc_task_not::proto_gc_task_not(const proto_gc_task_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_task_not::SharedCtor() {
  _cached_size_ = 0;
  task_item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_task_not::~proto_gc_task_not() {
  SharedDtor();
}

void proto_gc_task_not::SharedDtor() {
  if (this != default_instance_) {
    delete task_item_;
  }
}

void proto_gc_task_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_task_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_task_not_descriptor_;
}

const proto_gc_task_not& proto_gc_task_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_task_not* proto_gc_task_not::default_instance_ = NULL;

proto_gc_task_not* proto_gc_task_not::New() const {
  return new proto_gc_task_not;
}

void proto_gc_task_not::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_task_item()) {
      if (task_item_ != NULL) task_item_->::proto_TaskItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_task_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto_TaskItem task_item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_task_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto_TaskItem task_item = 1;
  if (has_task_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task_item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_task_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto_TaskItem task_item = 1;
  if (has_task_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task_item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_task_not::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto_TaskItem task_item = 1;
    if (has_task_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task_item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_task_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_task_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_task_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_task_not::MergeFrom(const proto_gc_task_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_item()) {
      mutable_task_item()->::proto_TaskItem::MergeFrom(from.task_item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_task_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_task_not::CopyFrom(const proto_gc_task_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_task_not::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_task_item()) {
    if (!this->task_item().IsInitialized()) return false;
  }
  return true;
}

void proto_gc_task_not::Swap(proto_gc_task_not* other) {
  if (other != this) {
    std::swap(task_item_, other->task_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_task_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_task_not_descriptor_;
  metadata.reflection = proto_gc_task_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_two_lord_card_not::kCLordFieldNumber;
const int proto_gc_two_lord_card_not::kVecCardsFieldNumber;
const int proto_gc_two_lord_card_not::kNLetNumFieldNumber;
const int proto_gc_two_lord_card_not::kNLordLetNumFieldNumber;
#endif  // !_MSC_VER

proto_gc_two_lord_card_not::proto_gc_two_lord_card_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_two_lord_card_not::InitAsDefaultInstance() {
}

proto_gc_two_lord_card_not::proto_gc_two_lord_card_not(const proto_gc_two_lord_card_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_two_lord_card_not::SharedCtor() {
  _cached_size_ = 0;
  clord_ = 0;
  nletnum_ = 0;
  nlordletnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_two_lord_card_not::~proto_gc_two_lord_card_not() {
  SharedDtor();
}

void proto_gc_two_lord_card_not::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_two_lord_card_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_two_lord_card_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_two_lord_card_not_descriptor_;
}

const proto_gc_two_lord_card_not& proto_gc_two_lord_card_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_two_lord_card_not* proto_gc_two_lord_card_not::default_instance_ = NULL;

proto_gc_two_lord_card_not* proto_gc_two_lord_card_not::New() const {
  return new proto_gc_two_lord_card_not;
}

void proto_gc_two_lord_card_not::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clord_ = 0;
    nletnum_ = 0;
    nlordletnum_ = 0;
  }
  veccards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_two_lord_card_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cLord = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clord_)));
          set_has_clord();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vecCards;
        break;
      }

      // repeated .proto_CCard vecCards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_veccards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vecCards;
        if (input->ExpectTag(24)) goto parse_nLetNum;
        break;
      }

      // required int32 nLetNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nLetNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nletnum_)));
          set_has_nletnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nLordLetNum;
        break;
      }

      // required int32 nLordLetNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nLordLetNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nlordletnum_)));
          set_has_nlordletnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_two_lord_card_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cLord = 1;
  if (has_clord()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clord(), output);
  }

  // repeated .proto_CCard vecCards = 2;
  for (int i = 0; i < this->veccards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->veccards(i), output);
  }

  // required int32 nLetNum = 3;
  if (has_nletnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nletnum(), output);
  }

  // required int32 nLordLetNum = 4;
  if (has_nlordletnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nlordletnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_two_lord_card_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cLord = 1;
  if (has_clord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clord(), target);
  }

  // repeated .proto_CCard vecCards = 2;
  for (int i = 0; i < this->veccards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->veccards(i), target);
  }

  // required int32 nLetNum = 3;
  if (has_nletnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nletnum(), target);
  }

  // required int32 nLordLetNum = 4;
  if (has_nlordletnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nlordletnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_two_lord_card_not::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cLord = 1;
    if (has_clord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clord());
    }

    // required int32 nLetNum = 3;
    if (has_nletnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nletnum());
    }

    // required int32 nLordLetNum = 4;
    if (has_nlordletnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nlordletnum());
    }

  }
  // repeated .proto_CCard vecCards = 2;
  total_size += 1 * this->veccards_size();
  for (int i = 0; i < this->veccards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->veccards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_two_lord_card_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_two_lord_card_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_two_lord_card_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_two_lord_card_not::MergeFrom(const proto_gc_two_lord_card_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  veccards_.MergeFrom(from.veccards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clord()) {
      set_clord(from.clord());
    }
    if (from.has_nletnum()) {
      set_nletnum(from.nletnum());
    }
    if (from.has_nlordletnum()) {
      set_nlordletnum(from.nlordletnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_two_lord_card_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_two_lord_card_not::CopyFrom(const proto_gc_two_lord_card_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_two_lord_card_not::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  for (int i = 0; i < veccards_size(); i++) {
    if (!this->veccards(i).IsInitialized()) return false;
  }
  return true;
}

void proto_gc_two_lord_card_not::Swap(proto_gc_two_lord_card_not* other) {
  if (other != this) {
    std::swap(clord_, other->clord_);
    veccards_.Swap(&other->veccards_);
    std::swap(nletnum_, other->nletnum_);
    std::swap(nlordletnum_, other->nlordletnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_two_lord_card_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_two_lord_card_not_descriptor_;
  metadata.reflection = proto_gc_two_lord_card_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_expression_not::kExpressionTypeFieldNumber;
const int proto_gc_expression_not::kExpressionNumFieldNumber;
#endif  // !_MSC_VER

proto_gc_expression_not::proto_gc_expression_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_expression_not::InitAsDefaultInstance() {
}

proto_gc_expression_not::proto_gc_expression_not(const proto_gc_expression_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_expression_not::SharedCtor() {
  _cached_size_ = 0;
  expression_type_ = 0;
  expression_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_expression_not::~proto_gc_expression_not() {
  SharedDtor();
}

void proto_gc_expression_not::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_expression_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_expression_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_expression_not_descriptor_;
}

const proto_gc_expression_not& proto_gc_expression_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_expression_not* proto_gc_expression_not::default_instance_ = NULL;

proto_gc_expression_not* proto_gc_expression_not::New() const {
  return new proto_gc_expression_not;
}

void proto_gc_expression_not::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    expression_type_ = 0;
    expression_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_expression_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 expression_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expression_type_)));
          set_has_expression_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expression_num;
        break;
      }

      // required int32 expression_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expression_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expression_num_)));
          set_has_expression_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_expression_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 expression_type = 1;
  if (has_expression_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->expression_type(), output);
  }

  // required int32 expression_num = 2;
  if (has_expression_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->expression_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_expression_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 expression_type = 1;
  if (has_expression_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->expression_type(), target);
  }

  // required int32 expression_num = 2;
  if (has_expression_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->expression_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_expression_not::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 expression_type = 1;
    if (has_expression_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expression_type());
    }

    // required int32 expression_num = 2;
    if (has_expression_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expression_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_expression_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_expression_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_expression_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_expression_not::MergeFrom(const proto_gc_expression_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expression_type()) {
      set_expression_type(from.expression_type());
    }
    if (from.has_expression_num()) {
      set_expression_num(from.expression_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_expression_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_expression_not::CopyFrom(const proto_gc_expression_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_expression_not::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void proto_gc_expression_not::Swap(proto_gc_expression_not* other) {
  if (other != this) {
    std::swap(expression_type_, other->expression_type_);
    std::swap(expression_num_, other->expression_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_expression_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_expression_not_descriptor_;
  metadata.reflection = proto_gc_expression_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_cg_get_redpackets_newbie_award_ack::kCDoubleFieldNumber;
#endif  // !_MSC_VER

proto_cg_get_redpackets_newbie_award_ack::proto_cg_get_redpackets_newbie_award_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_cg_get_redpackets_newbie_award_ack::InitAsDefaultInstance() {
}

proto_cg_get_redpackets_newbie_award_ack::proto_cg_get_redpackets_newbie_award_ack(const proto_cg_get_redpackets_newbie_award_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_cg_get_redpackets_newbie_award_ack::SharedCtor() {
  _cached_size_ = 0;
  cdouble_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_cg_get_redpackets_newbie_award_ack::~proto_cg_get_redpackets_newbie_award_ack() {
  SharedDtor();
}

void proto_cg_get_redpackets_newbie_award_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_cg_get_redpackets_newbie_award_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_cg_get_redpackets_newbie_award_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_cg_get_redpackets_newbie_award_ack_descriptor_;
}

const proto_cg_get_redpackets_newbie_award_ack& proto_cg_get_redpackets_newbie_award_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_cg_get_redpackets_newbie_award_ack* proto_cg_get_redpackets_newbie_award_ack::default_instance_ = NULL;

proto_cg_get_redpackets_newbie_award_ack* proto_cg_get_redpackets_newbie_award_ack::New() const {
  return new proto_cg_get_redpackets_newbie_award_ack;
}

void proto_cg_get_redpackets_newbie_award_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cdouble_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_cg_get_redpackets_newbie_award_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cDouble = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cdouble_)));
          set_has_cdouble();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_cg_get_redpackets_newbie_award_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cDouble = 1;
  if (has_cdouble()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cdouble(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_cg_get_redpackets_newbie_award_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cDouble = 1;
  if (has_cdouble()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cdouble(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_cg_get_redpackets_newbie_award_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cDouble = 1;
    if (has_cdouble()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cdouble());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_cg_get_redpackets_newbie_award_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_cg_get_redpackets_newbie_award_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_cg_get_redpackets_newbie_award_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_cg_get_redpackets_newbie_award_ack::MergeFrom(const proto_cg_get_redpackets_newbie_award_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cdouble()) {
      set_cdouble(from.cdouble());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_cg_get_redpackets_newbie_award_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_cg_get_redpackets_newbie_award_ack::CopyFrom(const proto_cg_get_redpackets_newbie_award_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_cg_get_redpackets_newbie_award_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void proto_cg_get_redpackets_newbie_award_ack::Swap(proto_cg_get_redpackets_newbie_award_ack* other) {
  if (other != this) {
    std::swap(cdouble_, other->cdouble_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_cg_get_redpackets_newbie_award_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_cg_get_redpackets_newbie_award_ack_descriptor_;
  metadata.reflection = proto_cg_get_redpackets_newbie_award_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_beishu_info_ack::kVecBeiShuInfoFieldNumber;
const int proto_gc_beishu_info_ack::kVecPlayerBeiShuFieldNumber;
#endif  // !_MSC_VER

proto_gc_beishu_info_ack::proto_gc_beishu_info_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_beishu_info_ack::InitAsDefaultInstance() {
}

proto_gc_beishu_info_ack::proto_gc_beishu_info_ack(const proto_gc_beishu_info_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_beishu_info_ack::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_beishu_info_ack::~proto_gc_beishu_info_ack() {
  SharedDtor();
}

void proto_gc_beishu_info_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_beishu_info_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_beishu_info_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_beishu_info_ack_descriptor_;
}

const proto_gc_beishu_info_ack& proto_gc_beishu_info_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_beishu_info_ack* proto_gc_beishu_info_ack::default_instance_ = NULL;

proto_gc_beishu_info_ack* proto_gc_beishu_info_ack::New() const {
  return new proto_gc_beishu_info_ack;
}

void proto_gc_beishu_info_ack::Clear() {
  vecbeishuinfo_.Clear();
  vecplayerbeishu_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_beishu_info_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 vecBeiShuInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vecBeiShuInfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_vecbeishuinfo())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_vecbeishuinfo())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_vecBeiShuInfo;
        if (input->ExpectTag(16)) goto parse_vecPlayerBeiShu;
        break;
      }

      // repeated int32 vecPlayerBeiShu = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vecPlayerBeiShu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_vecplayerbeishu())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_vecplayerbeishu())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vecPlayerBeiShu;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_beishu_info_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 vecBeiShuInfo = 1;
  for (int i = 0; i < this->vecbeishuinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->vecbeishuinfo(i), output);
  }

  // repeated int32 vecPlayerBeiShu = 2;
  for (int i = 0; i < this->vecplayerbeishu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->vecplayerbeishu(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_beishu_info_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 vecBeiShuInfo = 1;
  for (int i = 0; i < this->vecbeishuinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->vecbeishuinfo(i), target);
  }

  // repeated int32 vecPlayerBeiShu = 2;
  for (int i = 0; i < this->vecplayerbeishu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->vecplayerbeishu(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_beishu_info_ack::ByteSize() const {
  int total_size = 0;

  // repeated int32 vecBeiShuInfo = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->vecbeishuinfo_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->vecbeishuinfo(i));
    }
    total_size += 1 * this->vecbeishuinfo_size() + data_size;
  }

  // repeated int32 vecPlayerBeiShu = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->vecplayerbeishu_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->vecplayerbeishu(i));
    }
    total_size += 1 * this->vecplayerbeishu_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_beishu_info_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_beishu_info_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_beishu_info_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_beishu_info_ack::MergeFrom(const proto_gc_beishu_info_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  vecbeishuinfo_.MergeFrom(from.vecbeishuinfo_);
  vecplayerbeishu_.MergeFrom(from.vecplayerbeishu_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_beishu_info_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_beishu_info_ack::CopyFrom(const proto_gc_beishu_info_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_beishu_info_ack::IsInitialized() const {

  return true;
}

void proto_gc_beishu_info_ack::Swap(proto_gc_beishu_info_ack* other) {
  if (other != this) {
    vecbeishuinfo_.Swap(&other->vecbeishuinfo_);
    vecplayerbeishu_.Swap(&other->vecplayerbeishu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_beishu_info_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_beishu_info_ack_descriptor_;
  metadata.reflection = proto_gc_beishu_info_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_use_card_recode_noti::kCChairIDFieldNumber;
const int proto_gc_use_card_recode_noti::kCReconnectionFieldNumber;
#endif  // !_MSC_VER

proto_gc_use_card_recode_noti::proto_gc_use_card_recode_noti()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_use_card_recode_noti::InitAsDefaultInstance() {
}

proto_gc_use_card_recode_noti::proto_gc_use_card_recode_noti(const proto_gc_use_card_recode_noti& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_use_card_recode_noti::SharedCtor() {
  _cached_size_ = 0;
  cchairid_ = 0;
  creconnection_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_use_card_recode_noti::~proto_gc_use_card_recode_noti() {
  SharedDtor();
}

void proto_gc_use_card_recode_noti::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_use_card_recode_noti::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_use_card_recode_noti::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_use_card_recode_noti_descriptor_;
}

const proto_gc_use_card_recode_noti& proto_gc_use_card_recode_noti::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_use_card_recode_noti* proto_gc_use_card_recode_noti::default_instance_ = NULL;

proto_gc_use_card_recode_noti* proto_gc_use_card_recode_noti::New() const {
  return new proto_gc_use_card_recode_noti;
}

void proto_gc_use_card_recode_noti::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cchairid_ = 0;
    creconnection_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_use_card_recode_noti::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cchairid_)));
          set_has_cchairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cReconnection;
        break;
      }

      // required int32 cReconnection = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cReconnection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creconnection_)));
          set_has_creconnection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_use_card_recode_noti::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cChairID = 1;
  if (has_cchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cchairid(), output);
  }

  // required int32 cReconnection = 2;
  if (has_creconnection()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->creconnection(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_use_card_recode_noti::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cChairID = 1;
  if (has_cchairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cchairid(), target);
  }

  // required int32 cReconnection = 2;
  if (has_creconnection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->creconnection(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_use_card_recode_noti::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cChairID = 1;
    if (has_cchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cchairid());
    }

    // required int32 cReconnection = 2;
    if (has_creconnection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creconnection());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_use_card_recode_noti::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_use_card_recode_noti* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_use_card_recode_noti*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_use_card_recode_noti::MergeFrom(const proto_gc_use_card_recode_noti& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cchairid()) {
      set_cchairid(from.cchairid());
    }
    if (from.has_creconnection()) {
      set_creconnection(from.creconnection());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_use_card_recode_noti::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_use_card_recode_noti::CopyFrom(const proto_gc_use_card_recode_noti& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_use_card_recode_noti::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void proto_gc_use_card_recode_noti::Swap(proto_gc_use_card_recode_noti* other) {
  if (other != this) {
    std::swap(cchairid_, other->cchairid_);
    std::swap(creconnection_, other->creconnection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_use_card_recode_noti::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_use_card_recode_noti_descriptor_;
  metadata.reflection = proto_gc_use_card_recode_noti_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

proto_cg_win_doubel_req::proto_cg_win_doubel_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_cg_win_doubel_req::InitAsDefaultInstance() {
}

proto_cg_win_doubel_req::proto_cg_win_doubel_req(const proto_cg_win_doubel_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_cg_win_doubel_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_cg_win_doubel_req::~proto_cg_win_doubel_req() {
  SharedDtor();
}

void proto_cg_win_doubel_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_cg_win_doubel_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_cg_win_doubel_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_cg_win_doubel_req_descriptor_;
}

const proto_cg_win_doubel_req& proto_cg_win_doubel_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_cg_win_doubel_req* proto_cg_win_doubel_req::default_instance_ = NULL;

proto_cg_win_doubel_req* proto_cg_win_doubel_req::New() const {
  return new proto_cg_win_doubel_req;
}

void proto_cg_win_doubel_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_cg_win_doubel_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void proto_cg_win_doubel_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_cg_win_doubel_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_cg_win_doubel_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_cg_win_doubel_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_cg_win_doubel_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_cg_win_doubel_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_cg_win_doubel_req::MergeFrom(const proto_cg_win_doubel_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_cg_win_doubel_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_cg_win_doubel_req::CopyFrom(const proto_cg_win_doubel_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_cg_win_doubel_req::IsInitialized() const {

  return true;
}

void proto_cg_win_doubel_req::Swap(proto_cg_win_doubel_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_cg_win_doubel_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_cg_win_doubel_req_descriptor_;
  metadata.reflection = proto_cg_win_doubel_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

proto_gc_card_recode_req::proto_gc_card_recode_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_card_recode_req::InitAsDefaultInstance() {
}

proto_gc_card_recode_req::proto_gc_card_recode_req(const proto_gc_card_recode_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_card_recode_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_card_recode_req::~proto_gc_card_recode_req() {
  SharedDtor();
}

void proto_gc_card_recode_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_card_recode_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_card_recode_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_card_recode_req_descriptor_;
}

const proto_gc_card_recode_req& proto_gc_card_recode_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_card_recode_req* proto_gc_card_recode_req::default_instance_ = NULL;

proto_gc_card_recode_req* proto_gc_card_recode_req::New() const {
  return new proto_gc_card_recode_req;
}

void proto_gc_card_recode_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_card_recode_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void proto_gc_card_recode_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_card_recode_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_card_recode_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_card_recode_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_card_recode_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_card_recode_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_card_recode_req::MergeFrom(const proto_gc_card_recode_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_card_recode_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_card_recode_req::CopyFrom(const proto_gc_card_recode_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_card_recode_req::IsInitialized() const {

  return true;
}

void proto_gc_card_recode_req::Swap(proto_gc_card_recode_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_card_recode_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_card_recode_req_descriptor_;
  metadata.reflection = proto_gc_card_recode_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_two_let_card_not::kNLetNumFieldNumber;
#endif  // !_MSC_VER

proto_gc_two_let_card_not::proto_gc_two_let_card_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_two_let_card_not::InitAsDefaultInstance() {
}

proto_gc_two_let_card_not::proto_gc_two_let_card_not(const proto_gc_two_let_card_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_two_let_card_not::SharedCtor() {
  _cached_size_ = 0;
  nletnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_two_let_card_not::~proto_gc_two_let_card_not() {
  SharedDtor();
}

void proto_gc_two_let_card_not::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_two_let_card_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_two_let_card_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_two_let_card_not_descriptor_;
}

const proto_gc_two_let_card_not& proto_gc_two_let_card_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_two_let_card_not* proto_gc_two_let_card_not::default_instance_ = NULL;

proto_gc_two_let_card_not* proto_gc_two_let_card_not::New() const {
  return new proto_gc_two_let_card_not;
}

void proto_gc_two_let_card_not::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nletnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_two_let_card_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nLetNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nletnum_)));
          set_has_nletnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_two_let_card_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nLetNum = 1;
  if (has_nletnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nletnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_two_let_card_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nLetNum = 1;
  if (has_nletnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nletnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_two_let_card_not::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nLetNum = 1;
    if (has_nletnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nletnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_two_let_card_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_two_let_card_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_two_let_card_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_two_let_card_not::MergeFrom(const proto_gc_two_let_card_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nletnum()) {
      set_nletnum(from.nletnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_two_let_card_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_two_let_card_not::CopyFrom(const proto_gc_two_let_card_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_two_let_card_not::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void proto_gc_two_let_card_not::Swap(proto_gc_two_let_card_not* other) {
  if (other != this) {
    std::swap(nletnum_, other->nletnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_two_let_card_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_two_let_card_not_descriptor_;
  metadata.reflection = proto_gc_two_let_card_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_update_player_tokenmoney_not::kPlyChairidFieldNumber;
const int proto_gc_update_player_tokenmoney_not::kItemInfoFieldNumber;
#endif  // !_MSC_VER

proto_gc_update_player_tokenmoney_not::proto_gc_update_player_tokenmoney_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_update_player_tokenmoney_not::InitAsDefaultInstance() {
}

proto_gc_update_player_tokenmoney_not::proto_gc_update_player_tokenmoney_not(const proto_gc_update_player_tokenmoney_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_update_player_tokenmoney_not::SharedCtor() {
  _cached_size_ = 0;
  ply_chairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_update_player_tokenmoney_not::~proto_gc_update_player_tokenmoney_not() {
  SharedDtor();
}

void proto_gc_update_player_tokenmoney_not::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_update_player_tokenmoney_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_update_player_tokenmoney_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_update_player_tokenmoney_not_descriptor_;
}

const proto_gc_update_player_tokenmoney_not& proto_gc_update_player_tokenmoney_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_update_player_tokenmoney_not* proto_gc_update_player_tokenmoney_not::default_instance_ = NULL;

proto_gc_update_player_tokenmoney_not* proto_gc_update_player_tokenmoney_not::New() const {
  return new proto_gc_update_player_tokenmoney_not;
}

void proto_gc_update_player_tokenmoney_not::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ply_chairid_ = 0;
  }
  iteminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_update_player_tokenmoney_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ply_chairid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ply_chairid_)));
          set_has_ply_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_itemInfo;
        break;
      }

      // repeated .proto_player_itemInfo itemInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_iteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_itemInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_update_player_tokenmoney_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ply_chairid = 1;
  if (has_ply_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ply_chairid(), output);
  }

  // repeated .proto_player_itemInfo itemInfo = 2;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->iteminfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_update_player_tokenmoney_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ply_chairid = 1;
  if (has_ply_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ply_chairid(), target);
  }

  // repeated .proto_player_itemInfo itemInfo = 2;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->iteminfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_update_player_tokenmoney_not::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ply_chairid = 1;
    if (has_ply_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ply_chairid());
    }

  }
  // repeated .proto_player_itemInfo itemInfo = 2;
  total_size += 1 * this->iteminfo_size();
  for (int i = 0; i < this->iteminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->iteminfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_update_player_tokenmoney_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_update_player_tokenmoney_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_update_player_tokenmoney_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_update_player_tokenmoney_not::MergeFrom(const proto_gc_update_player_tokenmoney_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  iteminfo_.MergeFrom(from.iteminfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ply_chairid()) {
      set_ply_chairid(from.ply_chairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_update_player_tokenmoney_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_update_player_tokenmoney_not::CopyFrom(const proto_gc_update_player_tokenmoney_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_update_player_tokenmoney_not::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < iteminfo_size(); i++) {
    if (!this->iteminfo(i).IsInitialized()) return false;
  }
  return true;
}

void proto_gc_update_player_tokenmoney_not::Swap(proto_gc_update_player_tokenmoney_not* other) {
  if (other != this) {
    std::swap(ply_chairid_, other->ply_chairid_);
    iteminfo_.Swap(&other->iteminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_update_player_tokenmoney_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_update_player_tokenmoney_not_descriptor_;
  metadata.reflection = proto_gc_update_player_tokenmoney_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_card_count_ack::kCountsNumFieldNumber;
const int proto_gc_card_count_ack::kMVecPutCardFieldNumber;
#endif  // !_MSC_VER

proto_gc_card_count_ack::proto_gc_card_count_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_card_count_ack::InitAsDefaultInstance() {
}

proto_gc_card_count_ack::proto_gc_card_count_ack(const proto_gc_card_count_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_card_count_ack::SharedCtor() {
  _cached_size_ = 0;
  counts_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_card_count_ack::~proto_gc_card_count_ack() {
  SharedDtor();
}

void proto_gc_card_count_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_card_count_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_card_count_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_card_count_ack_descriptor_;
}

const proto_gc_card_count_ack& proto_gc_card_count_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_card_count_ack* proto_gc_card_count_ack::default_instance_ = NULL;

proto_gc_card_count_ack* proto_gc_card_count_ack::New() const {
  return new proto_gc_card_count_ack;
}

void proto_gc_card_count_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    counts_num_ = 0;
  }
  m_vecputcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_card_count_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 counts_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &counts_num_)));
          set_has_counts_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_vecPutCard;
        break;
      }

      // repeated .proto_CCard m_vecPutCard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vecPutCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_vecputcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_vecPutCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_card_count_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 counts_num = 1;
  if (has_counts_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->counts_num(), output);
  }

  // repeated .proto_CCard m_vecPutCard = 2;
  for (int i = 0; i < this->m_vecputcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_vecputcard(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_card_count_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 counts_num = 1;
  if (has_counts_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->counts_num(), target);
  }

  // repeated .proto_CCard m_vecPutCard = 2;
  for (int i = 0; i < this->m_vecputcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_vecputcard(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_card_count_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 counts_num = 1;
    if (has_counts_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->counts_num());
    }

  }
  // repeated .proto_CCard m_vecPutCard = 2;
  total_size += 1 * this->m_vecputcard_size();
  for (int i = 0; i < this->m_vecputcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_vecputcard(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_card_count_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_card_count_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_card_count_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_card_count_ack::MergeFrom(const proto_gc_card_count_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vecputcard_.MergeFrom(from.m_vecputcard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_counts_num()) {
      set_counts_num(from.counts_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_card_count_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_card_count_ack::CopyFrom(const proto_gc_card_count_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_card_count_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_vecputcard_size(); i++) {
    if (!this->m_vecputcard(i).IsInitialized()) return false;
  }
  return true;
}

void proto_gc_card_count_ack::Swap(proto_gc_card_count_ack* other) {
  if (other != this) {
    std::swap(counts_num_, other->counts_num_);
    m_vecputcard_.Swap(&other->m_vecputcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_card_count_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_card_count_ack_descriptor_;
  metadata.reflection = proto_gc_card_count_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_cg_regain_lose_score_req::kNOpFieldNumber;
const int proto_cg_regain_lose_score_req::kNItemIndexFieldNumber;
const int proto_cg_regain_lose_score_req::kNItemNumFieldNumber;
#endif  // !_MSC_VER

proto_cg_regain_lose_score_req::proto_cg_regain_lose_score_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_cg_regain_lose_score_req::InitAsDefaultInstance() {
}

proto_cg_regain_lose_score_req::proto_cg_regain_lose_score_req(const proto_cg_regain_lose_score_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_cg_regain_lose_score_req::SharedCtor() {
  _cached_size_ = 0;
  nop_ = 0;
  nitemindex_ = 0;
  nitemnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_cg_regain_lose_score_req::~proto_cg_regain_lose_score_req() {
  SharedDtor();
}

void proto_cg_regain_lose_score_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_cg_regain_lose_score_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_cg_regain_lose_score_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_cg_regain_lose_score_req_descriptor_;
}

const proto_cg_regain_lose_score_req& proto_cg_regain_lose_score_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_cg_regain_lose_score_req* proto_cg_regain_lose_score_req::default_instance_ = NULL;

proto_cg_regain_lose_score_req* proto_cg_regain_lose_score_req::New() const {
  return new proto_cg_regain_lose_score_req;
}

void proto_cg_regain_lose_score_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nop_ = 0;
    nitemindex_ = 0;
    nitemnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_cg_regain_lose_score_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nOp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nop_)));
          set_has_nop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nItemIndex;
        break;
      }

      // required int32 nItemIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nItemIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nitemindex_)));
          set_has_nitemindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nItemNum;
        break;
      }

      // required int32 nItemNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nItemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nitemnum_)));
          set_has_nitemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_cg_regain_lose_score_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nOp = 1;
  if (has_nop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nop(), output);
  }

  // required int32 nItemIndex = 2;
  if (has_nitemindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nitemindex(), output);
  }

  // required int32 nItemNum = 3;
  if (has_nitemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nitemnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_cg_regain_lose_score_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nOp = 1;
  if (has_nop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nop(), target);
  }

  // required int32 nItemIndex = 2;
  if (has_nitemindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nitemindex(), target);
  }

  // required int32 nItemNum = 3;
  if (has_nitemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nitemnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_cg_regain_lose_score_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nOp = 1;
    if (has_nop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nop());
    }

    // required int32 nItemIndex = 2;
    if (has_nitemindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nitemindex());
    }

    // required int32 nItemNum = 3;
    if (has_nitemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nitemnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_cg_regain_lose_score_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_cg_regain_lose_score_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_cg_regain_lose_score_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_cg_regain_lose_score_req::MergeFrom(const proto_cg_regain_lose_score_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nop()) {
      set_nop(from.nop());
    }
    if (from.has_nitemindex()) {
      set_nitemindex(from.nitemindex());
    }
    if (from.has_nitemnum()) {
      set_nitemnum(from.nitemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_cg_regain_lose_score_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_cg_regain_lose_score_req::CopyFrom(const proto_cg_regain_lose_score_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_cg_regain_lose_score_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void proto_cg_regain_lose_score_req::Swap(proto_cg_regain_lose_score_req* other) {
  if (other != this) {
    std::swap(nop_, other->nop_);
    std::swap(nitemindex_, other->nitemindex_);
    std::swap(nitemnum_, other->nitemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_cg_regain_lose_score_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_cg_regain_lose_score_req_descriptor_;
  metadata.reflection = proto_cg_regain_lose_score_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_private_room_result_ack::kVecGameStatiscsFieldNumber;
#endif  // !_MSC_VER

proto_gc_private_room_result_ack::proto_gc_private_room_result_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_private_room_result_ack::InitAsDefaultInstance() {
}

proto_gc_private_room_result_ack::proto_gc_private_room_result_ack(const proto_gc_private_room_result_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_private_room_result_ack::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_private_room_result_ack::~proto_gc_private_room_result_ack() {
  SharedDtor();
}

void proto_gc_private_room_result_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_private_room_result_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_private_room_result_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_private_room_result_ack_descriptor_;
}

const proto_gc_private_room_result_ack& proto_gc_private_room_result_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_private_room_result_ack* proto_gc_private_room_result_ack::default_instance_ = NULL;

proto_gc_private_room_result_ack* proto_gc_private_room_result_ack::New() const {
  return new proto_gc_private_room_result_ack;
}

void proto_gc_private_room_result_ack::Clear() {
  vecgamestatiscs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_private_room_result_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_GameStatisc vecGameStatiscs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecGameStatiscs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vecgamestatiscs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_vecGameStatiscs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_private_room_result_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_GameStatisc vecGameStatiscs = 1;
  for (int i = 0; i < this->vecgamestatiscs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vecgamestatiscs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_private_room_result_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_GameStatisc vecGameStatiscs = 1;
  for (int i = 0; i < this->vecgamestatiscs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->vecgamestatiscs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_private_room_result_ack::ByteSize() const {
  int total_size = 0;

  // repeated .proto_GameStatisc vecGameStatiscs = 1;
  total_size += 1 * this->vecgamestatiscs_size();
  for (int i = 0; i < this->vecgamestatiscs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vecgamestatiscs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_private_room_result_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_private_room_result_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_private_room_result_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_private_room_result_ack::MergeFrom(const proto_gc_private_room_result_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  vecgamestatiscs_.MergeFrom(from.vecgamestatiscs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_private_room_result_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_private_room_result_ack::CopyFrom(const proto_gc_private_room_result_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_private_room_result_ack::IsInitialized() const {

  for (int i = 0; i < vecgamestatiscs_size(); i++) {
    if (!this->vecgamestatiscs(i).IsInitialized()) return false;
  }
  return true;
}

void proto_gc_private_room_result_ack::Swap(proto_gc_private_room_result_ack* other) {
  if (other != this) {
    vecgamestatiscs_.Swap(&other->vecgamestatiscs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_private_room_result_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_private_room_result_ack_descriptor_;
  metadata.reflection = proto_gc_private_room_result_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_enable_invincible_ack::kNRetFieldNumber;
#endif  // !_MSC_VER

proto_gc_enable_invincible_ack::proto_gc_enable_invincible_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_enable_invincible_ack::InitAsDefaultInstance() {
}

proto_gc_enable_invincible_ack::proto_gc_enable_invincible_ack(const proto_gc_enable_invincible_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_enable_invincible_ack::SharedCtor() {
  _cached_size_ = 0;
  nret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_enable_invincible_ack::~proto_gc_enable_invincible_ack() {
  SharedDtor();
}

void proto_gc_enable_invincible_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_enable_invincible_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_enable_invincible_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_enable_invincible_ack_descriptor_;
}

const proto_gc_enable_invincible_ack& proto_gc_enable_invincible_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_enable_invincible_ack* proto_gc_enable_invincible_ack::default_instance_ = NULL;

proto_gc_enable_invincible_ack* proto_gc_enable_invincible_ack::New() const {
  return new proto_gc_enable_invincible_ack;
}

void proto_gc_enable_invincible_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_enable_invincible_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nRet = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nret_)));
          set_has_nret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_enable_invincible_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nRet = 1;
  if (has_nret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_enable_invincible_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nRet = 1;
  if (has_nret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_enable_invincible_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nRet = 1;
    if (has_nret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_enable_invincible_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_enable_invincible_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_enable_invincible_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_enable_invincible_ack::MergeFrom(const proto_gc_enable_invincible_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nret()) {
      set_nret(from.nret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_enable_invincible_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_enable_invincible_ack::CopyFrom(const proto_gc_enable_invincible_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_enable_invincible_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void proto_gc_enable_invincible_ack::Swap(proto_gc_enable_invincible_ack* other) {
  if (other != this) {
    std::swap(nret_, other->nret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_enable_invincible_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_enable_invincible_ack_descriptor_;
  metadata.reflection = proto_gc_enable_invincible_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_cg_bet_lord_card_req::kIndexFieldNumber;
#endif  // !_MSC_VER

proto_cg_bet_lord_card_req::proto_cg_bet_lord_card_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_cg_bet_lord_card_req::InitAsDefaultInstance() {
}

proto_cg_bet_lord_card_req::proto_cg_bet_lord_card_req(const proto_cg_bet_lord_card_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_cg_bet_lord_card_req::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_cg_bet_lord_card_req::~proto_cg_bet_lord_card_req() {
  SharedDtor();
}

void proto_cg_bet_lord_card_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_cg_bet_lord_card_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_cg_bet_lord_card_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_cg_bet_lord_card_req_descriptor_;
}

const proto_cg_bet_lord_card_req& proto_cg_bet_lord_card_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_cg_bet_lord_card_req* proto_cg_bet_lord_card_req::default_instance_ = NULL;

proto_cg_bet_lord_card_req* proto_cg_bet_lord_card_req::New() const {
  return new proto_cg_bet_lord_card_req;
}

void proto_cg_bet_lord_card_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_cg_bet_lord_card_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_cg_bet_lord_card_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_cg_bet_lord_card_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_cg_bet_lord_card_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_cg_bet_lord_card_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_cg_bet_lord_card_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_cg_bet_lord_card_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_cg_bet_lord_card_req::MergeFrom(const proto_cg_bet_lord_card_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_cg_bet_lord_card_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_cg_bet_lord_card_req::CopyFrom(const proto_cg_bet_lord_card_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_cg_bet_lord_card_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void proto_cg_bet_lord_card_req::Swap(proto_cg_bet_lord_card_req* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_cg_bet_lord_card_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_cg_bet_lord_card_req_descriptor_;
  metadata.reflection = proto_cg_bet_lord_card_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_look_lord_card_item_ack::kNRetFieldNumber;
#endif  // !_MSC_VER

proto_gc_look_lord_card_item_ack::proto_gc_look_lord_card_item_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_look_lord_card_item_ack::InitAsDefaultInstance() {
}

proto_gc_look_lord_card_item_ack::proto_gc_look_lord_card_item_ack(const proto_gc_look_lord_card_item_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_look_lord_card_item_ack::SharedCtor() {
  _cached_size_ = 0;
  nret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_look_lord_card_item_ack::~proto_gc_look_lord_card_item_ack() {
  SharedDtor();
}

void proto_gc_look_lord_card_item_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_look_lord_card_item_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_look_lord_card_item_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_look_lord_card_item_ack_descriptor_;
}

const proto_gc_look_lord_card_item_ack& proto_gc_look_lord_card_item_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_look_lord_card_item_ack* proto_gc_look_lord_card_item_ack::default_instance_ = NULL;

proto_gc_look_lord_card_item_ack* proto_gc_look_lord_card_item_ack::New() const {
  return new proto_gc_look_lord_card_item_ack;
}

void proto_gc_look_lord_card_item_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_look_lord_card_item_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nRet = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nret_)));
          set_has_nret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_look_lord_card_item_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nRet = 1;
  if (has_nret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_look_lord_card_item_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nRet = 1;
  if (has_nret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_look_lord_card_item_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nRet = 1;
    if (has_nret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_look_lord_card_item_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_look_lord_card_item_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_look_lord_card_item_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_look_lord_card_item_ack::MergeFrom(const proto_gc_look_lord_card_item_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nret()) {
      set_nret(from.nret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_look_lord_card_item_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_look_lord_card_item_ack::CopyFrom(const proto_gc_look_lord_card_item_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_look_lord_card_item_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void proto_gc_look_lord_card_item_ack::Swap(proto_gc_look_lord_card_item_ack* other) {
  if (other != this) {
    std::swap(nret_, other->nret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_look_lord_card_item_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_look_lord_card_item_ack_descriptor_;
  metadata.reflection = proto_gc_look_lord_card_item_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_stUserData::kCChairIDFieldNumber;
const int proto_stUserData::kVecHandCardsFieldNumber;
const int proto_stUserData::kVecPutCardsFieldNumber;
#endif  // !_MSC_VER

proto_stUserData::proto_stUserData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_stUserData::InitAsDefaultInstance() {
}

proto_stUserData::proto_stUserData(const proto_stUserData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_stUserData::SharedCtor() {
  _cached_size_ = 0;
  cchairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_stUserData::~proto_stUserData() {
  SharedDtor();
}

void proto_stUserData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_stUserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_stUserData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_stUserData_descriptor_;
}

const proto_stUserData& proto_stUserData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_stUserData* proto_stUserData::default_instance_ = NULL;

proto_stUserData* proto_stUserData::New() const {
  return new proto_stUserData;
}

void proto_stUserData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cchairid_ = 0;
  }
  vechandcards_.Clear();
  vecputcards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_stUserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cchairid_)));
          set_has_cchairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vecHandCards;
        break;
      }

      // repeated .proto_CCard vecHandCards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecHandCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vechandcards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vecHandCards;
        if (input->ExpectTag(26)) goto parse_vecPutCards;
        break;
      }

      // repeated .proto_CCard vecPutCards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecPutCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vecputcards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vecPutCards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_stUserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cChairID = 1;
  if (has_cchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cchairid(), output);
  }

  // repeated .proto_CCard vecHandCards = 2;
  for (int i = 0; i < this->vechandcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vechandcards(i), output);
  }

  // repeated .proto_CCard vecPutCards = 3;
  for (int i = 0; i < this->vecputcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->vecputcards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_stUserData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cChairID = 1;
  if (has_cchairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cchairid(), target);
  }

  // repeated .proto_CCard vecHandCards = 2;
  for (int i = 0; i < this->vechandcards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vechandcards(i), target);
  }

  // repeated .proto_CCard vecPutCards = 3;
  for (int i = 0; i < this->vecputcards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->vecputcards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_stUserData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cChairID = 1;
    if (has_cchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cchairid());
    }

  }
  // repeated .proto_CCard vecHandCards = 2;
  total_size += 1 * this->vechandcards_size();
  for (int i = 0; i < this->vechandcards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vechandcards(i));
  }

  // repeated .proto_CCard vecPutCards = 3;
  total_size += 1 * this->vecputcards_size();
  for (int i = 0; i < this->vecputcards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vecputcards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_stUserData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_stUserData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_stUserData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_stUserData::MergeFrom(const proto_stUserData& from) {
  GOOGLE_CHECK_NE(&from, this);
  vechandcards_.MergeFrom(from.vechandcards_);
  vecputcards_.MergeFrom(from.vecputcards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cchairid()) {
      set_cchairid(from.cchairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_stUserData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_stUserData::CopyFrom(const proto_stUserData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_stUserData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < vechandcards_size(); i++) {
    if (!this->vechandcards(i).IsInitialized()) return false;
  }
  for (int i = 0; i < vecputcards_size(); i++) {
    if (!this->vecputcards(i).IsInitialized()) return false;
  }
  return true;
}

void proto_stUserData::Swap(proto_stUserData* other) {
  if (other != this) {
    std::swap(cchairid_, other->cchairid_);
    vechandcards_.Swap(&other->vechandcards_);
    vecputcards_.Swap(&other->vecputcards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_stUserData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_stUserData_descriptor_;
  metadata.reflection = proto_stUserData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_double_score_req::kNSerialIDFieldNumber;
#endif  // !_MSC_VER

proto_gc_double_score_req::proto_gc_double_score_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_double_score_req::InitAsDefaultInstance() {
}

proto_gc_double_score_req::proto_gc_double_score_req(const proto_gc_double_score_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_double_score_req::SharedCtor() {
  _cached_size_ = 0;
  nserialid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_double_score_req::~proto_gc_double_score_req() {
  SharedDtor();
}

void proto_gc_double_score_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_double_score_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_double_score_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_double_score_req_descriptor_;
}

const proto_gc_double_score_req& proto_gc_double_score_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_double_score_req* proto_gc_double_score_req::default_instance_ = NULL;

proto_gc_double_score_req* proto_gc_double_score_req::New() const {
  return new proto_gc_double_score_req;
}

void proto_gc_double_score_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nserialid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_double_score_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nSerialID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nserialid_)));
          set_has_nserialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_double_score_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nSerialID = 1;
  if (has_nserialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nserialid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_double_score_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nSerialID = 1;
  if (has_nserialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nserialid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_double_score_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nSerialID = 1;
    if (has_nserialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nserialid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_double_score_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_double_score_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_double_score_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_double_score_req::MergeFrom(const proto_gc_double_score_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nserialid()) {
      set_nserialid(from.nserialid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_double_score_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_double_score_req::CopyFrom(const proto_gc_double_score_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_double_score_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void proto_gc_double_score_req::Swap(proto_gc_double_score_req* other) {
  if (other != this) {
    std::swap(nserialid_, other->nserialid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_double_score_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_double_score_req_descriptor_;
  metadata.reflection = proto_gc_double_score_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_game_result_not::kBTypeFieldNumber;
const int proto_gc_game_result_not::kCDoubleFieldNumber;
const int proto_gc_game_result_not::kCCallScoreFieldNumber;
const int proto_gc_game_result_not::kBShowCardFieldNumber;
const int proto_gc_game_result_not::kNBombCountFieldNumber;
const int proto_gc_game_result_not::kBSpringFieldNumber;
const int proto_gc_game_result_not::kBReverseSpringFieldNumber;
const int proto_gc_game_result_not::kBRobLordFieldNumber;
const int proto_gc_game_result_not::kVecUserResultFieldNumber;
#endif  // !_MSC_VER

proto_gc_game_result_not::proto_gc_game_result_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_game_result_not::InitAsDefaultInstance() {
}

proto_gc_game_result_not::proto_gc_game_result_not(const proto_gc_game_result_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_game_result_not::SharedCtor() {
  _cached_size_ = 0;
  btype_ = 0;
  cdouble_ = 0;
  ccallscore_ = 0;
  bshowcard_ = 0;
  nbombcount_ = 0;
  bspring_ = 0;
  breversespring_ = 0;
  broblord_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_game_result_not::~proto_gc_game_result_not() {
  SharedDtor();
}

void proto_gc_game_result_not::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_game_result_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_game_result_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_game_result_not_descriptor_;
}

const proto_gc_game_result_not& proto_gc_game_result_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_game_result_not* proto_gc_game_result_not::default_instance_ = NULL;

proto_gc_game_result_not* proto_gc_game_result_not::New() const {
  return new proto_gc_game_result_not;
}

void proto_gc_game_result_not::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    btype_ = 0;
    cdouble_ = 0;
    ccallscore_ = 0;
    bshowcard_ = 0;
    nbombcount_ = 0;
    bspring_ = 0;
    breversespring_ = 0;
    broblord_ = 0;
  }
  vecuserresult_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_game_result_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &btype_)));
          set_has_btype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cDouble;
        break;
      }

      // required int32 cDouble = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cDouble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cdouble_)));
          set_has_cdouble();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cCallScore;
        break;
      }

      // required int32 cCallScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cCallScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ccallscore_)));
          set_has_ccallscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bShowCard;
        break;
      }

      // required int32 bShowCard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bShowCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bshowcard_)));
          set_has_bshowcard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nBombCount;
        break;
      }

      // required int32 nBombCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nBombCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nbombcount_)));
          set_has_nbombcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bSpring;
        break;
      }

      // required int32 bSpring = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bSpring:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bspring_)));
          set_has_bspring();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bReverseSpring;
        break;
      }

      // required int32 bReverseSpring = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bReverseSpring:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &breversespring_)));
          set_has_breversespring();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bRobLord;
        break;
      }

      // required int32 bRobLord = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bRobLord:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &broblord_)));
          set_has_broblord();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_vecUserResult;
        break;
      }

      // repeated .proto_stUserResult vecUserResult = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecUserResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vecuserresult()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_vecUserResult;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_game_result_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bType = 1;
  if (has_btype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->btype(), output);
  }

  // required int32 cDouble = 2;
  if (has_cdouble()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cdouble(), output);
  }

  // required int32 cCallScore = 3;
  if (has_ccallscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ccallscore(), output);
  }

  // required int32 bShowCard = 4;
  if (has_bshowcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bshowcard(), output);
  }

  // required int32 nBombCount = 5;
  if (has_nbombcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nbombcount(), output);
  }

  // required int32 bSpring = 6;
  if (has_bspring()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bspring(), output);
  }

  // required int32 bReverseSpring = 7;
  if (has_breversespring()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->breversespring(), output);
  }

  // required int32 bRobLord = 8;
  if (has_broblord()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->broblord(), output);
  }

  // repeated .proto_stUserResult vecUserResult = 9;
  for (int i = 0; i < this->vecuserresult_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->vecuserresult(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_game_result_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bType = 1;
  if (has_btype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->btype(), target);
  }

  // required int32 cDouble = 2;
  if (has_cdouble()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cdouble(), target);
  }

  // required int32 cCallScore = 3;
  if (has_ccallscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ccallscore(), target);
  }

  // required int32 bShowCard = 4;
  if (has_bshowcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bshowcard(), target);
  }

  // required int32 nBombCount = 5;
  if (has_nbombcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nbombcount(), target);
  }

  // required int32 bSpring = 6;
  if (has_bspring()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bspring(), target);
  }

  // required int32 bReverseSpring = 7;
  if (has_breversespring()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->breversespring(), target);
  }

  // required int32 bRobLord = 8;
  if (has_broblord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->broblord(), target);
  }

  // repeated .proto_stUserResult vecUserResult = 9;
  for (int i = 0; i < this->vecuserresult_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->vecuserresult(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_game_result_not::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bType = 1;
    if (has_btype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->btype());
    }

    // required int32 cDouble = 2;
    if (has_cdouble()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cdouble());
    }

    // required int32 cCallScore = 3;
    if (has_ccallscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ccallscore());
    }

    // required int32 bShowCard = 4;
    if (has_bshowcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bshowcard());
    }

    // required int32 nBombCount = 5;
    if (has_nbombcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbombcount());
    }

    // required int32 bSpring = 6;
    if (has_bspring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bspring());
    }

    // required int32 bReverseSpring = 7;
    if (has_breversespring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->breversespring());
    }

    // required int32 bRobLord = 8;
    if (has_broblord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->broblord());
    }

  }
  // repeated .proto_stUserResult vecUserResult = 9;
  total_size += 1 * this->vecuserresult_size();
  for (int i = 0; i < this->vecuserresult_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vecuserresult(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_game_result_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_game_result_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_game_result_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_game_result_not::MergeFrom(const proto_gc_game_result_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  vecuserresult_.MergeFrom(from.vecuserresult_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_btype()) {
      set_btype(from.btype());
    }
    if (from.has_cdouble()) {
      set_cdouble(from.cdouble());
    }
    if (from.has_ccallscore()) {
      set_ccallscore(from.ccallscore());
    }
    if (from.has_bshowcard()) {
      set_bshowcard(from.bshowcard());
    }
    if (from.has_nbombcount()) {
      set_nbombcount(from.nbombcount());
    }
    if (from.has_bspring()) {
      set_bspring(from.bspring());
    }
    if (from.has_breversespring()) {
      set_breversespring(from.breversespring());
    }
    if (from.has_broblord()) {
      set_broblord(from.broblord());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_game_result_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_game_result_not::CopyFrom(const proto_gc_game_result_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_game_result_not::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  for (int i = 0; i < vecuserresult_size(); i++) {
    if (!this->vecuserresult(i).IsInitialized()) return false;
  }
  return true;
}

void proto_gc_game_result_not::Swap(proto_gc_game_result_not* other) {
  if (other != this) {
    std::swap(btype_, other->btype_);
    std::swap(cdouble_, other->cdouble_);
    std::swap(ccallscore_, other->ccallscore_);
    std::swap(bshowcard_, other->bshowcard_);
    std::swap(nbombcount_, other->nbombcount_);
    std::swap(bspring_, other->bspring_);
    std::swap(breversespring_, other->breversespring_);
    std::swap(broblord_, other->broblord_);
    vecuserresult_.Swap(&other->vecuserresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_game_result_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_game_result_not_descriptor_;
  metadata.reflection = proto_gc_game_result_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

proto_gc_user_savestar_card_noti::proto_gc_user_savestar_card_noti()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_user_savestar_card_noti::InitAsDefaultInstance() {
}

proto_gc_user_savestar_card_noti::proto_gc_user_savestar_card_noti(const proto_gc_user_savestar_card_noti& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_user_savestar_card_noti::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_user_savestar_card_noti::~proto_gc_user_savestar_card_noti() {
  SharedDtor();
}

void proto_gc_user_savestar_card_noti::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_user_savestar_card_noti::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_user_savestar_card_noti::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_user_savestar_card_noti_descriptor_;
}

const proto_gc_user_savestar_card_noti& proto_gc_user_savestar_card_noti::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_user_savestar_card_noti* proto_gc_user_savestar_card_noti::default_instance_ = NULL;

proto_gc_user_savestar_card_noti* proto_gc_user_savestar_card_noti::New() const {
  return new proto_gc_user_savestar_card_noti;
}

void proto_gc_user_savestar_card_noti::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_user_savestar_card_noti::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void proto_gc_user_savestar_card_noti::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_user_savestar_card_noti::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_user_savestar_card_noti::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_user_savestar_card_noti::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_user_savestar_card_noti* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_user_savestar_card_noti*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_user_savestar_card_noti::MergeFrom(const proto_gc_user_savestar_card_noti& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_user_savestar_card_noti::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_user_savestar_card_noti::CopyFrom(const proto_gc_user_savestar_card_noti& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_user_savestar_card_noti::IsInitialized() const {

  return true;
}

void proto_gc_user_savestar_card_noti::Swap(proto_gc_user_savestar_card_noti* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_user_savestar_card_noti::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_user_savestar_card_noti_descriptor_;
  metadata.reflection = proto_gc_user_savestar_card_noti_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_get_redpackets_award_ack::kRetFieldNumber;
const int proto_gc_get_redpackets_award_ack::kCurRoundsFieldNumber;
const int proto_gc_get_redpackets_award_ack::kLimitRoundsFieldNumber;
const int proto_gc_get_redpackets_award_ack::kNAmountFieldNumber;
const int proto_gc_get_redpackets_award_ack::kCItemtypeFieldNumber;
const int proto_gc_get_redpackets_award_ack::kTaskIdFieldNumber;
const int proto_gc_get_redpackets_award_ack::kFakeItemFieldNumber;
#endif  // !_MSC_VER

proto_gc_get_redpackets_award_ack::proto_gc_get_redpackets_award_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_get_redpackets_award_ack::InitAsDefaultInstance() {
}

proto_gc_get_redpackets_award_ack::proto_gc_get_redpackets_award_ack(const proto_gc_get_redpackets_award_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_get_redpackets_award_ack::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  cur_rounds_ = 0;
  limit_rounds_ = 0;
  namount_ = 0;
  citemtype_ = 0;
  task_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_get_redpackets_award_ack::~proto_gc_get_redpackets_award_ack() {
  SharedDtor();
}

void proto_gc_get_redpackets_award_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_get_redpackets_award_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_get_redpackets_award_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_get_redpackets_award_ack_descriptor_;
}

const proto_gc_get_redpackets_award_ack& proto_gc_get_redpackets_award_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_get_redpackets_award_ack* proto_gc_get_redpackets_award_ack::default_instance_ = NULL;

proto_gc_get_redpackets_award_ack* proto_gc_get_redpackets_award_ack::New() const {
  return new proto_gc_get_redpackets_award_ack;
}

void proto_gc_get_redpackets_award_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    cur_rounds_ = 0;
    limit_rounds_ = 0;
    namount_ = 0;
    citemtype_ = 0;
    task_id_ = 0;
  }
  fakeitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_get_redpackets_award_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_rounds;
        break;
      }

      // required int32 cur_rounds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_rounds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_rounds_)));
          set_has_cur_rounds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_limit_rounds;
        break;
      }

      // required int32 limit_rounds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit_rounds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_rounds_)));
          set_has_limit_rounds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nAmount;
        break;
      }

      // required int32 nAmount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &namount_)));
          set_has_namount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cItemtype;
        break;
      }

      // required int32 cItemtype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cItemtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &citemtype_)));
          set_has_citemtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_task_id;
        break;
      }

      // required int32 task_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fakeItem;
        break;
      }

      // repeated .proto_player_itemInfo fakeItem = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fakeItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fakeitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fakeItem;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_get_redpackets_award_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required int32 cur_rounds = 2;
  if (has_cur_rounds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur_rounds(), output);
  }

  // required int32 limit_rounds = 3;
  if (has_limit_rounds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->limit_rounds(), output);
  }

  // required int32 nAmount = 4;
  if (has_namount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->namount(), output);
  }

  // required int32 cItemtype = 5;
  if (has_citemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->citemtype(), output);
  }

  // required int32 task_id = 6;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->task_id(), output);
  }

  // repeated .proto_player_itemInfo fakeItem = 7;
  for (int i = 0; i < this->fakeitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fakeitem(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_get_redpackets_award_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required int32 cur_rounds = 2;
  if (has_cur_rounds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur_rounds(), target);
  }

  // required int32 limit_rounds = 3;
  if (has_limit_rounds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->limit_rounds(), target);
  }

  // required int32 nAmount = 4;
  if (has_namount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->namount(), target);
  }

  // required int32 cItemtype = 5;
  if (has_citemtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->citemtype(), target);
  }

  // required int32 task_id = 6;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->task_id(), target);
  }

  // repeated .proto_player_itemInfo fakeItem = 7;
  for (int i = 0; i < this->fakeitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->fakeitem(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_get_redpackets_award_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required int32 cur_rounds = 2;
    if (has_cur_rounds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_rounds());
    }

    // required int32 limit_rounds = 3;
    if (has_limit_rounds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit_rounds());
    }

    // required int32 nAmount = 4;
    if (has_namount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->namount());
    }

    // required int32 cItemtype = 5;
    if (has_citemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->citemtype());
    }

    // required int32 task_id = 6;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_id());
    }

  }
  // repeated .proto_player_itemInfo fakeItem = 7;
  total_size += 1 * this->fakeitem_size();
  for (int i = 0; i < this->fakeitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fakeitem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_get_redpackets_award_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_get_redpackets_award_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_get_redpackets_award_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_get_redpackets_award_ack::MergeFrom(const proto_gc_get_redpackets_award_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  fakeitem_.MergeFrom(from.fakeitem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_cur_rounds()) {
      set_cur_rounds(from.cur_rounds());
    }
    if (from.has_limit_rounds()) {
      set_limit_rounds(from.limit_rounds());
    }
    if (from.has_namount()) {
      set_namount(from.namount());
    }
    if (from.has_citemtype()) {
      set_citemtype(from.citemtype());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_get_redpackets_award_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_get_redpackets_award_ack::CopyFrom(const proto_gc_get_redpackets_award_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_get_redpackets_award_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  for (int i = 0; i < fakeitem_size(); i++) {
    if (!this->fakeitem(i).IsInitialized()) return false;
  }
  return true;
}

void proto_gc_get_redpackets_award_ack::Swap(proto_gc_get_redpackets_award_ack* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(cur_rounds_, other->cur_rounds_);
    std::swap(limit_rounds_, other->limit_rounds_);
    std::swap(namount_, other->namount_);
    std::swap(citemtype_, other->citemtype_);
    std::swap(task_id_, other->task_id_);
    fakeitem_.Swap(&other->fakeitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_get_redpackets_award_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_get_redpackets_award_ack_descriptor_;
  metadata.reflection = proto_gc_get_redpackets_award_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_refresh_card_not::kCChairIDFieldNumber;
const int proto_gc_refresh_card_not::kVecCardsFieldNumber;
#endif  // !_MSC_VER

proto_gc_refresh_card_not::proto_gc_refresh_card_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_refresh_card_not::InitAsDefaultInstance() {
}

proto_gc_refresh_card_not::proto_gc_refresh_card_not(const proto_gc_refresh_card_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_refresh_card_not::SharedCtor() {
  _cached_size_ = 0;
  cchairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_refresh_card_not::~proto_gc_refresh_card_not() {
  SharedDtor();
}

void proto_gc_refresh_card_not::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_refresh_card_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_refresh_card_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_refresh_card_not_descriptor_;
}

const proto_gc_refresh_card_not& proto_gc_refresh_card_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_refresh_card_not* proto_gc_refresh_card_not::default_instance_ = NULL;

proto_gc_refresh_card_not* proto_gc_refresh_card_not::New() const {
  return new proto_gc_refresh_card_not;
}

void proto_gc_refresh_card_not::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cchairid_ = 0;
  }
  veccards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_refresh_card_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cchairid_)));
          set_has_cchairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vecCards;
        break;
      }

      // repeated .proto_CCard vecCards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_veccards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vecCards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_refresh_card_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cChairID = 1;
  if (has_cchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cchairid(), output);
  }

  // repeated .proto_CCard vecCards = 2;
  for (int i = 0; i < this->veccards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->veccards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_refresh_card_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cChairID = 1;
  if (has_cchairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cchairid(), target);
  }

  // repeated .proto_CCard vecCards = 2;
  for (int i = 0; i < this->veccards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->veccards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_refresh_card_not::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cChairID = 1;
    if (has_cchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cchairid());
    }

  }
  // repeated .proto_CCard vecCards = 2;
  total_size += 1 * this->veccards_size();
  for (int i = 0; i < this->veccards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->veccards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_refresh_card_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_refresh_card_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_refresh_card_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_refresh_card_not::MergeFrom(const proto_gc_refresh_card_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  veccards_.MergeFrom(from.veccards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cchairid()) {
      set_cchairid(from.cchairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_refresh_card_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_refresh_card_not::CopyFrom(const proto_gc_refresh_card_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_refresh_card_not::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < veccards_size(); i++) {
    if (!this->veccards(i).IsInitialized()) return false;
  }
  return true;
}

void proto_gc_refresh_card_not::Swap(proto_gc_refresh_card_not* other) {
  if (other != this) {
    std::swap(cchairid_, other->cchairid_);
    veccards_.Swap(&other->veccards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_refresh_card_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_refresh_card_not_descriptor_;
  metadata.reflection = proto_gc_refresh_card_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

proto_cg_three_draw_req_data::proto_cg_three_draw_req_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_cg_three_draw_req_data::InitAsDefaultInstance() {
}

proto_cg_three_draw_req_data::proto_cg_three_draw_req_data(const proto_cg_three_draw_req_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_cg_three_draw_req_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_cg_three_draw_req_data::~proto_cg_three_draw_req_data() {
  SharedDtor();
}

void proto_cg_three_draw_req_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_cg_three_draw_req_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_cg_three_draw_req_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_cg_three_draw_req_data_descriptor_;
}

const proto_cg_three_draw_req_data& proto_cg_three_draw_req_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_cg_three_draw_req_data* proto_cg_three_draw_req_data::default_instance_ = NULL;

proto_cg_three_draw_req_data* proto_cg_three_draw_req_data::New() const {
  return new proto_cg_three_draw_req_data;
}

void proto_cg_three_draw_req_data::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_cg_three_draw_req_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void proto_cg_three_draw_req_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_cg_three_draw_req_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_cg_three_draw_req_data::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_cg_three_draw_req_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_cg_three_draw_req_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_cg_three_draw_req_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_cg_three_draw_req_data::MergeFrom(const proto_cg_three_draw_req_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_cg_three_draw_req_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_cg_three_draw_req_data::CopyFrom(const proto_cg_three_draw_req_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_cg_three_draw_req_data::IsInitialized() const {

  return true;
}

void proto_cg_three_draw_req_data::Swap(proto_cg_three_draw_req_data* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_cg_three_draw_req_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_cg_three_draw_req_data_descriptor_;
  metadata.reflection = proto_cg_three_draw_req_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_ItemInfo::kNItemIndexFieldNumber;
const int proto_ItemInfo::kNItemNumFieldNumber;
#endif  // !_MSC_VER

proto_ItemInfo::proto_ItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_ItemInfo::InitAsDefaultInstance() {
}

proto_ItemInfo::proto_ItemInfo(const proto_ItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_ItemInfo::SharedCtor() {
  _cached_size_ = 0;
  nitemindex_ = 0;
  nitemnum_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_ItemInfo::~proto_ItemInfo() {
  SharedDtor();
}

void proto_ItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_ItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_ItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_ItemInfo_descriptor_;
}

const proto_ItemInfo& proto_ItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_ItemInfo* proto_ItemInfo::default_instance_ = NULL;

proto_ItemInfo* proto_ItemInfo::New() const {
  return new proto_ItemInfo;
}

void proto_ItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nitemindex_ = 0;
    nitemnum_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_ItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nItemIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nitemindex_)));
          set_has_nitemindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nItemNum;
        break;
      }

      // required int64 nItemNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nItemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nitemnum_)));
          set_has_nitemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_ItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nItemIndex = 1;
  if (has_nitemindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nitemindex(), output);
  }

  // required int64 nItemNum = 2;
  if (has_nitemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->nitemnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_ItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nItemIndex = 1;
  if (has_nitemindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nitemindex(), target);
  }

  // required int64 nItemNum = 2;
  if (has_nitemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->nitemnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_ItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nItemIndex = 1;
    if (has_nitemindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nitemindex());
    }

    // required int64 nItemNum = 2;
    if (has_nitemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nitemnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_ItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_ItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_ItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_ItemInfo::MergeFrom(const proto_ItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nitemindex()) {
      set_nitemindex(from.nitemindex());
    }
    if (from.has_nitemnum()) {
      set_nitemnum(from.nitemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_ItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_ItemInfo::CopyFrom(const proto_ItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_ItemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void proto_ItemInfo::Swap(proto_ItemInfo* other) {
  if (other != this) {
    std::swap(nitemindex_, other->nitemindex_);
    std::swap(nitemnum_, other->nitemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_ItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_ItemInfo_descriptor_;
  metadata.reflection = proto_ItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_player_itemInfo::kNItemIndexFieldNumber;
const int proto_player_itemInfo::kNItemNumFieldNumber;
const int proto_player_itemInfo::kNItemNum64FieldNumber;
#endif  // !_MSC_VER

proto_player_itemInfo::proto_player_itemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_player_itemInfo::InitAsDefaultInstance() {
}

proto_player_itemInfo::proto_player_itemInfo(const proto_player_itemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_player_itemInfo::SharedCtor() {
  _cached_size_ = 0;
  nitemindex_ = 0;
  nitemnum_ = 0;
  nitemnum64_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_player_itemInfo::~proto_player_itemInfo() {
  SharedDtor();
}

void proto_player_itemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_player_itemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_player_itemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_player_itemInfo_descriptor_;
}

const proto_player_itemInfo& proto_player_itemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_player_itemInfo* proto_player_itemInfo::default_instance_ = NULL;

proto_player_itemInfo* proto_player_itemInfo::New() const {
  return new proto_player_itemInfo;
}

void proto_player_itemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nitemindex_ = 0;
    nitemnum_ = 0;
    nitemnum64_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_player_itemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nItemIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nitemindex_)));
          set_has_nitemindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nItemNum;
        break;
      }

      // required int32 nItemNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nItemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nitemnum_)));
          set_has_nitemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nItemNum64;
        break;
      }

      // required int64 nItemNum64 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nItemNum64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nitemnum64_)));
          set_has_nitemnum64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_player_itemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nItemIndex = 1;
  if (has_nitemindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nitemindex(), output);
  }

  // required int32 nItemNum = 2;
  if (has_nitemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nitemnum(), output);
  }

  // required int64 nItemNum64 = 3;
  if (has_nitemnum64()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->nitemnum64(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_player_itemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nItemIndex = 1;
  if (has_nitemindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nitemindex(), target);
  }

  // required int32 nItemNum = 2;
  if (has_nitemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nitemnum(), target);
  }

  // required int64 nItemNum64 = 3;
  if (has_nitemnum64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->nitemnum64(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_player_itemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nItemIndex = 1;
    if (has_nitemindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nitemindex());
    }

    // required int32 nItemNum = 2;
    if (has_nitemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nitemnum());
    }

    // required int64 nItemNum64 = 3;
    if (has_nitemnum64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nitemnum64());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_player_itemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_player_itemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_player_itemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_player_itemInfo::MergeFrom(const proto_player_itemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nitemindex()) {
      set_nitemindex(from.nitemindex());
    }
    if (from.has_nitemnum()) {
      set_nitemnum(from.nitemnum());
    }
    if (from.has_nitemnum64()) {
      set_nitemnum64(from.nitemnum64());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_player_itemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_player_itemInfo::CopyFrom(const proto_player_itemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_player_itemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void proto_player_itemInfo::Swap(proto_player_itemInfo* other) {
  if (other != this) {
    std::swap(nitemindex_, other->nitemindex_);
    std::swap(nitemnum_, other->nitemnum_);
    std::swap(nitemnum64_, other->nitemnum64_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_player_itemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_player_itemInfo_descriptor_;
  metadata.reflection = proto_player_itemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_cg_get_redpackets_88yuan_award_req::kTypeFieldNumber;
#endif  // !_MSC_VER

proto_cg_get_redpackets_88yuan_award_req::proto_cg_get_redpackets_88yuan_award_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_cg_get_redpackets_88yuan_award_req::InitAsDefaultInstance() {
}

proto_cg_get_redpackets_88yuan_award_req::proto_cg_get_redpackets_88yuan_award_req(const proto_cg_get_redpackets_88yuan_award_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_cg_get_redpackets_88yuan_award_req::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_cg_get_redpackets_88yuan_award_req::~proto_cg_get_redpackets_88yuan_award_req() {
  SharedDtor();
}

void proto_cg_get_redpackets_88yuan_award_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_cg_get_redpackets_88yuan_award_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_cg_get_redpackets_88yuan_award_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_cg_get_redpackets_88yuan_award_req_descriptor_;
}

const proto_cg_get_redpackets_88yuan_award_req& proto_cg_get_redpackets_88yuan_award_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_cg_get_redpackets_88yuan_award_req* proto_cg_get_redpackets_88yuan_award_req::default_instance_ = NULL;

proto_cg_get_redpackets_88yuan_award_req* proto_cg_get_redpackets_88yuan_award_req::New() const {
  return new proto_cg_get_redpackets_88yuan_award_req;
}

void proto_cg_get_redpackets_88yuan_award_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_cg_get_redpackets_88yuan_award_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_cg_get_redpackets_88yuan_award_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_cg_get_redpackets_88yuan_award_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_cg_get_redpackets_88yuan_award_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_cg_get_redpackets_88yuan_award_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_cg_get_redpackets_88yuan_award_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_cg_get_redpackets_88yuan_award_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_cg_get_redpackets_88yuan_award_req::MergeFrom(const proto_cg_get_redpackets_88yuan_award_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_cg_get_redpackets_88yuan_award_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_cg_get_redpackets_88yuan_award_req::CopyFrom(const proto_cg_get_redpackets_88yuan_award_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_cg_get_redpackets_88yuan_award_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void proto_cg_get_redpackets_88yuan_award_req::Swap(proto_cg_get_redpackets_88yuan_award_req* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_cg_get_redpackets_88yuan_award_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_cg_get_redpackets_88yuan_award_req_descriptor_;
  metadata.reflection = proto_cg_get_redpackets_88yuan_award_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_starsky_update_item_noti::kStaminaFieldNumber;
const int proto_gc_starsky_update_item_noti::kMatchTicketFieldNumber;
const int proto_gc_starsky_update_item_noti::kScoreFieldNumber;
const int proto_gc_starsky_update_item_noti::kSavestarCardFieldNumber;
#endif  // !_MSC_VER

proto_gc_starsky_update_item_noti::proto_gc_starsky_update_item_noti()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_starsky_update_item_noti::InitAsDefaultInstance() {
}

proto_gc_starsky_update_item_noti::proto_gc_starsky_update_item_noti(const proto_gc_starsky_update_item_noti& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_starsky_update_item_noti::SharedCtor() {
  _cached_size_ = 0;
  stamina_ = 0;
  match_ticket_ = 0;
  score_ = 0;
  savestar_card_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_starsky_update_item_noti::~proto_gc_starsky_update_item_noti() {
  SharedDtor();
}

void proto_gc_starsky_update_item_noti::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_starsky_update_item_noti::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_starsky_update_item_noti::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_starsky_update_item_noti_descriptor_;
}

const proto_gc_starsky_update_item_noti& proto_gc_starsky_update_item_noti::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_starsky_update_item_noti* proto_gc_starsky_update_item_noti::default_instance_ = NULL;

proto_gc_starsky_update_item_noti* proto_gc_starsky_update_item_noti::New() const {
  return new proto_gc_starsky_update_item_noti;
}

void proto_gc_starsky_update_item_noti::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stamina_ = 0;
    match_ticket_ = 0;
    score_ = 0;
    savestar_card_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_starsky_update_item_noti::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 stamina = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stamina_)));
          set_has_stamina();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_match_ticket;
        break;
      }

      // required int32 match_ticket = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_ticket_)));
          set_has_match_ticket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // required int32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_savestar_card;
        break;
      }

      // required int32 savestar_card = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_savestar_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &savestar_card_)));
          set_has_savestar_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_starsky_update_item_noti::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 stamina = 1;
  if (has_stamina()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stamina(), output);
  }

  // required int32 match_ticket = 2;
  if (has_match_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->match_ticket(), output);
  }

  // required int32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  // required int32 savestar_card = 4;
  if (has_savestar_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->savestar_card(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_starsky_update_item_noti::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 stamina = 1;
  if (has_stamina()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stamina(), target);
  }

  // required int32 match_ticket = 2;
  if (has_match_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->match_ticket(), target);
  }

  // required int32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score(), target);
  }

  // required int32 savestar_card = 4;
  if (has_savestar_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->savestar_card(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_starsky_update_item_noti::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 stamina = 1;
    if (has_stamina()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stamina());
    }

    // required int32 match_ticket = 2;
    if (has_match_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_ticket());
    }

    // required int32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // required int32 savestar_card = 4;
    if (has_savestar_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->savestar_card());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_starsky_update_item_noti::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_starsky_update_item_noti* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_starsky_update_item_noti*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_starsky_update_item_noti::MergeFrom(const proto_gc_starsky_update_item_noti& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stamina()) {
      set_stamina(from.stamina());
    }
    if (from.has_match_ticket()) {
      set_match_ticket(from.match_ticket());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_savestar_card()) {
      set_savestar_card(from.savestar_card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_starsky_update_item_noti::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_starsky_update_item_noti::CopyFrom(const proto_gc_starsky_update_item_noti& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_starsky_update_item_noti::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void proto_gc_starsky_update_item_noti::Swap(proto_gc_starsky_update_item_noti* other) {
  if (other != this) {
    std::swap(stamina_, other->stamina_);
    std::swap(match_ticket_, other->match_ticket_);
    std::swap(score_, other->score_);
    std::swap(savestar_card_, other->savestar_card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_starsky_update_item_noti::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_starsky_update_item_noti_descriptor_;
  metadata.reflection = proto_gc_starsky_update_item_noti_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

proto_cg_look_lord_card_item_req::proto_cg_look_lord_card_item_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_cg_look_lord_card_item_req::InitAsDefaultInstance() {
}

proto_cg_look_lord_card_item_req::proto_cg_look_lord_card_item_req(const proto_cg_look_lord_card_item_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_cg_look_lord_card_item_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_cg_look_lord_card_item_req::~proto_cg_look_lord_card_item_req() {
  SharedDtor();
}

void proto_cg_look_lord_card_item_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_cg_look_lord_card_item_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_cg_look_lord_card_item_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_cg_look_lord_card_item_req_descriptor_;
}

const proto_cg_look_lord_card_item_req& proto_cg_look_lord_card_item_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_cg_look_lord_card_item_req* proto_cg_look_lord_card_item_req::default_instance_ = NULL;

proto_cg_look_lord_card_item_req* proto_cg_look_lord_card_item_req::New() const {
  return new proto_cg_look_lord_card_item_req;
}

void proto_cg_look_lord_card_item_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_cg_look_lord_card_item_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void proto_cg_look_lord_card_item_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_cg_look_lord_card_item_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_cg_look_lord_card_item_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_cg_look_lord_card_item_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_cg_look_lord_card_item_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_cg_look_lord_card_item_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_cg_look_lord_card_item_req::MergeFrom(const proto_cg_look_lord_card_item_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_cg_look_lord_card_item_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_cg_look_lord_card_item_req::CopyFrom(const proto_cg_look_lord_card_item_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_cg_look_lord_card_item_req::IsInitialized() const {

  return true;
}

void proto_cg_look_lord_card_item_req::Swap(proto_cg_look_lord_card_item_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_cg_look_lord_card_item_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_cg_look_lord_card_item_req_descriptor_;
  metadata.reflection = proto_cg_look_lord_card_item_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_cg_get_redpackets_award_req::kTypeFieldNumber;
#endif  // !_MSC_VER

proto_cg_get_redpackets_award_req::proto_cg_get_redpackets_award_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_cg_get_redpackets_award_req::InitAsDefaultInstance() {
}

proto_cg_get_redpackets_award_req::proto_cg_get_redpackets_award_req(const proto_cg_get_redpackets_award_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_cg_get_redpackets_award_req::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_cg_get_redpackets_award_req::~proto_cg_get_redpackets_award_req() {
  SharedDtor();
}

void proto_cg_get_redpackets_award_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_cg_get_redpackets_award_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_cg_get_redpackets_award_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_cg_get_redpackets_award_req_descriptor_;
}

const proto_cg_get_redpackets_award_req& proto_cg_get_redpackets_award_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_cg_get_redpackets_award_req* proto_cg_get_redpackets_award_req::default_instance_ = NULL;

proto_cg_get_redpackets_award_req* proto_cg_get_redpackets_award_req::New() const {
  return new proto_cg_get_redpackets_award_req;
}

void proto_cg_get_redpackets_award_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_cg_get_redpackets_award_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_cg_get_redpackets_award_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_cg_get_redpackets_award_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_cg_get_redpackets_award_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_cg_get_redpackets_award_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_cg_get_redpackets_award_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_cg_get_redpackets_award_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_cg_get_redpackets_award_req::MergeFrom(const proto_cg_get_redpackets_award_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_cg_get_redpackets_award_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_cg_get_redpackets_award_req::CopyFrom(const proto_cg_get_redpackets_award_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_cg_get_redpackets_award_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void proto_cg_get_redpackets_award_req::Swap(proto_cg_get_redpackets_award_req* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_cg_get_redpackets_award_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_cg_get_redpackets_award_req_descriptor_;
  metadata.reflection = proto_cg_get_redpackets_award_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_send_dizhu_not::kNGameMoneyFieldNumber;
#endif  // !_MSC_VER

proto_gc_send_dizhu_not::proto_gc_send_dizhu_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_send_dizhu_not::InitAsDefaultInstance() {
}

proto_gc_send_dizhu_not::proto_gc_send_dizhu_not(const proto_gc_send_dizhu_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_send_dizhu_not::SharedCtor() {
  _cached_size_ = 0;
  ngamemoney_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_send_dizhu_not::~proto_gc_send_dizhu_not() {
  SharedDtor();
}

void proto_gc_send_dizhu_not::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_send_dizhu_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_send_dizhu_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_send_dizhu_not_descriptor_;
}

const proto_gc_send_dizhu_not& proto_gc_send_dizhu_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_send_dizhu_not* proto_gc_send_dizhu_not::default_instance_ = NULL;

proto_gc_send_dizhu_not* proto_gc_send_dizhu_not::New() const {
  return new proto_gc_send_dizhu_not;
}

void proto_gc_send_dizhu_not::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ngamemoney_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_send_dizhu_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nGameMoney = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ngamemoney_)));
          set_has_ngamemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_send_dizhu_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nGameMoney = 1;
  if (has_ngamemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ngamemoney(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_send_dizhu_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nGameMoney = 1;
  if (has_ngamemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ngamemoney(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_send_dizhu_not::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nGameMoney = 1;
    if (has_ngamemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ngamemoney());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_send_dizhu_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_send_dizhu_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_send_dizhu_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_send_dizhu_not::MergeFrom(const proto_gc_send_dizhu_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ngamemoney()) {
      set_ngamemoney(from.ngamemoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_send_dizhu_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_send_dizhu_not::CopyFrom(const proto_gc_send_dizhu_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_send_dizhu_not::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void proto_gc_send_dizhu_not::Swap(proto_gc_send_dizhu_not* other) {
  if (other != this) {
    std::swap(ngamemoney_, other->ngamemoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_send_dizhu_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_send_dizhu_not_descriptor_;
  metadata.reflection = proto_gc_send_dizhu_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

proto_cg_complete_data_req::proto_cg_complete_data_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_cg_complete_data_req::InitAsDefaultInstance() {
}

proto_cg_complete_data_req::proto_cg_complete_data_req(const proto_cg_complete_data_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_cg_complete_data_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_cg_complete_data_req::~proto_cg_complete_data_req() {
  SharedDtor();
}

void proto_cg_complete_data_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_cg_complete_data_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_cg_complete_data_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_cg_complete_data_req_descriptor_;
}

const proto_cg_complete_data_req& proto_cg_complete_data_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_cg_complete_data_req* proto_cg_complete_data_req::default_instance_ = NULL;

proto_cg_complete_data_req* proto_cg_complete_data_req::New() const {
  return new proto_cg_complete_data_req;
}

void proto_cg_complete_data_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_cg_complete_data_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void proto_cg_complete_data_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_cg_complete_data_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_cg_complete_data_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_cg_complete_data_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_cg_complete_data_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_cg_complete_data_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_cg_complete_data_req::MergeFrom(const proto_cg_complete_data_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_cg_complete_data_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_cg_complete_data_req::CopyFrom(const proto_cg_complete_data_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_cg_complete_data_req::IsInitialized() const {

  return true;
}

void proto_cg_complete_data_req::Swap(proto_cg_complete_data_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_cg_complete_data_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_cg_complete_data_req_descriptor_;
  metadata.reflection = proto_cg_complete_data_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_sic_bet_update_ack::kNBetUpdateAckTagFieldNumber;
const int proto_sic_bet_update_ack::kVecAmountCellFieldNumber;
#endif  // !_MSC_VER

proto_sic_bet_update_ack::proto_sic_bet_update_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_sic_bet_update_ack::InitAsDefaultInstance() {
}

proto_sic_bet_update_ack::proto_sic_bet_update_ack(const proto_sic_bet_update_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_sic_bet_update_ack::SharedCtor() {
  _cached_size_ = 0;
  nbetupdateacktag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_sic_bet_update_ack::~proto_sic_bet_update_ack() {
  SharedDtor();
}

void proto_sic_bet_update_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_sic_bet_update_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_sic_bet_update_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_sic_bet_update_ack_descriptor_;
}

const proto_sic_bet_update_ack& proto_sic_bet_update_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_sic_bet_update_ack* proto_sic_bet_update_ack::default_instance_ = NULL;

proto_sic_bet_update_ack* proto_sic_bet_update_ack::New() const {
  return new proto_sic_bet_update_ack;
}

void proto_sic_bet_update_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nbetupdateacktag_ = 0;
  }
  vecamountcell_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_sic_bet_update_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nBetUpdateAckTag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nbetupdateacktag_)));
          set_has_nbetupdateacktag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vecAmountCell;
        break;
      }

      // repeated .proto_st_sic_cell vecAmountCell = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecAmountCell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vecamountcell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vecAmountCell;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_sic_bet_update_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nBetUpdateAckTag = 1;
  if (has_nbetupdateacktag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nbetupdateacktag(), output);
  }

  // repeated .proto_st_sic_cell vecAmountCell = 2;
  for (int i = 0; i < this->vecamountcell_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vecamountcell(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_sic_bet_update_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nBetUpdateAckTag = 1;
  if (has_nbetupdateacktag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nbetupdateacktag(), target);
  }

  // repeated .proto_st_sic_cell vecAmountCell = 2;
  for (int i = 0; i < this->vecamountcell_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vecamountcell(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_sic_bet_update_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nBetUpdateAckTag = 1;
    if (has_nbetupdateacktag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbetupdateacktag());
    }

  }
  // repeated .proto_st_sic_cell vecAmountCell = 2;
  total_size += 1 * this->vecamountcell_size();
  for (int i = 0; i < this->vecamountcell_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vecamountcell(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_sic_bet_update_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_sic_bet_update_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_sic_bet_update_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_sic_bet_update_ack::MergeFrom(const proto_sic_bet_update_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  vecamountcell_.MergeFrom(from.vecamountcell_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nbetupdateacktag()) {
      set_nbetupdateacktag(from.nbetupdateacktag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_sic_bet_update_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_sic_bet_update_ack::CopyFrom(const proto_sic_bet_update_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_sic_bet_update_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < vecamountcell_size(); i++) {
    if (!this->vecamountcell(i).IsInitialized()) return false;
  }
  return true;
}

void proto_sic_bet_update_ack::Swap(proto_sic_bet_update_ack* other) {
  if (other != this) {
    std::swap(nbetupdateacktag_, other->nbetupdateacktag_);
    vecamountcell_.Swap(&other->vecamountcell_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_sic_bet_update_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_sic_bet_update_ack_descriptor_;
  metadata.reflection = proto_sic_bet_update_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_item_add_not::kNItemIndexFieldNumber;
const int proto_gc_item_add_not::kNItemCountFieldNumber;
#endif  // !_MSC_VER

proto_gc_item_add_not::proto_gc_item_add_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_item_add_not::InitAsDefaultInstance() {
}

proto_gc_item_add_not::proto_gc_item_add_not(const proto_gc_item_add_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_item_add_not::SharedCtor() {
  _cached_size_ = 0;
  nitemindex_ = 0;
  nitemcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_item_add_not::~proto_gc_item_add_not() {
  SharedDtor();
}

void proto_gc_item_add_not::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_item_add_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_item_add_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_item_add_not_descriptor_;
}

const proto_gc_item_add_not& proto_gc_item_add_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_item_add_not* proto_gc_item_add_not::default_instance_ = NULL;

proto_gc_item_add_not* proto_gc_item_add_not::New() const {
  return new proto_gc_item_add_not;
}

void proto_gc_item_add_not::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nitemindex_ = 0;
    nitemcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_item_add_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nItemIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nitemindex_)));
          set_has_nitemindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nItemCount;
        break;
      }

      // required int32 nItemCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nItemCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nitemcount_)));
          set_has_nitemcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_item_add_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nItemIndex = 1;
  if (has_nitemindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nitemindex(), output);
  }

  // required int32 nItemCount = 2;
  if (has_nitemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nitemcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_item_add_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nItemIndex = 1;
  if (has_nitemindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nitemindex(), target);
  }

  // required int32 nItemCount = 2;
  if (has_nitemcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nitemcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_item_add_not::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nItemIndex = 1;
    if (has_nitemindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nitemindex());
    }

    // required int32 nItemCount = 2;
    if (has_nitemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nitemcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_item_add_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_item_add_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_item_add_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_item_add_not::MergeFrom(const proto_gc_item_add_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nitemindex()) {
      set_nitemindex(from.nitemindex());
    }
    if (from.has_nitemcount()) {
      set_nitemcount(from.nitemcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_item_add_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_item_add_not::CopyFrom(const proto_gc_item_add_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_item_add_not::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void proto_gc_item_add_not::Swap(proto_gc_item_add_not* other) {
  if (other != this) {
    std::swap(nitemindex_, other->nitemindex_);
    std::swap(nitemcount_, other->nitemcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_item_add_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_item_add_not_descriptor_;
  metadata.reflection = proto_gc_item_add_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_bet_lord_card_ack::kRetFieldNumber;
const int proto_gc_bet_lord_card_ack::kIndexFieldNumber;
#endif  // !_MSC_VER

proto_gc_bet_lord_card_ack::proto_gc_bet_lord_card_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_bet_lord_card_ack::InitAsDefaultInstance() {
}

proto_gc_bet_lord_card_ack::proto_gc_bet_lord_card_ack(const proto_gc_bet_lord_card_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_bet_lord_card_ack::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_bet_lord_card_ack::~proto_gc_bet_lord_card_ack() {
  SharedDtor();
}

void proto_gc_bet_lord_card_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_bet_lord_card_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_bet_lord_card_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_bet_lord_card_ack_descriptor_;
}

const proto_gc_bet_lord_card_ack& proto_gc_bet_lord_card_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_bet_lord_card_ack* proto_gc_bet_lord_card_ack::default_instance_ = NULL;

proto_gc_bet_lord_card_ack* proto_gc_bet_lord_card_ack::New() const {
  return new proto_gc_bet_lord_card_ack;
}

void proto_gc_bet_lord_card_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_bet_lord_card_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_bet_lord_card_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_bet_lord_card_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_bet_lord_card_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_bet_lord_card_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_bet_lord_card_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_bet_lord_card_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_bet_lord_card_ack::MergeFrom(const proto_gc_bet_lord_card_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_bet_lord_card_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_bet_lord_card_ack::CopyFrom(const proto_gc_bet_lord_card_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_bet_lord_card_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void proto_gc_bet_lord_card_ack::Swap(proto_gc_bet_lord_card_ack* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_bet_lord_card_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_bet_lord_card_ack_descriptor_;
  metadata.reflection = proto_gc_bet_lord_card_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_replay_data_not::kVecChangeCardsFieldNumber;
#endif  // !_MSC_VER

proto_gc_replay_data_not::proto_gc_replay_data_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_replay_data_not::InitAsDefaultInstance() {
}

proto_gc_replay_data_not::proto_gc_replay_data_not(const proto_gc_replay_data_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_replay_data_not::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_replay_data_not::~proto_gc_replay_data_not() {
  SharedDtor();
}

void proto_gc_replay_data_not::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_replay_data_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_replay_data_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_replay_data_not_descriptor_;
}

const proto_gc_replay_data_not& proto_gc_replay_data_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_replay_data_not* proto_gc_replay_data_not::default_instance_ = NULL;

proto_gc_replay_data_not* proto_gc_replay_data_not::New() const {
  return new proto_gc_replay_data_not;
}

void proto_gc_replay_data_not::Clear() {
  vecchangecards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_replay_data_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_gc_refresh_card_not vecChangeCards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecChangeCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vecchangecards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_vecChangeCards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_replay_data_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_gc_refresh_card_not vecChangeCards = 1;
  for (int i = 0; i < this->vecchangecards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vecchangecards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_replay_data_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_gc_refresh_card_not vecChangeCards = 1;
  for (int i = 0; i < this->vecchangecards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->vecchangecards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_replay_data_not::ByteSize() const {
  int total_size = 0;

  // repeated .proto_gc_refresh_card_not vecChangeCards = 1;
  total_size += 1 * this->vecchangecards_size();
  for (int i = 0; i < this->vecchangecards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vecchangecards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_replay_data_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_replay_data_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_replay_data_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_replay_data_not::MergeFrom(const proto_gc_replay_data_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  vecchangecards_.MergeFrom(from.vecchangecards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_replay_data_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_replay_data_not::CopyFrom(const proto_gc_replay_data_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_replay_data_not::IsInitialized() const {

  for (int i = 0; i < vecchangecards_size(); i++) {
    if (!this->vecchangecards(i).IsInitialized()) return false;
  }
  return true;
}

void proto_gc_replay_data_not::Swap(proto_gc_replay_data_not* other) {
  if (other != this) {
    vecchangecards_.Swap(&other->vecchangecards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_replay_data_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_replay_data_not_descriptor_;
  metadata.reflection = proto_gc_replay_data_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_ju_count_not::kNJuCountFieldNumber;
#endif  // !_MSC_VER

proto_gc_ju_count_not::proto_gc_ju_count_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_ju_count_not::InitAsDefaultInstance() {
}

proto_gc_ju_count_not::proto_gc_ju_count_not(const proto_gc_ju_count_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_ju_count_not::SharedCtor() {
  _cached_size_ = 0;
  njucount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_ju_count_not::~proto_gc_ju_count_not() {
  SharedDtor();
}

void proto_gc_ju_count_not::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_ju_count_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_ju_count_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_ju_count_not_descriptor_;
}

const proto_gc_ju_count_not& proto_gc_ju_count_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_ju_count_not* proto_gc_ju_count_not::default_instance_ = NULL;

proto_gc_ju_count_not* proto_gc_ju_count_not::New() const {
  return new proto_gc_ju_count_not;
}

void proto_gc_ju_count_not::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    njucount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_ju_count_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nJuCount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &njucount_)));
          set_has_njucount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_ju_count_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nJuCount = 1;
  if (has_njucount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->njucount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_ju_count_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nJuCount = 1;
  if (has_njucount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->njucount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_ju_count_not::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nJuCount = 1;
    if (has_njucount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->njucount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_ju_count_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_ju_count_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_ju_count_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_ju_count_not::MergeFrom(const proto_gc_ju_count_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_njucount()) {
      set_njucount(from.njucount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_ju_count_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_ju_count_not::CopyFrom(const proto_gc_ju_count_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_ju_count_not::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void proto_gc_ju_count_not::Swap(proto_gc_ju_count_not* other) {
  if (other != this) {
    std::swap(njucount_, other->njucount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_ju_count_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_ju_count_not_descriptor_;
  metadata.reflection = proto_gc_ju_count_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

proto_gc_had_start_not::proto_gc_had_start_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_had_start_not::InitAsDefaultInstance() {
}

proto_gc_had_start_not::proto_gc_had_start_not(const proto_gc_had_start_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_had_start_not::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_had_start_not::~proto_gc_had_start_not() {
  SharedDtor();
}

void proto_gc_had_start_not::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_had_start_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_had_start_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_had_start_not_descriptor_;
}

const proto_gc_had_start_not& proto_gc_had_start_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_had_start_not* proto_gc_had_start_not::default_instance_ = NULL;

proto_gc_had_start_not* proto_gc_had_start_not::New() const {
  return new proto_gc_had_start_not;
}

void proto_gc_had_start_not::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_had_start_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void proto_gc_had_start_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_had_start_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_had_start_not::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_had_start_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_had_start_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_had_start_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_had_start_not::MergeFrom(const proto_gc_had_start_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_had_start_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_had_start_not::CopyFrom(const proto_gc_had_start_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_had_start_not::IsInitialized() const {

  return true;
}

void proto_gc_had_start_not::Swap(proto_gc_had_start_not* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_had_start_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_had_start_not_descriptor_;
  metadata.reflection = proto_gc_had_start_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_double_score_not::kNDoubleFieldNumber;
const int proto_gc_double_score_not::kNSerialIDFieldNumber;
const int proto_gc_double_score_not::kCChairIDFieldNumber;
#endif  // !_MSC_VER

proto_gc_double_score_not::proto_gc_double_score_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_double_score_not::InitAsDefaultInstance() {
}

proto_gc_double_score_not::proto_gc_double_score_not(const proto_gc_double_score_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_double_score_not::SharedCtor() {
  _cached_size_ = 0;
  ndouble_ = 0;
  nserialid_ = 0;
  cchairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_double_score_not::~proto_gc_double_score_not() {
  SharedDtor();
}

void proto_gc_double_score_not::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_double_score_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_double_score_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_double_score_not_descriptor_;
}

const proto_gc_double_score_not& proto_gc_double_score_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_double_score_not* proto_gc_double_score_not::default_instance_ = NULL;

proto_gc_double_score_not* proto_gc_double_score_not::New() const {
  return new proto_gc_double_score_not;
}

void proto_gc_double_score_not::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ndouble_ = 0;
    nserialid_ = 0;
    cchairid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_double_score_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nDouble = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ndouble_)));
          set_has_ndouble();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nSerialID;
        break;
      }

      // required int32 nSerialID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nSerialID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nserialid_)));
          set_has_nserialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cChairID;
        break;
      }

      // required int32 cChairID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cChairID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cchairid_)));
          set_has_cchairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_double_score_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nDouble = 1;
  if (has_ndouble()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ndouble(), output);
  }

  // required int32 nSerialID = 2;
  if (has_nserialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nserialid(), output);
  }

  // required int32 cChairID = 3;
  if (has_cchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cchairid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_double_score_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nDouble = 1;
  if (has_ndouble()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ndouble(), target);
  }

  // required int32 nSerialID = 2;
  if (has_nserialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nserialid(), target);
  }

  // required int32 cChairID = 3;
  if (has_cchairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cchairid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_double_score_not::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nDouble = 1;
    if (has_ndouble()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ndouble());
    }

    // required int32 nSerialID = 2;
    if (has_nserialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nserialid());
    }

    // required int32 cChairID = 3;
    if (has_cchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cchairid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_double_score_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_double_score_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_double_score_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_double_score_not::MergeFrom(const proto_gc_double_score_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ndouble()) {
      set_ndouble(from.ndouble());
    }
    if (from.has_nserialid()) {
      set_nserialid(from.nserialid());
    }
    if (from.has_cchairid()) {
      set_cchairid(from.cchairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_double_score_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_double_score_not::CopyFrom(const proto_gc_double_score_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_double_score_not::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void proto_gc_double_score_not::Swap(proto_gc_double_score_not* other) {
  if (other != this) {
    std::swap(ndouble_, other->ndouble_);
    std::swap(nserialid_, other->nserialid_);
    std::swap(cchairid_, other->cchairid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_double_score_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_double_score_not_descriptor_;
  metadata.reflection = proto_gc_double_score_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

proto_sic_new_round_not::proto_sic_new_round_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_sic_new_round_not::InitAsDefaultInstance() {
}

proto_sic_new_round_not::proto_sic_new_round_not(const proto_sic_new_round_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_sic_new_round_not::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_sic_new_round_not::~proto_sic_new_round_not() {
  SharedDtor();
}

void proto_sic_new_round_not::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_sic_new_round_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_sic_new_round_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_sic_new_round_not_descriptor_;
}

const proto_sic_new_round_not& proto_sic_new_round_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_sic_new_round_not* proto_sic_new_round_not::default_instance_ = NULL;

proto_sic_new_round_not* proto_sic_new_round_not::New() const {
  return new proto_sic_new_round_not;
}

void proto_sic_new_round_not::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_sic_new_round_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void proto_sic_new_round_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_sic_new_round_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_sic_new_round_not::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_sic_new_round_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_sic_new_round_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_sic_new_round_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_sic_new_round_not::MergeFrom(const proto_sic_new_round_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_sic_new_round_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_sic_new_round_not::CopyFrom(const proto_sic_new_round_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_sic_new_round_not::IsInitialized() const {

  return true;
}

void proto_sic_new_round_not::Swap(proto_sic_new_round_not* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_sic_new_round_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_sic_new_round_not_descriptor_;
  metadata.reflection = proto_sic_new_round_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_pause_game_not::kNFlagFieldNumber;
const int proto_gc_pause_game_not::kNMinTimeFieldNumber;
const int proto_gc_pause_game_not::kNSecTimeFieldNumber;
const int proto_gc_pause_game_not::kCChairIdFieldNumber;
const int proto_gc_pause_game_not::kSNickNameFieldNumber;
#endif  // !_MSC_VER

proto_gc_pause_game_not::proto_gc_pause_game_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_pause_game_not::InitAsDefaultInstance() {
}

proto_gc_pause_game_not::proto_gc_pause_game_not(const proto_gc_pause_game_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_pause_game_not::SharedCtor() {
  _cached_size_ = 0;
  nflag_ = 0;
  nmintime_ = 0;
  nsectime_ = 0;
  cchairid_ = 0;
  snickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_pause_game_not::~proto_gc_pause_game_not() {
  SharedDtor();
}

void proto_gc_pause_game_not::SharedDtor() {
  if (snickname_ != &::google::protobuf::internal::kEmptyString) {
    delete snickname_;
  }
  if (this != default_instance_) {
  }
}

void proto_gc_pause_game_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_pause_game_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_pause_game_not_descriptor_;
}

const proto_gc_pause_game_not& proto_gc_pause_game_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_pause_game_not* proto_gc_pause_game_not::default_instance_ = NULL;

proto_gc_pause_game_not* proto_gc_pause_game_not::New() const {
  return new proto_gc_pause_game_not;
}

void proto_gc_pause_game_not::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nflag_ = 0;
    nmintime_ = 0;
    nsectime_ = 0;
    cchairid_ = 0;
    if (has_snickname()) {
      if (snickname_ != &::google::protobuf::internal::kEmptyString) {
        snickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_pause_game_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nFlag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nflag_)));
          set_has_nflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nMinTime;
        break;
      }

      // required int32 nMinTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nMinTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nmintime_)));
          set_has_nmintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nSecTime;
        break;
      }

      // required int32 nSecTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nSecTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nsectime_)));
          set_has_nsectime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cChairId;
        break;
      }

      // required int32 cChairId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cChairId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cchairid_)));
          set_has_cchairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sNickName;
        break;
      }

      // required string sNickName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->snickname().data(), this->snickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_pause_game_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nFlag = 1;
  if (has_nflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nflag(), output);
  }

  // required int32 nMinTime = 2;
  if (has_nmintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nmintime(), output);
  }

  // required int32 nSecTime = 3;
  if (has_nsectime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nsectime(), output);
  }

  // required int32 cChairId = 4;
  if (has_cchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cchairid(), output);
  }

  // required string sNickName = 5;
  if (has_snickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snickname().data(), this->snickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->snickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_pause_game_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nFlag = 1;
  if (has_nflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nflag(), target);
  }

  // required int32 nMinTime = 2;
  if (has_nmintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nmintime(), target);
  }

  // required int32 nSecTime = 3;
  if (has_nsectime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nsectime(), target);
  }

  // required int32 cChairId = 4;
  if (has_cchairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cchairid(), target);
  }

  // required string sNickName = 5;
  if (has_snickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snickname().data(), this->snickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->snickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_pause_game_not::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nFlag = 1;
    if (has_nflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nflag());
    }

    // required int32 nMinTime = 2;
    if (has_nmintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nmintime());
    }

    // required int32 nSecTime = 3;
    if (has_nsectime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nsectime());
    }

    // required int32 cChairId = 4;
    if (has_cchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cchairid());
    }

    // required string sNickName = 5;
    if (has_snickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_pause_game_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_pause_game_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_pause_game_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_pause_game_not::MergeFrom(const proto_gc_pause_game_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nflag()) {
      set_nflag(from.nflag());
    }
    if (from.has_nmintime()) {
      set_nmintime(from.nmintime());
    }
    if (from.has_nsectime()) {
      set_nsectime(from.nsectime());
    }
    if (from.has_cchairid()) {
      set_cchairid(from.cchairid());
    }
    if (from.has_snickname()) {
      set_snickname(from.snickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_pause_game_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_pause_game_not::CopyFrom(const proto_gc_pause_game_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_pause_game_not::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void proto_gc_pause_game_not::Swap(proto_gc_pause_game_not* other) {
  if (other != this) {
    std::swap(nflag_, other->nflag_);
    std::swap(nmintime_, other->nmintime_);
    std::swap(nsectime_, other->nsectime_);
    std::swap(cchairid_, other->cchairid_);
    std::swap(snickname_, other->snickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_pause_game_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_pause_game_not_descriptor_;
  metadata.reflection = proto_gc_pause_game_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_private_room_result_not::kRetFieldNumber;
const int proto_gc_private_room_result_not::kVecGameStatiscsFieldNumber;
#endif  // !_MSC_VER

proto_gc_private_room_result_not::proto_gc_private_room_result_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_private_room_result_not::InitAsDefaultInstance() {
}

proto_gc_private_room_result_not::proto_gc_private_room_result_not(const proto_gc_private_room_result_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_private_room_result_not::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_private_room_result_not::~proto_gc_private_room_result_not() {
  SharedDtor();
}

void proto_gc_private_room_result_not::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_private_room_result_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_private_room_result_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_private_room_result_not_descriptor_;
}

const proto_gc_private_room_result_not& proto_gc_private_room_result_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_private_room_result_not* proto_gc_private_room_result_not::default_instance_ = NULL;

proto_gc_private_room_result_not* proto_gc_private_room_result_not::New() const {
  return new proto_gc_private_room_result_not;
}

void proto_gc_private_room_result_not::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  vecgamestatiscs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_private_room_result_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vecGameStatiscs;
        break;
      }

      // repeated .proto_GameStatisc vecGameStatiscs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecGameStatiscs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vecgamestatiscs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vecGameStatiscs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_private_room_result_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated .proto_GameStatisc vecGameStatiscs = 2;
  for (int i = 0; i < this->vecgamestatiscs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vecgamestatiscs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_private_room_result_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated .proto_GameStatisc vecGameStatiscs = 2;
  for (int i = 0; i < this->vecgamestatiscs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vecgamestatiscs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_private_room_result_not::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated .proto_GameStatisc vecGameStatiscs = 2;
  total_size += 1 * this->vecgamestatiscs_size();
  for (int i = 0; i < this->vecgamestatiscs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vecgamestatiscs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_private_room_result_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_private_room_result_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_private_room_result_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_private_room_result_not::MergeFrom(const proto_gc_private_room_result_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  vecgamestatiscs_.MergeFrom(from.vecgamestatiscs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_private_room_result_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_private_room_result_not::CopyFrom(const proto_gc_private_room_result_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_private_room_result_not::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < vecgamestatiscs_size(); i++) {
    if (!this->vecgamestatiscs(i).IsInitialized()) return false;
  }
  return true;
}

void proto_gc_private_room_result_not::Swap(proto_gc_private_room_result_not* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    vecgamestatiscs_.Swap(&other->vecgamestatiscs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_private_room_result_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_private_room_result_not_descriptor_;
  metadata.reflection = proto_gc_private_room_result_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_st_sic_cell::kCCellIDFieldNumber;
const int proto_st_sic_cell::kNAmountFieldNumber;
#endif  // !_MSC_VER

proto_st_sic_cell::proto_st_sic_cell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_st_sic_cell::InitAsDefaultInstance() {
}

proto_st_sic_cell::proto_st_sic_cell(const proto_st_sic_cell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_st_sic_cell::SharedCtor() {
  _cached_size_ = 0;
  ccellid_ = 0;
  namount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_st_sic_cell::~proto_st_sic_cell() {
  SharedDtor();
}

void proto_st_sic_cell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_st_sic_cell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_st_sic_cell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_st_sic_cell_descriptor_;
}

const proto_st_sic_cell& proto_st_sic_cell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_st_sic_cell* proto_st_sic_cell::default_instance_ = NULL;

proto_st_sic_cell* proto_st_sic_cell::New() const {
  return new proto_st_sic_cell;
}

void proto_st_sic_cell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ccellid_ = 0;
    namount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_st_sic_cell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cCellID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ccellid_)));
          set_has_ccellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nAmount;
        break;
      }

      // required int32 nAmount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &namount_)));
          set_has_namount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_st_sic_cell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cCellID = 1;
  if (has_ccellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ccellid(), output);
  }

  // required int32 nAmount = 2;
  if (has_namount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->namount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_st_sic_cell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cCellID = 1;
  if (has_ccellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ccellid(), target);
  }

  // required int32 nAmount = 2;
  if (has_namount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->namount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_st_sic_cell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cCellID = 1;
    if (has_ccellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ccellid());
    }

    // required int32 nAmount = 2;
    if (has_namount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->namount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_st_sic_cell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_st_sic_cell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_st_sic_cell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_st_sic_cell::MergeFrom(const proto_st_sic_cell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ccellid()) {
      set_ccellid(from.ccellid());
    }
    if (from.has_namount()) {
      set_namount(from.namount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_st_sic_cell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_st_sic_cell::CopyFrom(const proto_st_sic_cell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_st_sic_cell::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void proto_st_sic_cell::Swap(proto_st_sic_cell* other) {
  if (other != this) {
    std::swap(ccellid_, other->ccellid_);
    std::swap(namount_, other->namount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_st_sic_cell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_st_sic_cell_descriptor_;
  metadata.reflection = proto_st_sic_cell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_play_card_not::kCChairIDFieldNumber;
const int proto_gc_play_card_not::kVecCardsFieldNumber;
const int proto_gc_play_card_not::kCTypeFieldNumber;
#endif  // !_MSC_VER

proto_gc_play_card_not::proto_gc_play_card_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_play_card_not::InitAsDefaultInstance() {
  ctype_ = const_cast< ::proto_CCardsType*>(&::proto_CCardsType::default_instance());
}

proto_gc_play_card_not::proto_gc_play_card_not(const proto_gc_play_card_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_play_card_not::SharedCtor() {
  _cached_size_ = 0;
  cchairid_ = 0;
  ctype_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_play_card_not::~proto_gc_play_card_not() {
  SharedDtor();
}

void proto_gc_play_card_not::SharedDtor() {
  if (this != default_instance_) {
    delete ctype_;
  }
}

void proto_gc_play_card_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_play_card_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_play_card_not_descriptor_;
}

const proto_gc_play_card_not& proto_gc_play_card_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_play_card_not* proto_gc_play_card_not::default_instance_ = NULL;

proto_gc_play_card_not* proto_gc_play_card_not::New() const {
  return new proto_gc_play_card_not;
}

void proto_gc_play_card_not::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cchairid_ = 0;
    if (has_ctype()) {
      if (ctype_ != NULL) ctype_->::proto_CCardsType::Clear();
    }
  }
  veccards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_play_card_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cchairid_)));
          set_has_cchairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vecCards;
        break;
      }

      // repeated .proto_CCard vecCards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_veccards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vecCards;
        if (input->ExpectTag(26)) goto parse_cType;
        break;
      }

      // required .proto_CCardsType cType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ctype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_play_card_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cChairID = 1;
  if (has_cchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cchairid(), output);
  }

  // repeated .proto_CCard vecCards = 2;
  for (int i = 0; i < this->veccards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->veccards(i), output);
  }

  // required .proto_CCardsType cType = 3;
  if (has_ctype()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ctype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_play_card_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cChairID = 1;
  if (has_cchairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cchairid(), target);
  }

  // repeated .proto_CCard vecCards = 2;
  for (int i = 0; i < this->veccards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->veccards(i), target);
  }

  // required .proto_CCardsType cType = 3;
  if (has_ctype()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ctype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_play_card_not::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cChairID = 1;
    if (has_cchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cchairid());
    }

    // required .proto_CCardsType cType = 3;
    if (has_ctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ctype());
    }

  }
  // repeated .proto_CCard vecCards = 2;
  total_size += 1 * this->veccards_size();
  for (int i = 0; i < this->veccards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->veccards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_play_card_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_play_card_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_play_card_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_play_card_not::MergeFrom(const proto_gc_play_card_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  veccards_.MergeFrom(from.veccards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cchairid()) {
      set_cchairid(from.cchairid());
    }
    if (from.has_ctype()) {
      mutable_ctype()->::proto_CCardsType::MergeFrom(from.ctype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_play_card_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_play_card_not::CopyFrom(const proto_gc_play_card_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_play_card_not::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  for (int i = 0; i < veccards_size(); i++) {
    if (!this->veccards(i).IsInitialized()) return false;
  }
  if (has_ctype()) {
    if (!this->ctype().IsInitialized()) return false;
  }
  return true;
}

void proto_gc_play_card_not::Swap(proto_gc_play_card_not* other) {
  if (other != this) {
    std::swap(cchairid_, other->cchairid_);
    veccards_.Swap(&other->veccards_);
    std::swap(ctype_, other->ctype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_play_card_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_play_card_not_descriptor_;
  metadata.reflection = proto_gc_play_card_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_item_info_not::kNItemIndexFieldNumber;
const int proto_gc_item_info_not::kNItemCountFieldNumber;
#endif  // !_MSC_VER

proto_gc_item_info_not::proto_gc_item_info_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_item_info_not::InitAsDefaultInstance() {
}

proto_gc_item_info_not::proto_gc_item_info_not(const proto_gc_item_info_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_item_info_not::SharedCtor() {
  _cached_size_ = 0;
  nitemindex_ = 0;
  nitemcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_item_info_not::~proto_gc_item_info_not() {
  SharedDtor();
}

void proto_gc_item_info_not::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_item_info_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_item_info_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_item_info_not_descriptor_;
}

const proto_gc_item_info_not& proto_gc_item_info_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_item_info_not* proto_gc_item_info_not::default_instance_ = NULL;

proto_gc_item_info_not* proto_gc_item_info_not::New() const {
  return new proto_gc_item_info_not;
}

void proto_gc_item_info_not::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nitemindex_ = 0;
    nitemcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_item_info_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nItemIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nitemindex_)));
          set_has_nitemindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nItemCount;
        break;
      }

      // required int32 nItemCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nItemCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nitemcount_)));
          set_has_nitemcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_item_info_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nItemIndex = 1;
  if (has_nitemindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nitemindex(), output);
  }

  // required int32 nItemCount = 2;
  if (has_nitemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nitemcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_item_info_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nItemIndex = 1;
  if (has_nitemindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nitemindex(), target);
  }

  // required int32 nItemCount = 2;
  if (has_nitemcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nitemcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_item_info_not::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nItemIndex = 1;
    if (has_nitemindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nitemindex());
    }

    // required int32 nItemCount = 2;
    if (has_nitemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nitemcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_item_info_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_item_info_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_item_info_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_item_info_not::MergeFrom(const proto_gc_item_info_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nitemindex()) {
      set_nitemindex(from.nitemindex());
    }
    if (from.has_nitemcount()) {
      set_nitemcount(from.nitemcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_item_info_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_item_info_not::CopyFrom(const proto_gc_item_info_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_item_info_not::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void proto_gc_item_info_not::Swap(proto_gc_item_info_not* other) {
  if (other != this) {
    std::swap(nitemindex_, other->nitemindex_);
    std::swap(nitemcount_, other->nitemcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_item_info_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_item_info_not_descriptor_;
  metadata.reflection = proto_gc_item_info_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

proto_cg_private_room_result_req::proto_cg_private_room_result_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_cg_private_room_result_req::InitAsDefaultInstance() {
}

proto_cg_private_room_result_req::proto_cg_private_room_result_req(const proto_cg_private_room_result_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_cg_private_room_result_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_cg_private_room_result_req::~proto_cg_private_room_result_req() {
  SharedDtor();
}

void proto_cg_private_room_result_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_cg_private_room_result_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_cg_private_room_result_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_cg_private_room_result_req_descriptor_;
}

const proto_cg_private_room_result_req& proto_cg_private_room_result_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_cg_private_room_result_req* proto_cg_private_room_result_req::default_instance_ = NULL;

proto_cg_private_room_result_req* proto_cg_private_room_result_req::New() const {
  return new proto_cg_private_room_result_req;
}

void proto_cg_private_room_result_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_cg_private_room_result_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void proto_cg_private_room_result_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_cg_private_room_result_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_cg_private_room_result_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_cg_private_room_result_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_cg_private_room_result_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_cg_private_room_result_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_cg_private_room_result_req::MergeFrom(const proto_cg_private_room_result_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_cg_private_room_result_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_cg_private_room_result_req::CopyFrom(const proto_cg_private_room_result_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_cg_private_room_result_req::IsInitialized() const {

  return true;
}

void proto_cg_private_room_result_req::Swap(proto_cg_private_room_result_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_cg_private_room_result_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_cg_private_room_result_req_descriptor_;
  metadata.reflection = proto_cg_private_room_result_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_stUserResult::kNChairIDFieldNumber;
const int proto_stUserResult::kNScoreFieldNumber;
#endif  // !_MSC_VER

proto_stUserResult::proto_stUserResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_stUserResult::InitAsDefaultInstance() {
}

proto_stUserResult::proto_stUserResult(const proto_stUserResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_stUserResult::SharedCtor() {
  _cached_size_ = 0;
  nchairid_ = 0;
  nscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_stUserResult::~proto_stUserResult() {
  SharedDtor();
}

void proto_stUserResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_stUserResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_stUserResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_stUserResult_descriptor_;
}

const proto_stUserResult& proto_stUserResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_stUserResult* proto_stUserResult::default_instance_ = NULL;

proto_stUserResult* proto_stUserResult::New() const {
  return new proto_stUserResult;
}

void proto_stUserResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nchairid_ = 0;
    nscore_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_stUserResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nchairid_)));
          set_has_nchairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nScore;
        break;
      }

      // required int32 nScore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nscore_)));
          set_has_nscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_stUserResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nChairID = 1;
  if (has_nchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nchairid(), output);
  }

  // required int32 nScore = 2;
  if (has_nscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_stUserResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nChairID = 1;
  if (has_nchairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nchairid(), target);
  }

  // required int32 nScore = 2;
  if (has_nscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_stUserResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nChairID = 1;
    if (has_nchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nchairid());
    }

    // required int32 nScore = 2;
    if (has_nscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_stUserResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_stUserResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_stUserResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_stUserResult::MergeFrom(const proto_stUserResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nchairid()) {
      set_nchairid(from.nchairid());
    }
    if (from.has_nscore()) {
      set_nscore(from.nscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_stUserResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_stUserResult::CopyFrom(const proto_stUserResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_stUserResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void proto_stUserResult::Swap(proto_stUserResult* other) {
  if (other != this) {
    std::swap(nchairid_, other->nchairid_);
    std::swap(nscore_, other->nscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_stUserResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_stUserResult_descriptor_;
  metadata.reflection = proto_stUserResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_cg_starsky_season_noti::kSeasonFieldNumber;
#endif  // !_MSC_VER

proto_cg_starsky_season_noti::proto_cg_starsky_season_noti()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_cg_starsky_season_noti::InitAsDefaultInstance() {
}

proto_cg_starsky_season_noti::proto_cg_starsky_season_noti(const proto_cg_starsky_season_noti& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_cg_starsky_season_noti::SharedCtor() {
  _cached_size_ = 0;
  season_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_cg_starsky_season_noti::~proto_cg_starsky_season_noti() {
  SharedDtor();
}

void proto_cg_starsky_season_noti::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_cg_starsky_season_noti::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_cg_starsky_season_noti::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_cg_starsky_season_noti_descriptor_;
}

const proto_cg_starsky_season_noti& proto_cg_starsky_season_noti::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_cg_starsky_season_noti* proto_cg_starsky_season_noti::default_instance_ = NULL;

proto_cg_starsky_season_noti* proto_cg_starsky_season_noti::New() const {
  return new proto_cg_starsky_season_noti;
}

void proto_cg_starsky_season_noti::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    season_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_cg_starsky_season_noti::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 season = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &season_)));
          set_has_season();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_cg_starsky_season_noti::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 season = 1;
  if (has_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->season(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_cg_starsky_season_noti::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 season = 1;
  if (has_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->season(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_cg_starsky_season_noti::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 season = 1;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->season());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_cg_starsky_season_noti::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_cg_starsky_season_noti* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_cg_starsky_season_noti*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_cg_starsky_season_noti::MergeFrom(const proto_cg_starsky_season_noti& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_season()) {
      set_season(from.season());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_cg_starsky_season_noti::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_cg_starsky_season_noti::CopyFrom(const proto_cg_starsky_season_noti& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_cg_starsky_season_noti::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void proto_cg_starsky_season_noti::Swap(proto_cg_starsky_season_noti* other) {
  if (other != this) {
    std::swap(season_, other->season_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_cg_starsky_season_noti::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_cg_starsky_season_noti_descriptor_;
  metadata.reflection = proto_cg_starsky_season_noti_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_GameStatisc::kCChairIDFieldNumber;
const int proto_GameStatisc::kNCallTimesFieldNumber;
const int proto_GameStatisc::kNLordTimesFieldNumber;
const int proto_GameStatisc::kNWinTimesFieldNumber;
const int proto_GameStatisc::kNZhanJiFieldNumber;
#endif  // !_MSC_VER

proto_GameStatisc::proto_GameStatisc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_GameStatisc::InitAsDefaultInstance() {
}

proto_GameStatisc::proto_GameStatisc(const proto_GameStatisc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_GameStatisc::SharedCtor() {
  _cached_size_ = 0;
  cchairid_ = 0;
  ncalltimes_ = 0;
  nlordtimes_ = 0;
  nwintimes_ = 0;
  nzhanji_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_GameStatisc::~proto_GameStatisc() {
  SharedDtor();
}

void proto_GameStatisc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_GameStatisc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_GameStatisc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_GameStatisc_descriptor_;
}

const proto_GameStatisc& proto_GameStatisc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_GameStatisc* proto_GameStatisc::default_instance_ = NULL;

proto_GameStatisc* proto_GameStatisc::New() const {
  return new proto_GameStatisc;
}

void proto_GameStatisc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cchairid_ = 0;
    ncalltimes_ = 0;
    nlordtimes_ = 0;
    nwintimes_ = 0;
    nzhanji_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_GameStatisc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cchairid_)));
          set_has_cchairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nCallTimes;
        break;
      }

      // required int32 nCallTimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCallTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncalltimes_)));
          set_has_ncalltimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nLordTimes;
        break;
      }

      // required int32 nLordTimes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nLordTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nlordtimes_)));
          set_has_nlordtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nWinTimes;
        break;
      }

      // required int32 nWinTimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nWinTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nwintimes_)));
          set_has_nwintimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nZhanJi;
        break;
      }

      // required int64 nZhanJi = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nZhanJi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nzhanji_)));
          set_has_nzhanji();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_GameStatisc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cChairID = 1;
  if (has_cchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cchairid(), output);
  }

  // required int32 nCallTimes = 2;
  if (has_ncalltimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ncalltimes(), output);
  }

  // required int32 nLordTimes = 3;
  if (has_nlordtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nlordtimes(), output);
  }

  // required int32 nWinTimes = 4;
  if (has_nwintimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nwintimes(), output);
  }

  // required int64 nZhanJi = 5;
  if (has_nzhanji()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->nzhanji(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_GameStatisc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cChairID = 1;
  if (has_cchairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cchairid(), target);
  }

  // required int32 nCallTimes = 2;
  if (has_ncalltimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ncalltimes(), target);
  }

  // required int32 nLordTimes = 3;
  if (has_nlordtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nlordtimes(), target);
  }

  // required int32 nWinTimes = 4;
  if (has_nwintimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nwintimes(), target);
  }

  // required int64 nZhanJi = 5;
  if (has_nzhanji()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->nzhanji(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_GameStatisc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cChairID = 1;
    if (has_cchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cchairid());
    }

    // required int32 nCallTimes = 2;
    if (has_ncalltimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncalltimes());
    }

    // required int32 nLordTimes = 3;
    if (has_nlordtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nlordtimes());
    }

    // required int32 nWinTimes = 4;
    if (has_nwintimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nwintimes());
    }

    // required int64 nZhanJi = 5;
    if (has_nzhanji()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nzhanji());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_GameStatisc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_GameStatisc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_GameStatisc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_GameStatisc::MergeFrom(const proto_GameStatisc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cchairid()) {
      set_cchairid(from.cchairid());
    }
    if (from.has_ncalltimes()) {
      set_ncalltimes(from.ncalltimes());
    }
    if (from.has_nlordtimes()) {
      set_nlordtimes(from.nlordtimes());
    }
    if (from.has_nwintimes()) {
      set_nwintimes(from.nwintimes());
    }
    if (from.has_nzhanji()) {
      set_nzhanji(from.nzhanji());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_GameStatisc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_GameStatisc::CopyFrom(const proto_GameStatisc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_GameStatisc::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void proto_GameStatisc::Swap(proto_GameStatisc* other) {
  if (other != this) {
    std::swap(cchairid_, other->cchairid_);
    std::swap(ncalltimes_, other->ncalltimes_);
    std::swap(nlordtimes_, other->nlordtimes_);
    std::swap(nwintimes_, other->nwintimes_);
    std::swap(nzhanji_, other->nzhanji_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_GameStatisc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_GameStatisc_descriptor_;
  metadata.reflection = proto_GameStatisc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_two_complete_data_not::kNGameMoneyFieldNumber;
const int proto_gc_two_complete_data_not::kNDoubleFieldNumber;
const int proto_gc_two_complete_data_not::kCLordFieldNumber;
const int proto_gc_two_complete_data_not::kVecLordCardsFieldNumber;
const int proto_gc_two_complete_data_not::kVecDataFieldNumber;
const int proto_gc_two_complete_data_not::kNLetNumFieldNumber;
const int proto_gc_two_complete_data_not::kNStartFieldNumber;
#endif  // !_MSC_VER

proto_gc_two_complete_data_not::proto_gc_two_complete_data_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_two_complete_data_not::InitAsDefaultInstance() {
}

proto_gc_two_complete_data_not::proto_gc_two_complete_data_not(const proto_gc_two_complete_data_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_two_complete_data_not::SharedCtor() {
  _cached_size_ = 0;
  ngamemoney_ = 0;
  ndouble_ = 0;
  clord_ = 0;
  nletnum_ = 0;
  nstart_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_two_complete_data_not::~proto_gc_two_complete_data_not() {
  SharedDtor();
}

void proto_gc_two_complete_data_not::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_two_complete_data_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_two_complete_data_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_two_complete_data_not_descriptor_;
}

const proto_gc_two_complete_data_not& proto_gc_two_complete_data_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_two_complete_data_not* proto_gc_two_complete_data_not::default_instance_ = NULL;

proto_gc_two_complete_data_not* proto_gc_two_complete_data_not::New() const {
  return new proto_gc_two_complete_data_not;
}

void proto_gc_two_complete_data_not::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ngamemoney_ = 0;
    ndouble_ = 0;
    clord_ = 0;
    nletnum_ = 0;
    nstart_ = 0;
  }
  veclordcards_.Clear();
  vecdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_two_complete_data_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nGameMoney = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ngamemoney_)));
          set_has_ngamemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nDouble;
        break;
      }

      // required int32 nDouble = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nDouble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ndouble_)));
          set_has_ndouble();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cLord;
        break;
      }

      // required int32 cLord = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cLord:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clord_)));
          set_has_clord();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_vecLordCards;
        break;
      }

      // repeated .proto_CCard vecLordCards = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecLordCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_veclordcards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_vecLordCards;
        if (input->ExpectTag(42)) goto parse_vecData;
        break;
      }

      // repeated .proto_stUserData vecData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vecdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_vecData;
        if (input->ExpectTag(48)) goto parse_nLetNum;
        break;
      }

      // required int32 nLetNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nLetNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nletnum_)));
          set_has_nletnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_nStart;
        break;
      }

      // required int32 nStart = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nStart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nstart_)));
          set_has_nstart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_two_complete_data_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nGameMoney = 1;
  if (has_ngamemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ngamemoney(), output);
  }

  // required int32 nDouble = 2;
  if (has_ndouble()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ndouble(), output);
  }

  // required int32 cLord = 3;
  if (has_clord()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->clord(), output);
  }

  // repeated .proto_CCard vecLordCards = 4;
  for (int i = 0; i < this->veclordcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->veclordcards(i), output);
  }

  // repeated .proto_stUserData vecData = 5;
  for (int i = 0; i < this->vecdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->vecdata(i), output);
  }

  // required int32 nLetNum = 6;
  if (has_nletnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nletnum(), output);
  }

  // required int32 nStart = 7;
  if (has_nstart()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->nstart(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_two_complete_data_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nGameMoney = 1;
  if (has_ngamemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ngamemoney(), target);
  }

  // required int32 nDouble = 2;
  if (has_ndouble()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ndouble(), target);
  }

  // required int32 cLord = 3;
  if (has_clord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->clord(), target);
  }

  // repeated .proto_CCard vecLordCards = 4;
  for (int i = 0; i < this->veclordcards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->veclordcards(i), target);
  }

  // repeated .proto_stUserData vecData = 5;
  for (int i = 0; i < this->vecdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->vecdata(i), target);
  }

  // required int32 nLetNum = 6;
  if (has_nletnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nletnum(), target);
  }

  // required int32 nStart = 7;
  if (has_nstart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->nstart(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_two_complete_data_not::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nGameMoney = 1;
    if (has_ngamemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ngamemoney());
    }

    // required int32 nDouble = 2;
    if (has_ndouble()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ndouble());
    }

    // required int32 cLord = 3;
    if (has_clord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clord());
    }

    // required int32 nLetNum = 6;
    if (has_nletnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nletnum());
    }

    // required int32 nStart = 7;
    if (has_nstart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nstart());
    }

  }
  // repeated .proto_CCard vecLordCards = 4;
  total_size += 1 * this->veclordcards_size();
  for (int i = 0; i < this->veclordcards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->veclordcards(i));
  }

  // repeated .proto_stUserData vecData = 5;
  total_size += 1 * this->vecdata_size();
  for (int i = 0; i < this->vecdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vecdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_two_complete_data_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_two_complete_data_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_two_complete_data_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_two_complete_data_not::MergeFrom(const proto_gc_two_complete_data_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  veclordcards_.MergeFrom(from.veclordcards_);
  vecdata_.MergeFrom(from.vecdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ngamemoney()) {
      set_ngamemoney(from.ngamemoney());
    }
    if (from.has_ndouble()) {
      set_ndouble(from.ndouble());
    }
    if (from.has_clord()) {
      set_clord(from.clord());
    }
    if (from.has_nletnum()) {
      set_nletnum(from.nletnum());
    }
    if (from.has_nstart()) {
      set_nstart(from.nstart());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_two_complete_data_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_two_complete_data_not::CopyFrom(const proto_gc_two_complete_data_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_two_complete_data_not::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000067) != 0x00000067) return false;

  for (int i = 0; i < veclordcards_size(); i++) {
    if (!this->veclordcards(i).IsInitialized()) return false;
  }
  for (int i = 0; i < vecdata_size(); i++) {
    if (!this->vecdata(i).IsInitialized()) return false;
  }
  return true;
}

void proto_gc_two_complete_data_not::Swap(proto_gc_two_complete_data_not* other) {
  if (other != this) {
    std::swap(ngamemoney_, other->ngamemoney_);
    std::swap(ndouble_, other->ndouble_);
    std::swap(clord_, other->clord_);
    veclordcards_.Swap(&other->veclordcards_);
    vecdata_.Swap(&other->vecdata_);
    std::swap(nletnum_, other->nletnum_);
    std::swap(nstart_, other->nstart_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_two_complete_data_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_two_complete_data_not_descriptor_;
  metadata.reflection = proto_gc_two_complete_data_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_win_doubel_req::kNAddAmountFieldNumber;
const int proto_gc_win_doubel_req::kNAddProbabilyFieldNumber;
#endif  // !_MSC_VER

proto_gc_win_doubel_req::proto_gc_win_doubel_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_win_doubel_req::InitAsDefaultInstance() {
}

proto_gc_win_doubel_req::proto_gc_win_doubel_req(const proto_gc_win_doubel_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_win_doubel_req::SharedCtor() {
  _cached_size_ = 0;
  naddamount_ = 0;
  naddprobabily_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_win_doubel_req::~proto_gc_win_doubel_req() {
  SharedDtor();
}

void proto_gc_win_doubel_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_win_doubel_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_win_doubel_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_win_doubel_req_descriptor_;
}

const proto_gc_win_doubel_req& proto_gc_win_doubel_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_win_doubel_req* proto_gc_win_doubel_req::default_instance_ = NULL;

proto_gc_win_doubel_req* proto_gc_win_doubel_req::New() const {
  return new proto_gc_win_doubel_req;
}

void proto_gc_win_doubel_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    naddamount_ = 0;
    naddprobabily_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_win_doubel_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nAddAmount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &naddamount_)));
          set_has_naddamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nAddProbabily;
        break;
      }

      // required int32 nAddProbabily = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nAddProbabily:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &naddprobabily_)));
          set_has_naddprobabily();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_win_doubel_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nAddAmount = 1;
  if (has_naddamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->naddamount(), output);
  }

  // required int32 nAddProbabily = 2;
  if (has_naddprobabily()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->naddprobabily(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_win_doubel_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nAddAmount = 1;
  if (has_naddamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->naddamount(), target);
  }

  // required int32 nAddProbabily = 2;
  if (has_naddprobabily()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->naddprobabily(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_win_doubel_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nAddAmount = 1;
    if (has_naddamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->naddamount());
    }

    // required int32 nAddProbabily = 2;
    if (has_naddprobabily()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->naddprobabily());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_win_doubel_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_win_doubel_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_win_doubel_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_win_doubel_req::MergeFrom(const proto_gc_win_doubel_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_naddamount()) {
      set_naddamount(from.naddamount());
    }
    if (from.has_naddprobabily()) {
      set_naddprobabily(from.naddprobabily());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_win_doubel_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_win_doubel_req::CopyFrom(const proto_gc_win_doubel_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_win_doubel_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void proto_gc_win_doubel_req::Swap(proto_gc_win_doubel_req* other) {
  if (other != this) {
    std::swap(naddamount_, other->naddamount_);
    std::swap(naddprobabily_, other->naddprobabily_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_win_doubel_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_win_doubel_req_descriptor_;
  metadata.reflection = proto_gc_win_doubel_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_common_not::kNOpFieldNumber;
const int proto_gc_common_not::kCChairIDFieldNumber;
#endif  // !_MSC_VER

proto_gc_common_not::proto_gc_common_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_common_not::InitAsDefaultInstance() {
}

proto_gc_common_not::proto_gc_common_not(const proto_gc_common_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_common_not::SharedCtor() {
  _cached_size_ = 0;
  nop_ = 0;
  cchairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_common_not::~proto_gc_common_not() {
  SharedDtor();
}

void proto_gc_common_not::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_common_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_common_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_common_not_descriptor_;
}

const proto_gc_common_not& proto_gc_common_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_common_not* proto_gc_common_not::default_instance_ = NULL;

proto_gc_common_not* proto_gc_common_not::New() const {
  return new proto_gc_common_not;
}

void proto_gc_common_not::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nop_ = 0;
    cchairid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_common_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nOp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nop_)));
          set_has_nop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cChairID;
        break;
      }

      // required int32 cChairID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cChairID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cchairid_)));
          set_has_cchairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_common_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nOp = 1;
  if (has_nop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nop(), output);
  }

  // required int32 cChairID = 2;
  if (has_cchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cchairid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_common_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nOp = 1;
  if (has_nop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nop(), target);
  }

  // required int32 cChairID = 2;
  if (has_cchairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cchairid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_common_not::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nOp = 1;
    if (has_nop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nop());
    }

    // required int32 cChairID = 2;
    if (has_cchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cchairid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_common_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_common_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_common_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_common_not::MergeFrom(const proto_gc_common_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nop()) {
      set_nop(from.nop());
    }
    if (from.has_cchairid()) {
      set_cchairid(from.cchairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_common_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_common_not::CopyFrom(const proto_gc_common_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_common_not::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void proto_gc_common_not::Swap(proto_gc_common_not* other) {
  if (other != this) {
    std::swap(nop_, other->nop_);
    std::swap(cchairid_, other->cchairid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_common_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_common_not_descriptor_;
  metadata.reflection = proto_gc_common_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_complete_data_not::kNGameMoneyFieldNumber;
const int proto_gc_complete_data_not::kNDoubleFieldNumber;
const int proto_gc_complete_data_not::kCLordFieldNumber;
const int proto_gc_complete_data_not::kVecLordCardsFieldNumber;
const int proto_gc_complete_data_not::kVecDataFieldNumber;
#endif  // !_MSC_VER

proto_gc_complete_data_not::proto_gc_complete_data_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_complete_data_not::InitAsDefaultInstance() {
}

proto_gc_complete_data_not::proto_gc_complete_data_not(const proto_gc_complete_data_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_complete_data_not::SharedCtor() {
  _cached_size_ = 0;
  ngamemoney_ = 0;
  ndouble_ = 0;
  clord_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_complete_data_not::~proto_gc_complete_data_not() {
  SharedDtor();
}

void proto_gc_complete_data_not::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_complete_data_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_complete_data_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_complete_data_not_descriptor_;
}

const proto_gc_complete_data_not& proto_gc_complete_data_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_complete_data_not* proto_gc_complete_data_not::default_instance_ = NULL;

proto_gc_complete_data_not* proto_gc_complete_data_not::New() const {
  return new proto_gc_complete_data_not;
}

void proto_gc_complete_data_not::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ngamemoney_ = 0;
    ndouble_ = 0;
    clord_ = 0;
  }
  veclordcards_.Clear();
  vecdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_complete_data_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nGameMoney = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ngamemoney_)));
          set_has_ngamemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nDouble;
        break;
      }

      // required int32 nDouble = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nDouble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ndouble_)));
          set_has_ndouble();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cLord;
        break;
      }

      // required int32 cLord = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cLord:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clord_)));
          set_has_clord();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_vecLordCards;
        break;
      }

      // repeated .proto_CCard vecLordCards = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecLordCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_veclordcards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_vecLordCards;
        if (input->ExpectTag(42)) goto parse_vecData;
        break;
      }

      // repeated .proto_stUserData vecData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vecdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_vecData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_complete_data_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nGameMoney = 1;
  if (has_ngamemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ngamemoney(), output);
  }

  // required int32 nDouble = 2;
  if (has_ndouble()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ndouble(), output);
  }

  // required int32 cLord = 3;
  if (has_clord()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->clord(), output);
  }

  // repeated .proto_CCard vecLordCards = 4;
  for (int i = 0; i < this->veclordcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->veclordcards(i), output);
  }

  // repeated .proto_stUserData vecData = 5;
  for (int i = 0; i < this->vecdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->vecdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_complete_data_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nGameMoney = 1;
  if (has_ngamemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ngamemoney(), target);
  }

  // required int32 nDouble = 2;
  if (has_ndouble()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ndouble(), target);
  }

  // required int32 cLord = 3;
  if (has_clord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->clord(), target);
  }

  // repeated .proto_CCard vecLordCards = 4;
  for (int i = 0; i < this->veclordcards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->veclordcards(i), target);
  }

  // repeated .proto_stUserData vecData = 5;
  for (int i = 0; i < this->vecdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->vecdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_complete_data_not::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nGameMoney = 1;
    if (has_ngamemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ngamemoney());
    }

    // required int32 nDouble = 2;
    if (has_ndouble()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ndouble());
    }

    // required int32 cLord = 3;
    if (has_clord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clord());
    }

  }
  // repeated .proto_CCard vecLordCards = 4;
  total_size += 1 * this->veclordcards_size();
  for (int i = 0; i < this->veclordcards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->veclordcards(i));
  }

  // repeated .proto_stUserData vecData = 5;
  total_size += 1 * this->vecdata_size();
  for (int i = 0; i < this->vecdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vecdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_complete_data_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_complete_data_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_complete_data_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_complete_data_not::MergeFrom(const proto_gc_complete_data_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  veclordcards_.MergeFrom(from.veclordcards_);
  vecdata_.MergeFrom(from.vecdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ngamemoney()) {
      set_ngamemoney(from.ngamemoney());
    }
    if (from.has_ndouble()) {
      set_ndouble(from.ndouble());
    }
    if (from.has_clord()) {
      set_clord(from.clord());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_complete_data_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_complete_data_not::CopyFrom(const proto_gc_complete_data_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_complete_data_not::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < veclordcards_size(); i++) {
    if (!this->veclordcards(i).IsInitialized()) return false;
  }
  for (int i = 0; i < vecdata_size(); i++) {
    if (!this->vecdata(i).IsInitialized()) return false;
  }
  return true;
}

void proto_gc_complete_data_not::Swap(proto_gc_complete_data_not* other) {
  if (other != this) {
    std::swap(ngamemoney_, other->ngamemoney_);
    std::swap(ndouble_, other->ndouble_);
    std::swap(clord_, other->clord_);
    veclordcards_.Swap(&other->veclordcards_);
    vecdata_.Swap(&other->vecdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_complete_data_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_complete_data_not_descriptor_;
  metadata.reflection = proto_gc_complete_data_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

proto_sic_show_result_not::proto_sic_show_result_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_sic_show_result_not::InitAsDefaultInstance() {
}

proto_sic_show_result_not::proto_sic_show_result_not(const proto_sic_show_result_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_sic_show_result_not::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_sic_show_result_not::~proto_sic_show_result_not() {
  SharedDtor();
}

void proto_sic_show_result_not::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_sic_show_result_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_sic_show_result_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_sic_show_result_not_descriptor_;
}

const proto_sic_show_result_not& proto_sic_show_result_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_sic_show_result_not* proto_sic_show_result_not::default_instance_ = NULL;

proto_sic_show_result_not* proto_sic_show_result_not::New() const {
  return new proto_sic_show_result_not;
}

void proto_sic_show_result_not::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_sic_show_result_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void proto_sic_show_result_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_sic_show_result_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_sic_show_result_not::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_sic_show_result_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_sic_show_result_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_sic_show_result_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_sic_show_result_not::MergeFrom(const proto_sic_show_result_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_sic_show_result_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_sic_show_result_not::CopyFrom(const proto_sic_show_result_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_sic_show_result_not::IsInitialized() const {

  return true;
}

void proto_sic_show_result_not::Swap(proto_sic_show_result_not* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_sic_show_result_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_sic_show_result_not_descriptor_;
  metadata.reflection = proto_sic_show_result_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

proto_cg_three_draw_req_card::proto_cg_three_draw_req_card()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_cg_three_draw_req_card::InitAsDefaultInstance() {
}

proto_cg_three_draw_req_card::proto_cg_three_draw_req_card(const proto_cg_three_draw_req_card& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_cg_three_draw_req_card::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_cg_three_draw_req_card::~proto_cg_three_draw_req_card() {
  SharedDtor();
}

void proto_cg_three_draw_req_card::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_cg_three_draw_req_card::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_cg_three_draw_req_card::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_cg_three_draw_req_card_descriptor_;
}

const proto_cg_three_draw_req_card& proto_cg_three_draw_req_card::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_cg_three_draw_req_card* proto_cg_three_draw_req_card::default_instance_ = NULL;

proto_cg_three_draw_req_card* proto_cg_three_draw_req_card::New() const {
  return new proto_cg_three_draw_req_card;
}

void proto_cg_three_draw_req_card::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_cg_three_draw_req_card::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void proto_cg_three_draw_req_card::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_cg_three_draw_req_card::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_cg_three_draw_req_card::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_cg_three_draw_req_card::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_cg_three_draw_req_card* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_cg_three_draw_req_card*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_cg_three_draw_req_card::MergeFrom(const proto_cg_three_draw_req_card& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_cg_three_draw_req_card::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_cg_three_draw_req_card::CopyFrom(const proto_cg_three_draw_req_card& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_cg_three_draw_req_card::IsInitialized() const {

  return true;
}

void proto_cg_three_draw_req_card::Swap(proto_cg_three_draw_req_card* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_cg_three_draw_req_card::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_cg_three_draw_req_card_descriptor_;
  metadata.reflection = proto_cg_three_draw_req_card_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_game_model::kCModelTypeFieldNumber;
#endif  // !_MSC_VER

proto_gc_game_model::proto_gc_game_model()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_game_model::InitAsDefaultInstance() {
}

proto_gc_game_model::proto_gc_game_model(const proto_gc_game_model& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_game_model::SharedCtor() {
  _cached_size_ = 0;
  cmodeltype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_game_model::~proto_gc_game_model() {
  SharedDtor();
}

void proto_gc_game_model::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_game_model::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_game_model::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_game_model_descriptor_;
}

const proto_gc_game_model& proto_gc_game_model::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_game_model* proto_gc_game_model::default_instance_ = NULL;

proto_gc_game_model* proto_gc_game_model::New() const {
  return new proto_gc_game_model;
}

void proto_gc_game_model::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmodeltype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_game_model::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cModelType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmodeltype_)));
          set_has_cmodeltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_game_model::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cModelType = 1;
  if (has_cmodeltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmodeltype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_game_model::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cModelType = 1;
  if (has_cmodeltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmodeltype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_game_model::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cModelType = 1;
    if (has_cmodeltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmodeltype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_game_model::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_game_model* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_game_model*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_game_model::MergeFrom(const proto_gc_game_model& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmodeltype()) {
      set_cmodeltype(from.cmodeltype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_game_model::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_game_model::CopyFrom(const proto_gc_game_model& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_game_model::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void proto_gc_game_model::Swap(proto_gc_game_model* other) {
  if (other != this) {
    std::swap(cmodeltype_, other->cmodeltype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_game_model::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_game_model_descriptor_;
  metadata.reflection = proto_gc_game_model_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_magic_emoji_config_not::kEmojiConfigsFieldNumber;
#endif  // !_MSC_VER

proto_gc_magic_emoji_config_not::proto_gc_magic_emoji_config_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_magic_emoji_config_not::InitAsDefaultInstance() {
}

proto_gc_magic_emoji_config_not::proto_gc_magic_emoji_config_not(const proto_gc_magic_emoji_config_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_magic_emoji_config_not::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_magic_emoji_config_not::~proto_gc_magic_emoji_config_not() {
  SharedDtor();
}

void proto_gc_magic_emoji_config_not::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_magic_emoji_config_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_magic_emoji_config_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_magic_emoji_config_not_descriptor_;
}

const proto_gc_magic_emoji_config_not& proto_gc_magic_emoji_config_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_magic_emoji_config_not* proto_gc_magic_emoji_config_not::default_instance_ = NULL;

proto_gc_magic_emoji_config_not* proto_gc_magic_emoji_config_not::New() const {
  return new proto_gc_magic_emoji_config_not;
}

void proto_gc_magic_emoji_config_not::Clear() {
  emojiconfigs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_magic_emoji_config_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_emojiConfig emojiConfigs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_emojiConfigs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_emojiconfigs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_emojiConfigs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_magic_emoji_config_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_emojiConfig emojiConfigs = 1;
  for (int i = 0; i < this->emojiconfigs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->emojiconfigs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_magic_emoji_config_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_emojiConfig emojiConfigs = 1;
  for (int i = 0; i < this->emojiconfigs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->emojiconfigs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_magic_emoji_config_not::ByteSize() const {
  int total_size = 0;

  // repeated .proto_emojiConfig emojiConfigs = 1;
  total_size += 1 * this->emojiconfigs_size();
  for (int i = 0; i < this->emojiconfigs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->emojiconfigs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_magic_emoji_config_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_magic_emoji_config_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_magic_emoji_config_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_magic_emoji_config_not::MergeFrom(const proto_gc_magic_emoji_config_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  emojiconfigs_.MergeFrom(from.emojiconfigs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_magic_emoji_config_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_magic_emoji_config_not::CopyFrom(const proto_gc_magic_emoji_config_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_magic_emoji_config_not::IsInitialized() const {

  for (int i = 0; i < emojiconfigs_size(); i++) {
    if (!this->emojiconfigs(i).IsInitialized()) return false;
  }
  return true;
}

void proto_gc_magic_emoji_config_not::Swap(proto_gc_magic_emoji_config_not* other) {
  if (other != this) {
    emojiconfigs_.Swap(&other->emojiconfigs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_magic_emoji_config_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_magic_emoji_config_not_descriptor_;
  metadata.reflection = proto_gc_magic_emoji_config_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_emojiConfig::kCEmojiIndexFieldNumber;
const int proto_emojiConfig::kCCostTypeFieldNumber;
const int proto_emojiConfig::kCCostValueFieldNumber;
const int proto_emojiConfig::kNTenItemIndexFieldNumber;
const int proto_emojiConfig::kNTenItemNumFieldNumber;
const int proto_emojiConfig::kNTenEmojiNumFieldNumber;
#endif  // !_MSC_VER

proto_emojiConfig::proto_emojiConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_emojiConfig::InitAsDefaultInstance() {
}

proto_emojiConfig::proto_emojiConfig(const proto_emojiConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_emojiConfig::SharedCtor() {
  _cached_size_ = 0;
  cemojiindex_ = 0;
  ccosttype_ = 0;
  ccostvalue_ = 0;
  ntenitemindex_ = 0;
  ntenitemnum_ = 0;
  ntenemojinum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_emojiConfig::~proto_emojiConfig() {
  SharedDtor();
}

void proto_emojiConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_emojiConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_emojiConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_emojiConfig_descriptor_;
}

const proto_emojiConfig& proto_emojiConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_emojiConfig* proto_emojiConfig::default_instance_ = NULL;

proto_emojiConfig* proto_emojiConfig::New() const {
  return new proto_emojiConfig;
}

void proto_emojiConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cemojiindex_ = 0;
    ccosttype_ = 0;
    ccostvalue_ = 0;
    ntenitemindex_ = 0;
    ntenitemnum_ = 0;
    ntenemojinum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_emojiConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cEmojiIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cemojiindex_)));
          set_has_cemojiindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cCostType;
        break;
      }

      // required int32 cCostType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cCostType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ccosttype_)));
          set_has_ccosttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cCostValue;
        break;
      }

      // required int32 cCostValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cCostValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ccostvalue_)));
          set_has_ccostvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nTenItemIndex;
        break;
      }

      // required int32 nTenItemIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nTenItemIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntenitemindex_)));
          set_has_ntenitemindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nTenItemNum;
        break;
      }

      // required int32 nTenItemNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nTenItemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntenitemnum_)));
          set_has_ntenitemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_nTenEmojiNum;
        break;
      }

      // required int32 nTenEmojiNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nTenEmojiNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntenemojinum_)));
          set_has_ntenemojinum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_emojiConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cEmojiIndex = 1;
  if (has_cemojiindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cemojiindex(), output);
  }

  // required int32 cCostType = 2;
  if (has_ccosttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ccosttype(), output);
  }

  // required int32 cCostValue = 3;
  if (has_ccostvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ccostvalue(), output);
  }

  // required int32 nTenItemIndex = 4;
  if (has_ntenitemindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ntenitemindex(), output);
  }

  // required int32 nTenItemNum = 5;
  if (has_ntenitemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ntenitemnum(), output);
  }

  // required int32 nTenEmojiNum = 6;
  if (has_ntenemojinum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ntenemojinum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_emojiConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cEmojiIndex = 1;
  if (has_cemojiindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cemojiindex(), target);
  }

  // required int32 cCostType = 2;
  if (has_ccosttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ccosttype(), target);
  }

  // required int32 cCostValue = 3;
  if (has_ccostvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ccostvalue(), target);
  }

  // required int32 nTenItemIndex = 4;
  if (has_ntenitemindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ntenitemindex(), target);
  }

  // required int32 nTenItemNum = 5;
  if (has_ntenitemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ntenitemnum(), target);
  }

  // required int32 nTenEmojiNum = 6;
  if (has_ntenemojinum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ntenemojinum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_emojiConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cEmojiIndex = 1;
    if (has_cemojiindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cemojiindex());
    }

    // required int32 cCostType = 2;
    if (has_ccosttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ccosttype());
    }

    // required int32 cCostValue = 3;
    if (has_ccostvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ccostvalue());
    }

    // required int32 nTenItemIndex = 4;
    if (has_ntenitemindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntenitemindex());
    }

    // required int32 nTenItemNum = 5;
    if (has_ntenitemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntenitemnum());
    }

    // required int32 nTenEmojiNum = 6;
    if (has_ntenemojinum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntenemojinum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_emojiConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_emojiConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_emojiConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_emojiConfig::MergeFrom(const proto_emojiConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cemojiindex()) {
      set_cemojiindex(from.cemojiindex());
    }
    if (from.has_ccosttype()) {
      set_ccosttype(from.ccosttype());
    }
    if (from.has_ccostvalue()) {
      set_ccostvalue(from.ccostvalue());
    }
    if (from.has_ntenitemindex()) {
      set_ntenitemindex(from.ntenitemindex());
    }
    if (from.has_ntenitemnum()) {
      set_ntenitemnum(from.ntenitemnum());
    }
    if (from.has_ntenemojinum()) {
      set_ntenemojinum(from.ntenemojinum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_emojiConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_emojiConfig::CopyFrom(const proto_emojiConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_emojiConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void proto_emojiConfig::Swap(proto_emojiConfig* other) {
  if (other != this) {
    std::swap(cemojiindex_, other->cemojiindex_);
    std::swap(ccosttype_, other->ccosttype_);
    std::swap(ccostvalue_, other->ccostvalue_);
    std::swap(ntenitemindex_, other->ntenitemindex_);
    std::swap(ntenitemnum_, other->ntenitemnum_);
    std::swap(ntenemojinum_, other->ntenemojinum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_emojiConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_emojiConfig_descriptor_;
  metadata.reflection = proto_emojiConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_show_card_req::kNSerialIDFieldNumber;
const int proto_gc_show_card_req::kNShowCardTypeFieldNumber;
const int proto_gc_show_card_req::kNShowCardBetFieldNumber;
#endif  // !_MSC_VER

proto_gc_show_card_req::proto_gc_show_card_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_show_card_req::InitAsDefaultInstance() {
}

proto_gc_show_card_req::proto_gc_show_card_req(const proto_gc_show_card_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_show_card_req::SharedCtor() {
  _cached_size_ = 0;
  nserialid_ = 0;
  nshowcardtype_ = 0;
  nshowcardbet_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_show_card_req::~proto_gc_show_card_req() {
  SharedDtor();
}

void proto_gc_show_card_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_show_card_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_show_card_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_show_card_req_descriptor_;
}

const proto_gc_show_card_req& proto_gc_show_card_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_show_card_req* proto_gc_show_card_req::default_instance_ = NULL;

proto_gc_show_card_req* proto_gc_show_card_req::New() const {
  return new proto_gc_show_card_req;
}

void proto_gc_show_card_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nserialid_ = 0;
    nshowcardtype_ = 0;
    nshowcardbet_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_show_card_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nSerialID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nserialid_)));
          set_has_nserialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nShowCardType;
        break;
      }

      // required int32 nShowCardType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nShowCardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nshowcardtype_)));
          set_has_nshowcardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nShowCardBet;
        break;
      }

      // required int32 nShowCardBet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nShowCardBet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nshowcardbet_)));
          set_has_nshowcardbet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_show_card_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nSerialID = 1;
  if (has_nserialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nserialid(), output);
  }

  // required int32 nShowCardType = 2;
  if (has_nshowcardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nshowcardtype(), output);
  }

  // required int32 nShowCardBet = 3;
  if (has_nshowcardbet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nshowcardbet(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_show_card_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nSerialID = 1;
  if (has_nserialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nserialid(), target);
  }

  // required int32 nShowCardType = 2;
  if (has_nshowcardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nshowcardtype(), target);
  }

  // required int32 nShowCardBet = 3;
  if (has_nshowcardbet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nshowcardbet(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_show_card_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nSerialID = 1;
    if (has_nserialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nserialid());
    }

    // required int32 nShowCardType = 2;
    if (has_nshowcardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nshowcardtype());
    }

    // required int32 nShowCardBet = 3;
    if (has_nshowcardbet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nshowcardbet());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_show_card_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_show_card_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_show_card_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_show_card_req::MergeFrom(const proto_gc_show_card_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nserialid()) {
      set_nserialid(from.nserialid());
    }
    if (from.has_nshowcardtype()) {
      set_nshowcardtype(from.nshowcardtype());
    }
    if (from.has_nshowcardbet()) {
      set_nshowcardbet(from.nshowcardbet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_show_card_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_show_card_req::CopyFrom(const proto_gc_show_card_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_show_card_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void proto_gc_show_card_req::Swap(proto_gc_show_card_req* other) {
  if (other != this) {
    std::swap(nserialid_, other->nserialid_);
    std::swap(nshowcardtype_, other->nshowcardtype_);
    std::swap(nshowcardbet_, other->nshowcardbet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_show_card_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_show_card_req_descriptor_;
  metadata.reflection = proto_gc_show_card_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_extra_double_score_not::kNDoubleFieldNumber;
const int proto_gc_extra_double_score_not::kNLordDoubleFieldNumber;
const int proto_gc_extra_double_score_not::kNSerialIDFieldNumber;
#endif  // !_MSC_VER

proto_gc_extra_double_score_not::proto_gc_extra_double_score_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_extra_double_score_not::InitAsDefaultInstance() {
}

proto_gc_extra_double_score_not::proto_gc_extra_double_score_not(const proto_gc_extra_double_score_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_extra_double_score_not::SharedCtor() {
  _cached_size_ = 0;
  ndouble_ = 0;
  nlorddouble_ = 0;
  nserialid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_extra_double_score_not::~proto_gc_extra_double_score_not() {
  SharedDtor();
}

void proto_gc_extra_double_score_not::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_extra_double_score_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_extra_double_score_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_extra_double_score_not_descriptor_;
}

const proto_gc_extra_double_score_not& proto_gc_extra_double_score_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_extra_double_score_not* proto_gc_extra_double_score_not::default_instance_ = NULL;

proto_gc_extra_double_score_not* proto_gc_extra_double_score_not::New() const {
  return new proto_gc_extra_double_score_not;
}

void proto_gc_extra_double_score_not::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ndouble_ = 0;
    nlorddouble_ = 0;
    nserialid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_extra_double_score_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nDouble = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ndouble_)));
          set_has_ndouble();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nLordDouble;
        break;
      }

      // required int32 nLordDouble = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nLordDouble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nlorddouble_)));
          set_has_nlorddouble();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nSerialID;
        break;
      }

      // required int32 nSerialID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nSerialID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nserialid_)));
          set_has_nserialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_extra_double_score_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nDouble = 1;
  if (has_ndouble()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ndouble(), output);
  }

  // required int32 nLordDouble = 2;
  if (has_nlorddouble()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nlorddouble(), output);
  }

  // required int32 nSerialID = 3;
  if (has_nserialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nserialid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_extra_double_score_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nDouble = 1;
  if (has_ndouble()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ndouble(), target);
  }

  // required int32 nLordDouble = 2;
  if (has_nlorddouble()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nlorddouble(), target);
  }

  // required int32 nSerialID = 3;
  if (has_nserialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nserialid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_extra_double_score_not::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nDouble = 1;
    if (has_ndouble()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ndouble());
    }

    // required int32 nLordDouble = 2;
    if (has_nlorddouble()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nlorddouble());
    }

    // required int32 nSerialID = 3;
    if (has_nserialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nserialid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_extra_double_score_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_extra_double_score_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_extra_double_score_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_extra_double_score_not::MergeFrom(const proto_gc_extra_double_score_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ndouble()) {
      set_ndouble(from.ndouble());
    }
    if (from.has_nlorddouble()) {
      set_nlorddouble(from.nlorddouble());
    }
    if (from.has_nserialid()) {
      set_nserialid(from.nserialid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_extra_double_score_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_extra_double_score_not::CopyFrom(const proto_gc_extra_double_score_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_extra_double_score_not::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void proto_gc_extra_double_score_not::Swap(proto_gc_extra_double_score_not* other) {
  if (other != this) {
    std::swap(ndouble_, other->ndouble_);
    std::swap(nlorddouble_, other->nlorddouble_);
    std::swap(nserialid_, other->nserialid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_extra_double_score_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_extra_double_score_not_descriptor_;
  metadata.reflection = proto_gc_extra_double_score_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_cg_enable_invincible_req::kNOpFieldNumber;
#endif  // !_MSC_VER

proto_cg_enable_invincible_req::proto_cg_enable_invincible_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_cg_enable_invincible_req::InitAsDefaultInstance() {
}

proto_cg_enable_invincible_req::proto_cg_enable_invincible_req(const proto_cg_enable_invincible_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_cg_enable_invincible_req::SharedCtor() {
  _cached_size_ = 0;
  nop_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_cg_enable_invincible_req::~proto_cg_enable_invincible_req() {
  SharedDtor();
}

void proto_cg_enable_invincible_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_cg_enable_invincible_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_cg_enable_invincible_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_cg_enable_invincible_req_descriptor_;
}

const proto_cg_enable_invincible_req& proto_cg_enable_invincible_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_cg_enable_invincible_req* proto_cg_enable_invincible_req::default_instance_ = NULL;

proto_cg_enable_invincible_req* proto_cg_enable_invincible_req::New() const {
  return new proto_cg_enable_invincible_req;
}

void proto_cg_enable_invincible_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nop_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_cg_enable_invincible_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nOp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nop_)));
          set_has_nop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_cg_enable_invincible_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nOp = 1;
  if (has_nop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_cg_enable_invincible_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nOp = 1;
  if (has_nop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_cg_enable_invincible_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nOp = 1;
    if (has_nop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nop());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_cg_enable_invincible_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_cg_enable_invincible_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_cg_enable_invincible_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_cg_enable_invincible_req::MergeFrom(const proto_cg_enable_invincible_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nop()) {
      set_nop(from.nop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_cg_enable_invincible_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_cg_enable_invincible_req::CopyFrom(const proto_cg_enable_invincible_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_cg_enable_invincible_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void proto_cg_enable_invincible_req::Swap(proto_cg_enable_invincible_req* other) {
  if (other != this) {
    std::swap(nop_, other->nop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_cg_enable_invincible_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_cg_enable_invincible_req_descriptor_;
  metadata.reflection = proto_cg_enable_invincible_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_magic_emoji_noti::kCIsErrorFieldNumber;
const int proto_magic_emoji_noti::kCEmojiIndexFieldNumber;
const int proto_magic_emoji_noti::kCFromChairIDFieldNumber;
const int proto_magic_emoji_noti::kCToChairIDFieldNumber;
const int proto_magic_emoji_noti::kCEmojiNumFieldNumber;
#endif  // !_MSC_VER

proto_magic_emoji_noti::proto_magic_emoji_noti()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_magic_emoji_noti::InitAsDefaultInstance() {
}

proto_magic_emoji_noti::proto_magic_emoji_noti(const proto_magic_emoji_noti& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_magic_emoji_noti::SharedCtor() {
  _cached_size_ = 0;
  ciserror_ = 0;
  cemojiindex_ = 0;
  cfromchairid_ = 0;
  ctochairid_ = 0;
  cemojinum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_magic_emoji_noti::~proto_magic_emoji_noti() {
  SharedDtor();
}

void proto_magic_emoji_noti::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_magic_emoji_noti::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_magic_emoji_noti::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_magic_emoji_noti_descriptor_;
}

const proto_magic_emoji_noti& proto_magic_emoji_noti::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_magic_emoji_noti* proto_magic_emoji_noti::default_instance_ = NULL;

proto_magic_emoji_noti* proto_magic_emoji_noti::New() const {
  return new proto_magic_emoji_noti;
}

void proto_magic_emoji_noti::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ciserror_ = 0;
    cemojiindex_ = 0;
    cfromchairid_ = 0;
    ctochairid_ = 0;
    cemojinum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_magic_emoji_noti::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cIsError = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ciserror_)));
          set_has_ciserror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cEmojiIndex;
        break;
      }

      // required int32 cEmojiIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cEmojiIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cemojiindex_)));
          set_has_cemojiindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cFromChairID;
        break;
      }

      // required int32 cFromChairID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cFromChairID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cfromchairid_)));
          set_has_cfromchairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cToChairID;
        break;
      }

      // required int32 cToChairID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cToChairID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctochairid_)));
          set_has_ctochairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cEmojiNum;
        break;
      }

      // required int32 cEmojiNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cEmojiNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cemojinum_)));
          set_has_cemojinum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_magic_emoji_noti::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cIsError = 1;
  if (has_ciserror()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ciserror(), output);
  }

  // required int32 cEmojiIndex = 2;
  if (has_cemojiindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cemojiindex(), output);
  }

  // required int32 cFromChairID = 3;
  if (has_cfromchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cfromchairid(), output);
  }

  // required int32 cToChairID = 4;
  if (has_ctochairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ctochairid(), output);
  }

  // required int32 cEmojiNum = 5;
  if (has_cemojinum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cemojinum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_magic_emoji_noti::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cIsError = 1;
  if (has_ciserror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ciserror(), target);
  }

  // required int32 cEmojiIndex = 2;
  if (has_cemojiindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cemojiindex(), target);
  }

  // required int32 cFromChairID = 3;
  if (has_cfromchairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cfromchairid(), target);
  }

  // required int32 cToChairID = 4;
  if (has_ctochairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ctochairid(), target);
  }

  // required int32 cEmojiNum = 5;
  if (has_cemojinum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cemojinum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_magic_emoji_noti::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cIsError = 1;
    if (has_ciserror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ciserror());
    }

    // required int32 cEmojiIndex = 2;
    if (has_cemojiindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cemojiindex());
    }

    // required int32 cFromChairID = 3;
    if (has_cfromchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cfromchairid());
    }

    // required int32 cToChairID = 4;
    if (has_ctochairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctochairid());
    }

    // required int32 cEmojiNum = 5;
    if (has_cemojinum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cemojinum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_magic_emoji_noti::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_magic_emoji_noti* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_magic_emoji_noti*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_magic_emoji_noti::MergeFrom(const proto_magic_emoji_noti& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ciserror()) {
      set_ciserror(from.ciserror());
    }
    if (from.has_cemojiindex()) {
      set_cemojiindex(from.cemojiindex());
    }
    if (from.has_cfromchairid()) {
      set_cfromchairid(from.cfromchairid());
    }
    if (from.has_ctochairid()) {
      set_ctochairid(from.ctochairid());
    }
    if (from.has_cemojinum()) {
      set_cemojinum(from.cemojinum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_magic_emoji_noti::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_magic_emoji_noti::CopyFrom(const proto_magic_emoji_noti& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_magic_emoji_noti::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void proto_magic_emoji_noti::Swap(proto_magic_emoji_noti* other) {
  if (other != this) {
    std::swap(ciserror_, other->ciserror_);
    std::swap(cemojiindex_, other->cemojiindex_);
    std::swap(cfromchairid_, other->cfromchairid_);
    std::swap(ctochairid_, other->ctochairid_);
    std::swap(cemojinum_, other->cemojinum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_magic_emoji_noti::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_magic_emoji_noti_descriptor_;
  metadata.reflection = proto_magic_emoji_noti_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_task_complete_not::kChairIdFieldNumber;
const int proto_gc_task_complete_not::kTaskStatusFieldNumber;
#endif  // !_MSC_VER

proto_gc_task_complete_not::proto_gc_task_complete_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_task_complete_not::InitAsDefaultInstance() {
}

proto_gc_task_complete_not::proto_gc_task_complete_not(const proto_gc_task_complete_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_task_complete_not::SharedCtor() {
  _cached_size_ = 0;
  chair_id_ = 0;
  task_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_task_complete_not::~proto_gc_task_complete_not() {
  SharedDtor();
}

void proto_gc_task_complete_not::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_task_complete_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_task_complete_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_task_complete_not_descriptor_;
}

const proto_gc_task_complete_not& proto_gc_task_complete_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_task_complete_not* proto_gc_task_complete_not::default_instance_ = NULL;

proto_gc_task_complete_not* proto_gc_task_complete_not::New() const {
  return new proto_gc_task_complete_not;
}

void proto_gc_task_complete_not::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chair_id_ = 0;
    task_status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_task_complete_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chair_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
          set_has_chair_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task_status;
        break;
      }

      // required int32 task_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_status_)));
          set_has_task_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_task_complete_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 chair_id = 1;
  if (has_chair_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chair_id(), output);
  }

  // required int32 task_status = 2;
  if (has_task_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->task_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_task_complete_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 chair_id = 1;
  if (has_chair_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chair_id(), target);
  }

  // required int32 task_status = 2;
  if (has_task_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->task_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_task_complete_not::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chair_id = 1;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chair_id());
    }

    // required int32 task_status = 2;
    if (has_task_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_task_complete_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_task_complete_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_task_complete_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_task_complete_not::MergeFrom(const proto_gc_task_complete_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chair_id()) {
      set_chair_id(from.chair_id());
    }
    if (from.has_task_status()) {
      set_task_status(from.task_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_task_complete_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_task_complete_not::CopyFrom(const proto_gc_task_complete_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_task_complete_not::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void proto_gc_task_complete_not::Swap(proto_gc_task_complete_not* other) {
  if (other != this) {
    std::swap(chair_id_, other->chair_id_);
    std::swap(task_status_, other->task_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_task_complete_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_task_complete_not_descriptor_;
  metadata.reflection = proto_gc_task_complete_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_get_card_ack::kNumFieldNumber;
const int proto_gc_get_card_ack::kVecCards0FieldNumber;
const int proto_gc_get_card_ack::kVecCards1FieldNumber;
const int proto_gc_get_card_ack::kVecCards2FieldNumber;
#endif  // !_MSC_VER

proto_gc_get_card_ack::proto_gc_get_card_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_get_card_ack::InitAsDefaultInstance() {
}

proto_gc_get_card_ack::proto_gc_get_card_ack(const proto_gc_get_card_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_get_card_ack::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_get_card_ack::~proto_gc_get_card_ack() {
  SharedDtor();
}

void proto_gc_get_card_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_get_card_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_get_card_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_get_card_ack_descriptor_;
}

const proto_gc_get_card_ack& proto_gc_get_card_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_get_card_ack* proto_gc_get_card_ack::default_instance_ = NULL;

proto_gc_get_card_ack* proto_gc_get_card_ack::New() const {
  return new proto_gc_get_card_ack;
}

void proto_gc_get_card_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
  }
  veccards0_.Clear();
  veccards1_.Clear();
  veccards2_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_get_card_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vecCards0;
        break;
      }

      // repeated .proto_CCard vecCards0 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecCards0:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_veccards0()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vecCards0;
        if (input->ExpectTag(26)) goto parse_vecCards1;
        break;
      }

      // repeated .proto_CCard vecCards1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecCards1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_veccards1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vecCards1;
        if (input->ExpectTag(34)) goto parse_vecCards2;
        break;
      }

      // repeated .proto_CCard vecCards2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecCards2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_veccards2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_vecCards2;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_get_card_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // repeated .proto_CCard vecCards0 = 2;
  for (int i = 0; i < this->veccards0_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->veccards0(i), output);
  }

  // repeated .proto_CCard vecCards1 = 3;
  for (int i = 0; i < this->veccards1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->veccards1(i), output);
  }

  // repeated .proto_CCard vecCards2 = 4;
  for (int i = 0; i < this->veccards2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->veccards2(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_get_card_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // repeated .proto_CCard vecCards0 = 2;
  for (int i = 0; i < this->veccards0_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->veccards0(i), target);
  }

  // repeated .proto_CCard vecCards1 = 3;
  for (int i = 0; i < this->veccards1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->veccards1(i), target);
  }

  // repeated .proto_CCard vecCards2 = 4;
  for (int i = 0; i < this->veccards2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->veccards2(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_get_card_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  // repeated .proto_CCard vecCards0 = 2;
  total_size += 1 * this->veccards0_size();
  for (int i = 0; i < this->veccards0_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->veccards0(i));
  }

  // repeated .proto_CCard vecCards1 = 3;
  total_size += 1 * this->veccards1_size();
  for (int i = 0; i < this->veccards1_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->veccards1(i));
  }

  // repeated .proto_CCard vecCards2 = 4;
  total_size += 1 * this->veccards2_size();
  for (int i = 0; i < this->veccards2_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->veccards2(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_get_card_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_get_card_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_get_card_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_get_card_ack::MergeFrom(const proto_gc_get_card_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  veccards0_.MergeFrom(from.veccards0_);
  veccards1_.MergeFrom(from.veccards1_);
  veccards2_.MergeFrom(from.veccards2_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_get_card_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_get_card_ack::CopyFrom(const proto_gc_get_card_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_get_card_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < veccards0_size(); i++) {
    if (!this->veccards0(i).IsInitialized()) return false;
  }
  for (int i = 0; i < veccards1_size(); i++) {
    if (!this->veccards1(i).IsInitialized()) return false;
  }
  for (int i = 0; i < veccards2_size(); i++) {
    if (!this->veccards2(i).IsInitialized()) return false;
  }
  return true;
}

void proto_gc_get_card_ack::Swap(proto_gc_get_card_ack* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    veccards0_.Swap(&other->veccards0_);
    veccards1_.Swap(&other->veccards1_);
    veccards2_.Swap(&other->veccards2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_get_card_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_get_card_ack_descriptor_;
  metadata.reflection = proto_gc_get_card_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

proto_cg_lord_card_lottery_info::proto_cg_lord_card_lottery_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_cg_lord_card_lottery_info::InitAsDefaultInstance() {
}

proto_cg_lord_card_lottery_info::proto_cg_lord_card_lottery_info(const proto_cg_lord_card_lottery_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_cg_lord_card_lottery_info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_cg_lord_card_lottery_info::~proto_cg_lord_card_lottery_info() {
  SharedDtor();
}

void proto_cg_lord_card_lottery_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_cg_lord_card_lottery_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_cg_lord_card_lottery_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_cg_lord_card_lottery_info_descriptor_;
}

const proto_cg_lord_card_lottery_info& proto_cg_lord_card_lottery_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_cg_lord_card_lottery_info* proto_cg_lord_card_lottery_info::default_instance_ = NULL;

proto_cg_lord_card_lottery_info* proto_cg_lord_card_lottery_info::New() const {
  return new proto_cg_lord_card_lottery_info;
}

void proto_cg_lord_card_lottery_info::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_cg_lord_card_lottery_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void proto_cg_lord_card_lottery_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_cg_lord_card_lottery_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_cg_lord_card_lottery_info::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_cg_lord_card_lottery_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_cg_lord_card_lottery_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_cg_lord_card_lottery_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_cg_lord_card_lottery_info::MergeFrom(const proto_cg_lord_card_lottery_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_cg_lord_card_lottery_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_cg_lord_card_lottery_info::CopyFrom(const proto_cg_lord_card_lottery_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_cg_lord_card_lottery_info::IsInitialized() const {

  return true;
}

void proto_cg_lord_card_lottery_info::Swap(proto_cg_lord_card_lottery_info* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_cg_lord_card_lottery_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_cg_lord_card_lottery_info_descriptor_;
  metadata.reflection = proto_cg_lord_card_lottery_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

proto_mj_completedata_req::proto_mj_completedata_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_mj_completedata_req::InitAsDefaultInstance() {
}

proto_mj_completedata_req::proto_mj_completedata_req(const proto_mj_completedata_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_mj_completedata_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_mj_completedata_req::~proto_mj_completedata_req() {
  SharedDtor();
}

void proto_mj_completedata_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_mj_completedata_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_mj_completedata_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_mj_completedata_req_descriptor_;
}

const proto_mj_completedata_req& proto_mj_completedata_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_mj_completedata_req* proto_mj_completedata_req::default_instance_ = NULL;

proto_mj_completedata_req* proto_mj_completedata_req::New() const {
  return new proto_mj_completedata_req;
}

void proto_mj_completedata_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_mj_completedata_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void proto_mj_completedata_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_mj_completedata_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_mj_completedata_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_mj_completedata_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_mj_completedata_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_mj_completedata_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_mj_completedata_req::MergeFrom(const proto_mj_completedata_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_mj_completedata_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_mj_completedata_req::CopyFrom(const proto_mj_completedata_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_mj_completedata_req::IsInitialized() const {

  return true;
}

void proto_mj_completedata_req::Swap(proto_mj_completedata_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_mj_completedata_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_mj_completedata_req_descriptor_;
  metadata.reflection = proto_mj_completedata_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_two_show_card_not::kCChairIDFieldNumber;
const int proto_gc_two_show_card_not::kNLordPosFieldNumber;
const int proto_gc_two_show_card_not::kCLordCardFieldNumber;
#endif  // !_MSC_VER

proto_gc_two_show_card_not::proto_gc_two_show_card_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_two_show_card_not::InitAsDefaultInstance() {
  clordcard_ = const_cast< ::proto_CCard*>(&::proto_CCard::default_instance());
}

proto_gc_two_show_card_not::proto_gc_two_show_card_not(const proto_gc_two_show_card_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_two_show_card_not::SharedCtor() {
  _cached_size_ = 0;
  cchairid_ = 0;
  nlordpos_ = 0;
  clordcard_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_two_show_card_not::~proto_gc_two_show_card_not() {
  SharedDtor();
}

void proto_gc_two_show_card_not::SharedDtor() {
  if (this != default_instance_) {
    delete clordcard_;
  }
}

void proto_gc_two_show_card_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_two_show_card_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_two_show_card_not_descriptor_;
}

const proto_gc_two_show_card_not& proto_gc_two_show_card_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_two_show_card_not* proto_gc_two_show_card_not::default_instance_ = NULL;

proto_gc_two_show_card_not* proto_gc_two_show_card_not::New() const {
  return new proto_gc_two_show_card_not;
}

void proto_gc_two_show_card_not::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cchairid_ = 0;
    nlordpos_ = 0;
    if (has_clordcard()) {
      if (clordcard_ != NULL) clordcard_->::proto_CCard::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_two_show_card_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cchairid_)));
          set_has_cchairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nLordPos;
        break;
      }

      // required int32 nLordPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nLordPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nlordpos_)));
          set_has_nlordpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cLordCard;
        break;
      }

      // required .proto_CCard cLordCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cLordCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clordcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_two_show_card_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cChairID = 1;
  if (has_cchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cchairid(), output);
  }

  // required int32 nLordPos = 2;
  if (has_nlordpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nlordpos(), output);
  }

  // required .proto_CCard cLordCard = 3;
  if (has_clordcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->clordcard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_two_show_card_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cChairID = 1;
  if (has_cchairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cchairid(), target);
  }

  // required int32 nLordPos = 2;
  if (has_nlordpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nlordpos(), target);
  }

  // required .proto_CCard cLordCard = 3;
  if (has_clordcard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->clordcard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_two_show_card_not::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cChairID = 1;
    if (has_cchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cchairid());
    }

    // required int32 nLordPos = 2;
    if (has_nlordpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nlordpos());
    }

    // required .proto_CCard cLordCard = 3;
    if (has_clordcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clordcard());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_two_show_card_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_two_show_card_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_two_show_card_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_two_show_card_not::MergeFrom(const proto_gc_two_show_card_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cchairid()) {
      set_cchairid(from.cchairid());
    }
    if (from.has_nlordpos()) {
      set_nlordpos(from.nlordpos());
    }
    if (from.has_clordcard()) {
      mutable_clordcard()->::proto_CCard::MergeFrom(from.clordcard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_two_show_card_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_two_show_card_not::CopyFrom(const proto_gc_two_show_card_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_two_show_card_not::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_clordcard()) {
    if (!this->clordcard().IsInitialized()) return false;
  }
  return true;
}

void proto_gc_two_show_card_not::Swap(proto_gc_two_show_card_not* other) {
  if (other != this) {
    std::swap(cchairid_, other->cchairid_);
    std::swap(nlordpos_, other->nlordpos_);
    std::swap(clordcard_, other->clordcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_two_show_card_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_two_show_card_not_descriptor_;
  metadata.reflection = proto_gc_two_show_card_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_three_draw_ack_data::kRetFieldNumber;
const int proto_gc_three_draw_ack_data::kVecMoneyDiZhusFieldNumber;
const int proto_gc_three_draw_ack_data::kVecKindRatesFieldNumber;
const int proto_gc_three_draw_ack_data::kNBaoDiMoneyFieldNumber;
const int proto_gc_three_draw_ack_data::kNBaoDiRateFieldNumber;
const int proto_gc_three_draw_ack_data::kFMinRateFieldNumber;
#endif  // !_MSC_VER

proto_gc_three_draw_ack_data::proto_gc_three_draw_ack_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_three_draw_ack_data::InitAsDefaultInstance() {
}

proto_gc_three_draw_ack_data::proto_gc_three_draw_ack_data(const proto_gc_three_draw_ack_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_three_draw_ack_data::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  nbaodimoney_ = 0;
  nbaodirate_ = 0;
  fminrate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_three_draw_ack_data::~proto_gc_three_draw_ack_data() {
  SharedDtor();
}

void proto_gc_three_draw_ack_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_three_draw_ack_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_three_draw_ack_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_three_draw_ack_data_descriptor_;
}

const proto_gc_three_draw_ack_data& proto_gc_three_draw_ack_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_three_draw_ack_data* proto_gc_three_draw_ack_data::default_instance_ = NULL;

proto_gc_three_draw_ack_data* proto_gc_three_draw_ack_data::New() const {
  return new proto_gc_three_draw_ack_data;
}

void proto_gc_three_draw_ack_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    nbaodimoney_ = 0;
    nbaodirate_ = 0;
    fminrate_ = 0;
  }
  vecmoneydizhus_.Clear();
  veckindrates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_three_draw_ack_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vecMoneyDiZhus;
        break;
      }

      // repeated .proto_Money_DiZhu vecMoneyDiZhus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecMoneyDiZhus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vecmoneydizhus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vecMoneyDiZhus;
        if (input->ExpectTag(26)) goto parse_vecKindRates;
        break;
      }

      // repeated .proto_Kind_Rate vecKindRates = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecKindRates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_veckindrates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vecKindRates;
        if (input->ExpectTag(32)) goto parse_nBaoDiMoney;
        break;
      }

      // required int32 nBaoDiMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nBaoDiMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nbaodimoney_)));
          set_has_nbaodimoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nBaoDiRate;
        break;
      }

      // required int32 nBaoDiRate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nBaoDiRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nbaodirate_)));
          set_has_nbaodirate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_fMinRate;
        break;
      }

      // required float fMinRate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fMinRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fminrate_)));
          set_has_fminrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_three_draw_ack_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated .proto_Money_DiZhu vecMoneyDiZhus = 2;
  for (int i = 0; i < this->vecmoneydizhus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vecmoneydizhus(i), output);
  }

  // repeated .proto_Kind_Rate vecKindRates = 3;
  for (int i = 0; i < this->veckindrates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->veckindrates(i), output);
  }

  // required int32 nBaoDiMoney = 4;
  if (has_nbaodimoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nbaodimoney(), output);
  }

  // required int32 nBaoDiRate = 5;
  if (has_nbaodirate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nbaodirate(), output);
  }

  // required float fMinRate = 6;
  if (has_fminrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->fminrate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_three_draw_ack_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated .proto_Money_DiZhu vecMoneyDiZhus = 2;
  for (int i = 0; i < this->vecmoneydizhus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vecmoneydizhus(i), target);
  }

  // repeated .proto_Kind_Rate vecKindRates = 3;
  for (int i = 0; i < this->veckindrates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->veckindrates(i), target);
  }

  // required int32 nBaoDiMoney = 4;
  if (has_nbaodimoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nbaodimoney(), target);
  }

  // required int32 nBaoDiRate = 5;
  if (has_nbaodirate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nbaodirate(), target);
  }

  // required float fMinRate = 6;
  if (has_fminrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->fminrate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_three_draw_ack_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required int32 nBaoDiMoney = 4;
    if (has_nbaodimoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbaodimoney());
    }

    // required int32 nBaoDiRate = 5;
    if (has_nbaodirate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbaodirate());
    }

    // required float fMinRate = 6;
    if (has_fminrate()) {
      total_size += 1 + 4;
    }

  }
  // repeated .proto_Money_DiZhu vecMoneyDiZhus = 2;
  total_size += 1 * this->vecmoneydizhus_size();
  for (int i = 0; i < this->vecmoneydizhus_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vecmoneydizhus(i));
  }

  // repeated .proto_Kind_Rate vecKindRates = 3;
  total_size += 1 * this->veckindrates_size();
  for (int i = 0; i < this->veckindrates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->veckindrates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_three_draw_ack_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_three_draw_ack_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_three_draw_ack_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_three_draw_ack_data::MergeFrom(const proto_gc_three_draw_ack_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  vecmoneydizhus_.MergeFrom(from.vecmoneydizhus_);
  veckindrates_.MergeFrom(from.veckindrates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_nbaodimoney()) {
      set_nbaodimoney(from.nbaodimoney());
    }
    if (from.has_nbaodirate()) {
      set_nbaodirate(from.nbaodirate());
    }
    if (from.has_fminrate()) {
      set_fminrate(from.fminrate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_three_draw_ack_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_three_draw_ack_data::CopyFrom(const proto_gc_three_draw_ack_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_three_draw_ack_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000039) != 0x00000039) return false;

  for (int i = 0; i < vecmoneydizhus_size(); i++) {
    if (!this->vecmoneydizhus(i).IsInitialized()) return false;
  }
  for (int i = 0; i < veckindrates_size(); i++) {
    if (!this->veckindrates(i).IsInitialized()) return false;
  }
  return true;
}

void proto_gc_three_draw_ack_data::Swap(proto_gc_three_draw_ack_data* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    vecmoneydizhus_.Swap(&other->vecmoneydizhus_);
    veckindrates_.Swap(&other->veckindrates_);
    std::swap(nbaodimoney_, other->nbaodimoney_);
    std::swap(nbaodirate_, other->nbaodirate_);
    std::swap(fminrate_, other->fminrate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_three_draw_ack_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_three_draw_ack_data_descriptor_;
  metadata.reflection = proto_gc_three_draw_ack_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_stUserResult1::kNChairIDFieldNumber;
const int proto_stUserResult1::kNScoreFieldNumber;
const int proto_stUserResult1::kNJifenFieldNumber;
#endif  // !_MSC_VER

proto_stUserResult1::proto_stUserResult1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_stUserResult1::InitAsDefaultInstance() {
}

proto_stUserResult1::proto_stUserResult1(const proto_stUserResult1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_stUserResult1::SharedCtor() {
  _cached_size_ = 0;
  nchairid_ = 0;
  nscore_ = 0;
  njifen_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_stUserResult1::~proto_stUserResult1() {
  SharedDtor();
}

void proto_stUserResult1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_stUserResult1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_stUserResult1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_stUserResult1_descriptor_;
}

const proto_stUserResult1& proto_stUserResult1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_stUserResult1* proto_stUserResult1::default_instance_ = NULL;

proto_stUserResult1* proto_stUserResult1::New() const {
  return new proto_stUserResult1;
}

void proto_stUserResult1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nchairid_ = 0;
    nscore_ = 0;
    njifen_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_stUserResult1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nchairid_)));
          set_has_nchairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nScore;
        break;
      }

      // required int32 nScore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nscore_)));
          set_has_nscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nJifen;
        break;
      }

      // required int32 nJifen = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nJifen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &njifen_)));
          set_has_njifen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_stUserResult1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nChairID = 1;
  if (has_nchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nchairid(), output);
  }

  // required int32 nScore = 2;
  if (has_nscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nscore(), output);
  }

  // required int32 nJifen = 3;
  if (has_njifen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->njifen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_stUserResult1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nChairID = 1;
  if (has_nchairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nchairid(), target);
  }

  // required int32 nScore = 2;
  if (has_nscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nscore(), target);
  }

  // required int32 nJifen = 3;
  if (has_njifen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->njifen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_stUserResult1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nChairID = 1;
    if (has_nchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nchairid());
    }

    // required int32 nScore = 2;
    if (has_nscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nscore());
    }

    // required int32 nJifen = 3;
    if (has_njifen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->njifen());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_stUserResult1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_stUserResult1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_stUserResult1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_stUserResult1::MergeFrom(const proto_stUserResult1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nchairid()) {
      set_nchairid(from.nchairid());
    }
    if (from.has_nscore()) {
      set_nscore(from.nscore());
    }
    if (from.has_njifen()) {
      set_njifen(from.njifen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_stUserResult1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_stUserResult1::CopyFrom(const proto_stUserResult1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_stUserResult1::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void proto_stUserResult1::Swap(proto_stUserResult1* other) {
  if (other != this) {
    std::swap(nchairid_, other->nchairid_);
    std::swap(nscore_, other->nscore_);
    std::swap(njifen_, other->njifen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_stUserResult1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_stUserResult1_descriptor_;
  metadata.reflection = proto_stUserResult1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_Kind_Rate::kStrKindFieldNumber;
const int proto_Kind_Rate::kStrRateFieldNumber;
#endif  // !_MSC_VER

proto_Kind_Rate::proto_Kind_Rate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_Kind_Rate::InitAsDefaultInstance() {
}

proto_Kind_Rate::proto_Kind_Rate(const proto_Kind_Rate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_Kind_Rate::SharedCtor() {
  _cached_size_ = 0;
  strkind_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strrate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_Kind_Rate::~proto_Kind_Rate() {
  SharedDtor();
}

void proto_Kind_Rate::SharedDtor() {
  if (strkind_ != &::google::protobuf::internal::kEmptyString) {
    delete strkind_;
  }
  if (strrate_ != &::google::protobuf::internal::kEmptyString) {
    delete strrate_;
  }
  if (this != default_instance_) {
  }
}

void proto_Kind_Rate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_Kind_Rate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_Kind_Rate_descriptor_;
}

const proto_Kind_Rate& proto_Kind_Rate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_Kind_Rate* proto_Kind_Rate::default_instance_ = NULL;

proto_Kind_Rate* proto_Kind_Rate::New() const {
  return new proto_Kind_Rate;
}

void proto_Kind_Rate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_strkind()) {
      if (strkind_ != &::google::protobuf::internal::kEmptyString) {
        strkind_->clear();
      }
    }
    if (has_strrate()) {
      if (strrate_ != &::google::protobuf::internal::kEmptyString) {
        strrate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_Kind_Rate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string strKind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strkind()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strkind().data(), this->strkind().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strRate;
        break;
      }

      // required string strRate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strRate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strrate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strrate().data(), this->strrate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_Kind_Rate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string strKind = 1;
  if (has_strkind()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strkind().data(), this->strkind().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->strkind(), output);
  }

  // required string strRate = 2;
  if (has_strrate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strrate().data(), this->strrate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strrate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_Kind_Rate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string strKind = 1;
  if (has_strkind()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strkind().data(), this->strkind().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strkind(), target);
  }

  // required string strRate = 2;
  if (has_strrate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strrate().data(), this->strrate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strrate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_Kind_Rate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string strKind = 1;
    if (has_strkind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strkind());
    }

    // required string strRate = 2;
    if (has_strrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strrate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_Kind_Rate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_Kind_Rate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_Kind_Rate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_Kind_Rate::MergeFrom(const proto_Kind_Rate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strkind()) {
      set_strkind(from.strkind());
    }
    if (from.has_strrate()) {
      set_strrate(from.strrate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_Kind_Rate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_Kind_Rate::CopyFrom(const proto_Kind_Rate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_Kind_Rate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void proto_Kind_Rate::Swap(proto_Kind_Rate* other) {
  if (other != this) {
    std::swap(strkind_, other->strkind_);
    std::swap(strrate_, other->strrate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_Kind_Rate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_Kind_Rate_descriptor_;
  metadata.reflection = proto_Kind_Rate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_cg_get_card_req::kNSerialIDFieldNumber;
#endif  // !_MSC_VER

proto_cg_get_card_req::proto_cg_get_card_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_cg_get_card_req::InitAsDefaultInstance() {
}

proto_cg_get_card_req::proto_cg_get_card_req(const proto_cg_get_card_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_cg_get_card_req::SharedCtor() {
  _cached_size_ = 0;
  nserialid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_cg_get_card_req::~proto_cg_get_card_req() {
  SharedDtor();
}

void proto_cg_get_card_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_cg_get_card_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_cg_get_card_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_cg_get_card_req_descriptor_;
}

const proto_cg_get_card_req& proto_cg_get_card_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_cg_get_card_req* proto_cg_get_card_req::default_instance_ = NULL;

proto_cg_get_card_req* proto_cg_get_card_req::New() const {
  return new proto_cg_get_card_req;
}

void proto_cg_get_card_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nserialid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_cg_get_card_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nSerialID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nserialid_)));
          set_has_nserialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_cg_get_card_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nSerialID = 1;
  if (has_nserialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nserialid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_cg_get_card_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nSerialID = 1;
  if (has_nserialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nserialid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_cg_get_card_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nSerialID = 1;
    if (has_nserialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nserialid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_cg_get_card_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_cg_get_card_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_cg_get_card_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_cg_get_card_req::MergeFrom(const proto_cg_get_card_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nserialid()) {
      set_nserialid(from.nserialid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_cg_get_card_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_cg_get_card_req::CopyFrom(const proto_cg_get_card_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_cg_get_card_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void proto_cg_get_card_req::Swap(proto_cg_get_card_req* other) {
  if (other != this) {
    std::swap(nserialid_, other->nserialid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_cg_get_card_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_cg_get_card_req_descriptor_;
  metadata.reflection = proto_cg_get_card_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_lord_card_lottery_info::kFeeFieldNumber;
const int proto_gc_lord_card_lottery_info::kVecRewardFieldNumber;
#endif  // !_MSC_VER

proto_gc_lord_card_lottery_info::proto_gc_lord_card_lottery_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_lord_card_lottery_info::InitAsDefaultInstance() {
}

proto_gc_lord_card_lottery_info::proto_gc_lord_card_lottery_info(const proto_gc_lord_card_lottery_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_lord_card_lottery_info::SharedCtor() {
  _cached_size_ = 0;
  fee_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_lord_card_lottery_info::~proto_gc_lord_card_lottery_info() {
  SharedDtor();
}

void proto_gc_lord_card_lottery_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_lord_card_lottery_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_lord_card_lottery_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_lord_card_lottery_info_descriptor_;
}

const proto_gc_lord_card_lottery_info& proto_gc_lord_card_lottery_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_lord_card_lottery_info* proto_gc_lord_card_lottery_info::default_instance_ = NULL;

proto_gc_lord_card_lottery_info* proto_gc_lord_card_lottery_info::New() const {
  return new proto_gc_lord_card_lottery_info;
}

void proto_gc_lord_card_lottery_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fee_ = 0;
  }
  vecreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_lord_card_lottery_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fee = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fee_)));
          set_has_fee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vecReward;
        break;
      }

      // repeated int32 vecReward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vecReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_vecreward())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_vecreward())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vecReward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_lord_card_lottery_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 fee = 1;
  if (has_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fee(), output);
  }

  // repeated int32 vecReward = 2;
  for (int i = 0; i < this->vecreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->vecreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_lord_card_lottery_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 fee = 1;
  if (has_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fee(), target);
  }

  // repeated int32 vecReward = 2;
  for (int i = 0; i < this->vecreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->vecreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_lord_card_lottery_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 fee = 1;
    if (has_fee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fee());
    }

  }
  // repeated int32 vecReward = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->vecreward_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->vecreward(i));
    }
    total_size += 1 * this->vecreward_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_lord_card_lottery_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_lord_card_lottery_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_lord_card_lottery_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_lord_card_lottery_info::MergeFrom(const proto_gc_lord_card_lottery_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  vecreward_.MergeFrom(from.vecreward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fee()) {
      set_fee(from.fee());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_lord_card_lottery_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_lord_card_lottery_info::CopyFrom(const proto_gc_lord_card_lottery_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_lord_card_lottery_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void proto_gc_lord_card_lottery_info::Swap(proto_gc_lord_card_lottery_info* other) {
  if (other != this) {
    std::swap(fee_, other->fee_);
    vecreward_.Swap(&other->vecreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_lord_card_lottery_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_lord_card_lottery_info_descriptor_;
  metadata.reflection = proto_gc_lord_card_lottery_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_get_lord_card_reward::kIndexFieldNumber;
const int proto_gc_get_lord_card_reward::kMoneyFieldNumber;
#endif  // !_MSC_VER

proto_gc_get_lord_card_reward::proto_gc_get_lord_card_reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_get_lord_card_reward::InitAsDefaultInstance() {
}

proto_gc_get_lord_card_reward::proto_gc_get_lord_card_reward(const proto_gc_get_lord_card_reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_get_lord_card_reward::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  money_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_get_lord_card_reward::~proto_gc_get_lord_card_reward() {
  SharedDtor();
}

void proto_gc_get_lord_card_reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_get_lord_card_reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_get_lord_card_reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_get_lord_card_reward_descriptor_;
}

const proto_gc_get_lord_card_reward& proto_gc_get_lord_card_reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_get_lord_card_reward* proto_gc_get_lord_card_reward::default_instance_ = NULL;

proto_gc_get_lord_card_reward* proto_gc_get_lord_card_reward::New() const {
  return new proto_gc_get_lord_card_reward;
}

void proto_gc_get_lord_card_reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    money_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_get_lord_card_reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_money;
        break;
      }

      // required int32 money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_get_lord_card_reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required int32 money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_get_lord_card_reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required int32 money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_get_lord_card_reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_get_lord_card_reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_get_lord_card_reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_get_lord_card_reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_get_lord_card_reward::MergeFrom(const proto_gc_get_lord_card_reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_get_lord_card_reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_get_lord_card_reward::CopyFrom(const proto_gc_get_lord_card_reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_get_lord_card_reward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void proto_gc_get_lord_card_reward::Swap(proto_gc_get_lord_card_reward* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_get_lord_card_reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_get_lord_card_reward_descriptor_;
  metadata.reflection = proto_gc_get_lord_card_reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_Money_DiZhu::kNMoneyFieldNumber;
const int proto_Money_DiZhu::kNDiZhuFieldNumber;
#endif  // !_MSC_VER

proto_Money_DiZhu::proto_Money_DiZhu()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_Money_DiZhu::InitAsDefaultInstance() {
}

proto_Money_DiZhu::proto_Money_DiZhu(const proto_Money_DiZhu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_Money_DiZhu::SharedCtor() {
  _cached_size_ = 0;
  nmoney_ = GOOGLE_LONGLONG(0);
  ndizhu_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_Money_DiZhu::~proto_Money_DiZhu() {
  SharedDtor();
}

void proto_Money_DiZhu::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_Money_DiZhu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_Money_DiZhu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_Money_DiZhu_descriptor_;
}

const proto_Money_DiZhu& proto_Money_DiZhu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_Money_DiZhu* proto_Money_DiZhu::default_instance_ = NULL;

proto_Money_DiZhu* proto_Money_DiZhu::New() const {
  return new proto_Money_DiZhu;
}

void proto_Money_DiZhu::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nmoney_ = GOOGLE_LONGLONG(0);
    ndizhu_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_Money_DiZhu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 nMoney = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nmoney_)));
          set_has_nmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nDiZhu;
        break;
      }

      // required int64 nDiZhu = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nDiZhu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ndizhu_)));
          set_has_ndizhu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_Money_DiZhu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 nMoney = 1;
  if (has_nmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->nmoney(), output);
  }

  // required int64 nDiZhu = 2;
  if (has_ndizhu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ndizhu(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_Money_DiZhu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 nMoney = 1;
  if (has_nmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->nmoney(), target);
  }

  // required int64 nDiZhu = 2;
  if (has_ndizhu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ndizhu(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_Money_DiZhu::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 nMoney = 1;
    if (has_nmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nmoney());
    }

    // required int64 nDiZhu = 2;
    if (has_ndizhu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ndizhu());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_Money_DiZhu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_Money_DiZhu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_Money_DiZhu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_Money_DiZhu::MergeFrom(const proto_Money_DiZhu& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nmoney()) {
      set_nmoney(from.nmoney());
    }
    if (from.has_ndizhu()) {
      set_ndizhu(from.ndizhu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_Money_DiZhu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_Money_DiZhu::CopyFrom(const proto_Money_DiZhu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_Money_DiZhu::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void proto_Money_DiZhu::Swap(proto_Money_DiZhu* other) {
  if (other != this) {
    std::swap(nmoney_, other->nmoney_);
    std::swap(ndizhu_, other->ndizhu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_Money_DiZhu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_Money_DiZhu_descriptor_;
  metadata.reflection = proto_Money_DiZhu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_three_draw_ack_card::kRetFieldNumber;
const int proto_gc_three_draw_ack_card::kVecCardsFieldNumber;
const int proto_gc_three_draw_ack_card::kVecRatesFieldNumber;
const int proto_gc_three_draw_ack_card::kNMoneyFieldNumber;
const int proto_gc_three_draw_ack_card::kNDiZhuFieldNumber;
const int proto_gc_three_draw_ack_card::kFRateFieldNumber;
#endif  // !_MSC_VER

proto_gc_three_draw_ack_card::proto_gc_three_draw_ack_card()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_three_draw_ack_card::InitAsDefaultInstance() {
}

proto_gc_three_draw_ack_card::proto_gc_three_draw_ack_card(const proto_gc_three_draw_ack_card& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_three_draw_ack_card::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  nmoney_ = GOOGLE_LONGLONG(0);
  ndizhu_ = GOOGLE_LONGLONG(0);
  frate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_three_draw_ack_card::~proto_gc_three_draw_ack_card() {
  SharedDtor();
}

void proto_gc_three_draw_ack_card::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_three_draw_ack_card::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_three_draw_ack_card::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_three_draw_ack_card_descriptor_;
}

const proto_gc_three_draw_ack_card& proto_gc_three_draw_ack_card::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_three_draw_ack_card* proto_gc_three_draw_ack_card::default_instance_ = NULL;

proto_gc_three_draw_ack_card* proto_gc_three_draw_ack_card::New() const {
  return new proto_gc_three_draw_ack_card;
}

void proto_gc_three_draw_ack_card::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    nmoney_ = GOOGLE_LONGLONG(0);
    ndizhu_ = GOOGLE_LONGLONG(0);
    frate_ = 0;
  }
  veccards_.Clear();
  vecrates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_three_draw_ack_card::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vecCards;
        break;
      }

      // repeated .proto_CCard vecCards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_veccards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vecCards;
        if (input->ExpectTag(29)) goto parse_vecRates;
        break;
      }

      // repeated float vecRates = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_vecRates:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_vecrates())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_vecrates())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_vecRates;
        if (input->ExpectTag(32)) goto parse_nMoney;
        break;
      }

      // required int64 nMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nmoney_)));
          set_has_nmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nDiZhu;
        break;
      }

      // required int64 nDiZhu = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nDiZhu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ndizhu_)));
          set_has_ndizhu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_fRate;
        break;
      }

      // required float fRate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frate_)));
          set_has_frate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_three_draw_ack_card::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated .proto_CCard vecCards = 2;
  for (int i = 0; i < this->veccards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->veccards(i), output);
  }

  // repeated float vecRates = 3;
  for (int i = 0; i < this->vecrates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->vecrates(i), output);
  }

  // required int64 nMoney = 4;
  if (has_nmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->nmoney(), output);
  }

  // required int64 nDiZhu = 5;
  if (has_ndizhu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->ndizhu(), output);
  }

  // required float fRate = 6;
  if (has_frate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->frate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_three_draw_ack_card::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated .proto_CCard vecCards = 2;
  for (int i = 0; i < this->veccards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->veccards(i), target);
  }

  // repeated float vecRates = 3;
  for (int i = 0; i < this->vecrates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->vecrates(i), target);
  }

  // required int64 nMoney = 4;
  if (has_nmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->nmoney(), target);
  }

  // required int64 nDiZhu = 5;
  if (has_ndizhu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->ndizhu(), target);
  }

  // required float fRate = 6;
  if (has_frate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->frate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_three_draw_ack_card::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required int64 nMoney = 4;
    if (has_nmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nmoney());
    }

    // required int64 nDiZhu = 5;
    if (has_ndizhu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ndizhu());
    }

    // required float fRate = 6;
    if (has_frate()) {
      total_size += 1 + 4;
    }

  }
  // repeated .proto_CCard vecCards = 2;
  total_size += 1 * this->veccards_size();
  for (int i = 0; i < this->veccards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->veccards(i));
  }

  // repeated float vecRates = 3;
  {
    int data_size = 0;
    data_size = 4 * this->vecrates_size();
    total_size += 1 * this->vecrates_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_three_draw_ack_card::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_three_draw_ack_card* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_three_draw_ack_card*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_three_draw_ack_card::MergeFrom(const proto_gc_three_draw_ack_card& from) {
  GOOGLE_CHECK_NE(&from, this);
  veccards_.MergeFrom(from.veccards_);
  vecrates_.MergeFrom(from.vecrates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_nmoney()) {
      set_nmoney(from.nmoney());
    }
    if (from.has_ndizhu()) {
      set_ndizhu(from.ndizhu());
    }
    if (from.has_frate()) {
      set_frate(from.frate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_three_draw_ack_card::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_three_draw_ack_card::CopyFrom(const proto_gc_three_draw_ack_card& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_three_draw_ack_card::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000039) != 0x00000039) return false;

  for (int i = 0; i < veccards_size(); i++) {
    if (!this->veccards(i).IsInitialized()) return false;
  }
  return true;
}

void proto_gc_three_draw_ack_card::Swap(proto_gc_three_draw_ack_card* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    veccards_.Swap(&other->veccards_);
    vecrates_.Swap(&other->vecrates_);
    std::swap(nmoney_, other->nmoney_);
    std::swap(ndizhu_, other->ndizhu_);
    std::swap(frate_, other->frate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_three_draw_ack_card::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_three_draw_ack_card_descriptor_;
  metadata.reflection = proto_gc_three_draw_ack_card_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_svr_test_not::kCTestFieldNumber;
const int proto_svr_test_not::kNTestFieldNumber;
const int proto_svr_test_not::kVecTestFieldNumber;
#endif  // !_MSC_VER

proto_svr_test_not::proto_svr_test_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_svr_test_not::InitAsDefaultInstance() {
}

proto_svr_test_not::proto_svr_test_not(const proto_svr_test_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_svr_test_not::SharedCtor() {
  _cached_size_ = 0;
  ctest_ = 0;
  ntest_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_svr_test_not::~proto_svr_test_not() {
  SharedDtor();
}

void proto_svr_test_not::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_svr_test_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_svr_test_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_svr_test_not_descriptor_;
}

const proto_svr_test_not& proto_svr_test_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_svr_test_not* proto_svr_test_not::default_instance_ = NULL;

proto_svr_test_not* proto_svr_test_not::New() const {
  return new proto_svr_test_not;
}

void proto_svr_test_not::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ctest_ = 0;
    ntest_ = 0;
  }
  vectest_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_svr_test_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cTest = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctest_)));
          set_has_ctest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nTest;
        break;
      }

      // required int32 nTest = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nTest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntest_)));
          set_has_ntest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vecTest;
        break;
      }

      // repeated int32 vecTest = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vecTest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_vectest())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_vectest())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vecTest;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_svr_test_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cTest = 1;
  if (has_ctest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ctest(), output);
  }

  // required int32 nTest = 2;
  if (has_ntest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ntest(), output);
  }

  // repeated int32 vecTest = 3;
  for (int i = 0; i < this->vectest_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->vectest(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_svr_test_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cTest = 1;
  if (has_ctest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ctest(), target);
  }

  // required int32 nTest = 2;
  if (has_ntest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ntest(), target);
  }

  // repeated int32 vecTest = 3;
  for (int i = 0; i < this->vectest_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->vectest(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_svr_test_not::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cTest = 1;
    if (has_ctest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctest());
    }

    // required int32 nTest = 2;
    if (has_ntest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntest());
    }

  }
  // repeated int32 vecTest = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->vectest_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->vectest(i));
    }
    total_size += 1 * this->vectest_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_svr_test_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_svr_test_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_svr_test_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_svr_test_not::MergeFrom(const proto_svr_test_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  vectest_.MergeFrom(from.vectest_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ctest()) {
      set_ctest(from.ctest());
    }
    if (from.has_ntest()) {
      set_ntest(from.ntest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_svr_test_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_svr_test_not::CopyFrom(const proto_svr_test_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_svr_test_not::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void proto_svr_test_not::Swap(proto_svr_test_not* other) {
  if (other != this) {
    std::swap(ctest_, other->ctest_);
    std::swap(ntest_, other->ntest_);
    vectest_.Swap(&other->vectest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_svr_test_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_svr_test_not_descriptor_;
  metadata.reflection = proto_svr_test_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_get_redpackets_newbie_award_not::kNRetFieldNumber;
const int proto_gc_get_redpackets_newbie_award_not::kNAmountFieldNumber;
#endif  // !_MSC_VER

proto_gc_get_redpackets_newbie_award_not::proto_gc_get_redpackets_newbie_award_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_get_redpackets_newbie_award_not::InitAsDefaultInstance() {
}

proto_gc_get_redpackets_newbie_award_not::proto_gc_get_redpackets_newbie_award_not(const proto_gc_get_redpackets_newbie_award_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_get_redpackets_newbie_award_not::SharedCtor() {
  _cached_size_ = 0;
  nret_ = 0;
  namount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_get_redpackets_newbie_award_not::~proto_gc_get_redpackets_newbie_award_not() {
  SharedDtor();
}

void proto_gc_get_redpackets_newbie_award_not::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_get_redpackets_newbie_award_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_get_redpackets_newbie_award_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_get_redpackets_newbie_award_not_descriptor_;
}

const proto_gc_get_redpackets_newbie_award_not& proto_gc_get_redpackets_newbie_award_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_get_redpackets_newbie_award_not* proto_gc_get_redpackets_newbie_award_not::default_instance_ = NULL;

proto_gc_get_redpackets_newbie_award_not* proto_gc_get_redpackets_newbie_award_not::New() const {
  return new proto_gc_get_redpackets_newbie_award_not;
}

void proto_gc_get_redpackets_newbie_award_not::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nret_ = 0;
    namount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_get_redpackets_newbie_award_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nRet = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nret_)));
          set_has_nret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nAmount;
        break;
      }

      // required int32 nAmount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &namount_)));
          set_has_namount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_get_redpackets_newbie_award_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nRet = 1;
  if (has_nret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nret(), output);
  }

  // required int32 nAmount = 2;
  if (has_namount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->namount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_get_redpackets_newbie_award_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nRet = 1;
  if (has_nret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nret(), target);
  }

  // required int32 nAmount = 2;
  if (has_namount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->namount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_get_redpackets_newbie_award_not::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nRet = 1;
    if (has_nret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nret());
    }

    // required int32 nAmount = 2;
    if (has_namount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->namount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_get_redpackets_newbie_award_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_get_redpackets_newbie_award_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_get_redpackets_newbie_award_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_get_redpackets_newbie_award_not::MergeFrom(const proto_gc_get_redpackets_newbie_award_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nret()) {
      set_nret(from.nret());
    }
    if (from.has_namount()) {
      set_namount(from.namount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_get_redpackets_newbie_award_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_get_redpackets_newbie_award_not::CopyFrom(const proto_gc_get_redpackets_newbie_award_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_get_redpackets_newbie_award_not::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void proto_gc_get_redpackets_newbie_award_not::Swap(proto_gc_get_redpackets_newbie_award_not* other) {
  if (other != this) {
    std::swap(nret_, other->nret_);
    std::swap(namount_, other->namount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_get_redpackets_newbie_award_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_get_redpackets_newbie_award_not_descriptor_;
  metadata.reflection = proto_gc_get_redpackets_newbie_award_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_CCard::kMNColorFieldNumber;
const int proto_CCard::kMNValueFieldNumber;
const int proto_CCard::kMNCardBaovalueFieldNumber;
#endif  // !_MSC_VER

proto_CCard::proto_CCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_CCard::InitAsDefaultInstance() {
}

proto_CCard::proto_CCard(const proto_CCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_CCard::SharedCtor() {
  _cached_size_ = 0;
  m_ncolor_ = 0;
  m_nvalue_ = 0;
  m_ncard_baovalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_CCard::~proto_CCard() {
  SharedDtor();
}

void proto_CCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_CCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_CCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_CCard_descriptor_;
}

const proto_CCard& proto_CCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_CCard* proto_CCard::default_instance_ = NULL;

proto_CCard* proto_CCard::New() const {
  return new proto_CCard;
}

void proto_CCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ncolor_ = 0;
    m_nvalue_ = 0;
    m_ncard_baovalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_CCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nColor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ncolor_)));
          set_has_m_ncolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nValue;
        break;
      }

      // required int32 m_nValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nvalue_)));
          set_has_m_nvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_nCard_Baovalue;
        break;
      }

      // required int32 m_nCard_Baovalue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nCard_Baovalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ncard_baovalue_)));
          set_has_m_ncard_baovalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_CCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nColor = 1;
  if (has_m_ncolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_ncolor(), output);
  }

  // required int32 m_nValue = 2;
  if (has_m_nvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_nvalue(), output);
  }

  // required int32 m_nCard_Baovalue = 3;
  if (has_m_ncard_baovalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_ncard_baovalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_CCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nColor = 1;
  if (has_m_ncolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_ncolor(), target);
  }

  // required int32 m_nValue = 2;
  if (has_m_nvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_nvalue(), target);
  }

  // required int32 m_nCard_Baovalue = 3;
  if (has_m_ncard_baovalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_ncard_baovalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_CCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nColor = 1;
    if (has_m_ncolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ncolor());
    }

    // required int32 m_nValue = 2;
    if (has_m_nvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nvalue());
    }

    // required int32 m_nCard_Baovalue = 3;
    if (has_m_ncard_baovalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ncard_baovalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_CCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_CCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_CCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_CCard::MergeFrom(const proto_CCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ncolor()) {
      set_m_ncolor(from.m_ncolor());
    }
    if (from.has_m_nvalue()) {
      set_m_nvalue(from.m_nvalue());
    }
    if (from.has_m_ncard_baovalue()) {
      set_m_ncard_baovalue(from.m_ncard_baovalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_CCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_CCard::CopyFrom(const proto_CCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_CCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void proto_CCard::Swap(proto_CCard* other) {
  if (other != this) {
    std::swap(m_ncolor_, other->m_ncolor_);
    std::swap(m_nvalue_, other->m_nvalue_);
    std::swap(m_ncard_baovalue_, other->m_ncard_baovalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_CCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_CCard_descriptor_;
  metadata.reflection = proto_CCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_lord_card_not::kCLordFieldNumber;
const int proto_gc_lord_card_not::kVecCardsFieldNumber;
#endif  // !_MSC_VER

proto_gc_lord_card_not::proto_gc_lord_card_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_lord_card_not::InitAsDefaultInstance() {
}

proto_gc_lord_card_not::proto_gc_lord_card_not(const proto_gc_lord_card_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_lord_card_not::SharedCtor() {
  _cached_size_ = 0;
  clord_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_lord_card_not::~proto_gc_lord_card_not() {
  SharedDtor();
}

void proto_gc_lord_card_not::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_lord_card_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_lord_card_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_lord_card_not_descriptor_;
}

const proto_gc_lord_card_not& proto_gc_lord_card_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_lord_card_not* proto_gc_lord_card_not::default_instance_ = NULL;

proto_gc_lord_card_not* proto_gc_lord_card_not::New() const {
  return new proto_gc_lord_card_not;
}

void proto_gc_lord_card_not::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clord_ = 0;
  }
  veccards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_lord_card_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cLord = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clord_)));
          set_has_clord();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vecCards;
        break;
      }

      // repeated .proto_CCard vecCards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_veccards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vecCards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_lord_card_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cLord = 1;
  if (has_clord()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clord(), output);
  }

  // repeated .proto_CCard vecCards = 2;
  for (int i = 0; i < this->veccards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->veccards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_lord_card_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cLord = 1;
  if (has_clord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clord(), target);
  }

  // repeated .proto_CCard vecCards = 2;
  for (int i = 0; i < this->veccards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->veccards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_lord_card_not::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cLord = 1;
    if (has_clord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clord());
    }

  }
  // repeated .proto_CCard vecCards = 2;
  total_size += 1 * this->veccards_size();
  for (int i = 0; i < this->veccards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->veccards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_lord_card_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_lord_card_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_lord_card_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_lord_card_not::MergeFrom(const proto_gc_lord_card_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  veccards_.MergeFrom(from.veccards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clord()) {
      set_clord(from.clord());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_lord_card_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_lord_card_not::CopyFrom(const proto_gc_lord_card_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_lord_card_not::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < veccards_size(); i++) {
    if (!this->veccards(i).IsInitialized()) return false;
  }
  return true;
}

void proto_gc_lord_card_not::Swap(proto_gc_lord_card_not* other) {
  if (other != this) {
    std::swap(clord_, other->clord_);
    veccards_.Swap(&other->veccards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_lord_card_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_lord_card_not_descriptor_;
  metadata.reflection = proto_gc_lord_card_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_counts_not::kCountsNumFieldNumber;
#endif  // !_MSC_VER

proto_gc_counts_not::proto_gc_counts_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_counts_not::InitAsDefaultInstance() {
}

proto_gc_counts_not::proto_gc_counts_not(const proto_gc_counts_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_counts_not::SharedCtor() {
  _cached_size_ = 0;
  counts_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_counts_not::~proto_gc_counts_not() {
  SharedDtor();
}

void proto_gc_counts_not::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_counts_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_counts_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_counts_not_descriptor_;
}

const proto_gc_counts_not& proto_gc_counts_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_counts_not* proto_gc_counts_not::default_instance_ = NULL;

proto_gc_counts_not* proto_gc_counts_not::New() const {
  return new proto_gc_counts_not;
}

void proto_gc_counts_not::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    counts_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_counts_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 counts_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &counts_num_)));
          set_has_counts_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_counts_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 counts_num = 1;
  if (has_counts_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->counts_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_counts_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 counts_num = 1;
  if (has_counts_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->counts_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_counts_not::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 counts_num = 1;
    if (has_counts_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->counts_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_counts_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_counts_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_counts_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_counts_not::MergeFrom(const proto_gc_counts_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_counts_num()) {
      set_counts_num(from.counts_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_counts_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_counts_not::CopyFrom(const proto_gc_counts_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_counts_not::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void proto_gc_counts_not::Swap(proto_gc_counts_not* other) {
  if (other != this) {
    std::swap(counts_num_, other->counts_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_counts_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_counts_not_descriptor_;
  metadata.reflection = proto_gc_counts_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_regain_lose_score_ack::kNRetFieldNumber;
const int proto_gc_regain_lose_score_ack::kNTimeFieldNumber;
const int proto_gc_regain_lose_score_ack::kNValueFieldNumber;
const int proto_gc_regain_lose_score_ack::kNCurCountFieldNumber;
const int proto_gc_regain_lose_score_ack::kNItemIndexFieldNumber;
const int proto_gc_regain_lose_score_ack::kNItemNumFieldNumber;
#endif  // !_MSC_VER

proto_gc_regain_lose_score_ack::proto_gc_regain_lose_score_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_regain_lose_score_ack::InitAsDefaultInstance() {
}

proto_gc_regain_lose_score_ack::proto_gc_regain_lose_score_ack(const proto_gc_regain_lose_score_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_regain_lose_score_ack::SharedCtor() {
  _cached_size_ = 0;
  nret_ = 0;
  ntime_ = 0;
  ncurcount_ = 0;
  nitemindex_ = 0;
  nitemnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_regain_lose_score_ack::~proto_gc_regain_lose_score_ack() {
  SharedDtor();
}

void proto_gc_regain_lose_score_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_regain_lose_score_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_regain_lose_score_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_regain_lose_score_ack_descriptor_;
}

const proto_gc_regain_lose_score_ack& proto_gc_regain_lose_score_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_regain_lose_score_ack* proto_gc_regain_lose_score_ack::default_instance_ = NULL;

proto_gc_regain_lose_score_ack* proto_gc_regain_lose_score_ack::New() const {
  return new proto_gc_regain_lose_score_ack;
}

void proto_gc_regain_lose_score_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nret_ = 0;
    ntime_ = 0;
    ncurcount_ = 0;
    nitemindex_ = 0;
    nitemnum_ = 0;
  }
  nvalue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_regain_lose_score_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nRet = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nret_)));
          set_has_nret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nTime;
        break;
      }

      // required int32 nTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntime_)));
          set_has_ntime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nValue;
        break;
      }

      // repeated int32 nValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_nvalue())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nvalue())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nValue;
        if (input->ExpectTag(32)) goto parse_nCurCount;
        break;
      }

      // required int32 nCurCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCurCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncurcount_)));
          set_has_ncurcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nItemIndex;
        break;
      }

      // required int32 nItemIndex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nItemIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nitemindex_)));
          set_has_nitemindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_nItemNum;
        break;
      }

      // required int32 nItemNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nItemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nitemnum_)));
          set_has_nitemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_regain_lose_score_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nRet = 1;
  if (has_nret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nret(), output);
  }

  // required int32 nTime = 2;
  if (has_ntime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ntime(), output);
  }

  // repeated int32 nValue = 3;
  for (int i = 0; i < this->nvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->nvalue(i), output);
  }

  // required int32 nCurCount = 4;
  if (has_ncurcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ncurcount(), output);
  }

  // required int32 nItemIndex = 5;
  if (has_nitemindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nitemindex(), output);
  }

  // required int32 nItemNum = 6;
  if (has_nitemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nitemnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_regain_lose_score_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nRet = 1;
  if (has_nret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nret(), target);
  }

  // required int32 nTime = 2;
  if (has_ntime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ntime(), target);
  }

  // repeated int32 nValue = 3;
  for (int i = 0; i < this->nvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->nvalue(i), target);
  }

  // required int32 nCurCount = 4;
  if (has_ncurcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ncurcount(), target);
  }

  // required int32 nItemIndex = 5;
  if (has_nitemindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nitemindex(), target);
  }

  // required int32 nItemNum = 6;
  if (has_nitemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nitemnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_regain_lose_score_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nRet = 1;
    if (has_nret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nret());
    }

    // required int32 nTime = 2;
    if (has_ntime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntime());
    }

    // required int32 nCurCount = 4;
    if (has_ncurcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncurcount());
    }

    // required int32 nItemIndex = 5;
    if (has_nitemindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nitemindex());
    }

    // required int32 nItemNum = 6;
    if (has_nitemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nitemnum());
    }

  }
  // repeated int32 nValue = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->nvalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nvalue(i));
    }
    total_size += 1 * this->nvalue_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_regain_lose_score_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_regain_lose_score_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_regain_lose_score_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_regain_lose_score_ack::MergeFrom(const proto_gc_regain_lose_score_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  nvalue_.MergeFrom(from.nvalue_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nret()) {
      set_nret(from.nret());
    }
    if (from.has_ntime()) {
      set_ntime(from.ntime());
    }
    if (from.has_ncurcount()) {
      set_ncurcount(from.ncurcount());
    }
    if (from.has_nitemindex()) {
      set_nitemindex(from.nitemindex());
    }
    if (from.has_nitemnum()) {
      set_nitemnum(from.nitemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_regain_lose_score_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_regain_lose_score_ack::CopyFrom(const proto_gc_regain_lose_score_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_regain_lose_score_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003b) != 0x0000003b) return false;

  return true;
}

void proto_gc_regain_lose_score_ack::Swap(proto_gc_regain_lose_score_ack* other) {
  if (other != this) {
    std::swap(nret_, other->nret_);
    std::swap(ntime_, other->ntime_);
    nvalue_.Swap(&other->nvalue_);
    std::swap(ncurcount_, other->ncurcount_);
    std::swap(nitemindex_, other->nitemindex_);
    std::swap(nitemnum_, other->nitemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_regain_lose_score_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_regain_lose_score_ack_descriptor_;
  metadata.reflection = proto_gc_regain_lose_score_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_cli_my_req::kAFieldNumber;
#endif  // !_MSC_VER

proto_cli_my_req::proto_cli_my_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_cli_my_req::InitAsDefaultInstance() {
}

proto_cli_my_req::proto_cli_my_req(const proto_cli_my_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_cli_my_req::SharedCtor() {
  _cached_size_ = 0;
  a_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_cli_my_req::~proto_cli_my_req() {
  SharedDtor();
}

void proto_cli_my_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_cli_my_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_cli_my_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_cli_my_req_descriptor_;
}

const proto_cli_my_req& proto_cli_my_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_cli_my_req* proto_cli_my_req::default_instance_ = NULL;

proto_cli_my_req* proto_cli_my_req::New() const {
  return new proto_cli_my_req;
}

void proto_cli_my_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    a_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_cli_my_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 a = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_cli_my_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 a = 1;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->a(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_cli_my_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 a = 1;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->a(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_cli_my_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 a = 1;
    if (has_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_cli_my_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_cli_my_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_cli_my_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_cli_my_req::MergeFrom(const proto_cli_my_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_a()) {
      set_a(from.a());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_cli_my_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_cli_my_req::CopyFrom(const proto_cli_my_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_cli_my_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void proto_cli_my_req::Swap(proto_cli_my_req* other) {
  if (other != this) {
    std::swap(a_, other->a_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_cli_my_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_cli_my_req_descriptor_;
  metadata.reflection = proto_cli_my_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_sic_bet_ack::kBAllowFieldNumber;
const int proto_sic_bet_ack::kCCellIDFieldNumber;
const int proto_sic_bet_ack::kNAmountCellFieldNumber;
const int proto_sic_bet_ack::kNAmountCellTotalFieldNumber;
#endif  // !_MSC_VER

proto_sic_bet_ack::proto_sic_bet_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_sic_bet_ack::InitAsDefaultInstance() {
}

proto_sic_bet_ack::proto_sic_bet_ack(const proto_sic_bet_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_sic_bet_ack::SharedCtor() {
  _cached_size_ = 0;
  ballow_ = 0;
  ccellid_ = 0;
  namountcell_ = 0;
  namountcelltotal_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_sic_bet_ack::~proto_sic_bet_ack() {
  SharedDtor();
}

void proto_sic_bet_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_sic_bet_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_sic_bet_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_sic_bet_ack_descriptor_;
}

const proto_sic_bet_ack& proto_sic_bet_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_sic_bet_ack* proto_sic_bet_ack::default_instance_ = NULL;

proto_sic_bet_ack* proto_sic_bet_ack::New() const {
  return new proto_sic_bet_ack;
}

void proto_sic_bet_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ballow_ = 0;
    ccellid_ = 0;
    namountcell_ = 0;
    namountcelltotal_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_sic_bet_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bAllow = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ballow_)));
          set_has_ballow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cCellID;
        break;
      }

      // required int32 cCellID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cCellID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ccellid_)));
          set_has_ccellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nAmountCell;
        break;
      }

      // required int32 nAmountCell = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nAmountCell:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &namountcell_)));
          set_has_namountcell();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nAmountCellTotal;
        break;
      }

      // required int32 nAmountCellTotal = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nAmountCellTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &namountcelltotal_)));
          set_has_namountcelltotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_sic_bet_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bAllow = 1;
  if (has_ballow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ballow(), output);
  }

  // required int32 cCellID = 2;
  if (has_ccellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ccellid(), output);
  }

  // required int32 nAmountCell = 3;
  if (has_namountcell()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->namountcell(), output);
  }

  // required int32 nAmountCellTotal = 4;
  if (has_namountcelltotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->namountcelltotal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_sic_bet_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bAllow = 1;
  if (has_ballow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ballow(), target);
  }

  // required int32 cCellID = 2;
  if (has_ccellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ccellid(), target);
  }

  // required int32 nAmountCell = 3;
  if (has_namountcell()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->namountcell(), target);
  }

  // required int32 nAmountCellTotal = 4;
  if (has_namountcelltotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->namountcelltotal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_sic_bet_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bAllow = 1;
    if (has_ballow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ballow());
    }

    // required int32 cCellID = 2;
    if (has_ccellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ccellid());
    }

    // required int32 nAmountCell = 3;
    if (has_namountcell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->namountcell());
    }

    // required int32 nAmountCellTotal = 4;
    if (has_namountcelltotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->namountcelltotal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_sic_bet_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_sic_bet_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_sic_bet_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_sic_bet_ack::MergeFrom(const proto_sic_bet_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ballow()) {
      set_ballow(from.ballow());
    }
    if (from.has_ccellid()) {
      set_ccellid(from.ccellid());
    }
    if (from.has_namountcell()) {
      set_namountcell(from.namountcell());
    }
    if (from.has_namountcelltotal()) {
      set_namountcelltotal(from.namountcelltotal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_sic_bet_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_sic_bet_ack::CopyFrom(const proto_sic_bet_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_sic_bet_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void proto_sic_bet_ack::Swap(proto_sic_bet_ack* other) {
  if (other != this) {
    std::swap(ballow_, other->ballow_);
    std::swap(ccellid_, other->ccellid_);
    std::swap(namountcell_, other->namountcell_);
    std::swap(namountcelltotal_, other->namountcelltotal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_sic_bet_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_sic_bet_ack_descriptor_;
  metadata.reflection = proto_sic_bet_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_card_count_ack1::kCountsNumFieldNumber;
const int proto_gc_card_count_ack1::kMVecPutCardFieldNumber;
#endif  // !_MSC_VER

proto_gc_card_count_ack1::proto_gc_card_count_ack1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_card_count_ack1::InitAsDefaultInstance() {
}

proto_gc_card_count_ack1::proto_gc_card_count_ack1(const proto_gc_card_count_ack1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_card_count_ack1::SharedCtor() {
  _cached_size_ = 0;
  counts_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_card_count_ack1::~proto_gc_card_count_ack1() {
  SharedDtor();
}

void proto_gc_card_count_ack1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_card_count_ack1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_card_count_ack1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_card_count_ack1_descriptor_;
}

const proto_gc_card_count_ack1& proto_gc_card_count_ack1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_card_count_ack1* proto_gc_card_count_ack1::default_instance_ = NULL;

proto_gc_card_count_ack1* proto_gc_card_count_ack1::New() const {
  return new proto_gc_card_count_ack1;
}

void proto_gc_card_count_ack1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    counts_num_ = 0;
  }
  m_vecputcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_card_count_ack1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 counts_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &counts_num_)));
          set_has_counts_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_vecPutCard;
        break;
      }

      // repeated .proto_CCard m_vecPutCard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_vecPutCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_vecputcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_vecPutCard;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_card_count_ack1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 counts_num = 1;
  if (has_counts_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->counts_num(), output);
  }

  // repeated .proto_CCard m_vecPutCard = 2;
  for (int i = 0; i < this->m_vecputcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_vecputcard(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_card_count_ack1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 counts_num = 1;
  if (has_counts_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->counts_num(), target);
  }

  // repeated .proto_CCard m_vecPutCard = 2;
  for (int i = 0; i < this->m_vecputcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_vecputcard(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_card_count_ack1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 counts_num = 1;
    if (has_counts_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->counts_num());
    }

  }
  // repeated .proto_CCard m_vecPutCard = 2;
  total_size += 1 * this->m_vecputcard_size();
  for (int i = 0; i < this->m_vecputcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_vecputcard(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_card_count_ack1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_card_count_ack1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_card_count_ack1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_card_count_ack1::MergeFrom(const proto_gc_card_count_ack1& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_vecputcard_.MergeFrom(from.m_vecputcard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_counts_num()) {
      set_counts_num(from.counts_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_card_count_ack1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_card_count_ack1::CopyFrom(const proto_gc_card_count_ack1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_card_count_ack1::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_vecputcard_size(); i++) {
    if (!this->m_vecputcard(i).IsInitialized()) return false;
  }
  return true;
}

void proto_gc_card_count_ack1::Swap(proto_gc_card_count_ack1* other) {
  if (other != this) {
    std::swap(counts_num_, other->counts_num_);
    m_vecputcard_.Swap(&other->m_vecputcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_card_count_ack1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_card_count_ack1_descriptor_;
  metadata.reflection = proto_gc_card_count_ack1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

proto_sic_bet_clear_req::proto_sic_bet_clear_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_sic_bet_clear_req::InitAsDefaultInstance() {
}

proto_sic_bet_clear_req::proto_sic_bet_clear_req(const proto_sic_bet_clear_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_sic_bet_clear_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_sic_bet_clear_req::~proto_sic_bet_clear_req() {
  SharedDtor();
}

void proto_sic_bet_clear_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_sic_bet_clear_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_sic_bet_clear_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_sic_bet_clear_req_descriptor_;
}

const proto_sic_bet_clear_req& proto_sic_bet_clear_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_sic_bet_clear_req* proto_sic_bet_clear_req::default_instance_ = NULL;

proto_sic_bet_clear_req* proto_sic_bet_clear_req::New() const {
  return new proto_sic_bet_clear_req;
}

void proto_sic_bet_clear_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_sic_bet_clear_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void proto_sic_bet_clear_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_sic_bet_clear_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_sic_bet_clear_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_sic_bet_clear_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_sic_bet_clear_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_sic_bet_clear_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_sic_bet_clear_req::MergeFrom(const proto_sic_bet_clear_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_sic_bet_clear_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_sic_bet_clear_req::CopyFrom(const proto_sic_bet_clear_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_sic_bet_clear_req::IsInitialized() const {

  return true;
}

void proto_sic_bet_clear_req::Swap(proto_sic_bet_clear_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_sic_bet_clear_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_sic_bet_clear_req_descriptor_;
  metadata.reflection = proto_sic_bet_clear_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_CCardsType::kMNTypeBombFieldNumber;
const int proto_CCardsType::kMNTypeNumFieldNumber;
const int proto_CCardsType::kMNTypeValueFieldNumber;
#endif  // !_MSC_VER

proto_CCardsType::proto_CCardsType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_CCardsType::InitAsDefaultInstance() {
}

proto_CCardsType::proto_CCardsType(const proto_CCardsType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_CCardsType::SharedCtor() {
  _cached_size_ = 0;
  m_ntypebomb_ = 0;
  m_ntypenum_ = 0;
  m_ntypevalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_CCardsType::~proto_CCardsType() {
  SharedDtor();
}

void proto_CCardsType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_CCardsType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_CCardsType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_CCardsType_descriptor_;
}

const proto_CCardsType& proto_CCardsType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_CCardsType* proto_CCardsType::default_instance_ = NULL;

proto_CCardsType* proto_CCardsType::New() const {
  return new proto_CCardsType;
}

void proto_CCardsType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_ntypebomb_ = 0;
    m_ntypenum_ = 0;
    m_ntypevalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_CCardsType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nTypeBomb = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ntypebomb_)));
          set_has_m_ntypebomb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_nTypeNum;
        break;
      }

      // required int32 m_nTypeNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nTypeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ntypenum_)));
          set_has_m_ntypenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_nTypeValue;
        break;
      }

      // required int32 m_nTypeValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nTypeValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ntypevalue_)));
          set_has_m_ntypevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_CCardsType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nTypeBomb = 1;
  if (has_m_ntypebomb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_ntypebomb(), output);
  }

  // required int32 m_nTypeNum = 2;
  if (has_m_ntypenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_ntypenum(), output);
  }

  // required int32 m_nTypeValue = 3;
  if (has_m_ntypevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_ntypevalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_CCardsType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nTypeBomb = 1;
  if (has_m_ntypebomb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_ntypebomb(), target);
  }

  // required int32 m_nTypeNum = 2;
  if (has_m_ntypenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_ntypenum(), target);
  }

  // required int32 m_nTypeValue = 3;
  if (has_m_ntypevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_ntypevalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_CCardsType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nTypeBomb = 1;
    if (has_m_ntypebomb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ntypebomb());
    }

    // required int32 m_nTypeNum = 2;
    if (has_m_ntypenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ntypenum());
    }

    // required int32 m_nTypeValue = 3;
    if (has_m_ntypevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ntypevalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_CCardsType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_CCardsType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_CCardsType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_CCardsType::MergeFrom(const proto_CCardsType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_ntypebomb()) {
      set_m_ntypebomb(from.m_ntypebomb());
    }
    if (from.has_m_ntypenum()) {
      set_m_ntypenum(from.m_ntypenum());
    }
    if (from.has_m_ntypevalue()) {
      set_m_ntypevalue(from.m_ntypevalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_CCardsType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_CCardsType::CopyFrom(const proto_CCardsType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_CCardsType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void proto_CCardsType::Swap(proto_CCardsType* other) {
  if (other != this) {
    std::swap(m_ntypebomb_, other->m_ntypebomb_);
    std::swap(m_ntypenum_, other->m_ntypenum_);
    std::swap(m_ntypevalue_, other->m_ntypevalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_CCardsType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_CCardsType_descriptor_;
  metadata.reflection = proto_CCardsType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_sic_bet_update_req::kNBetUpdateAckTagFieldNumber;
#endif  // !_MSC_VER

proto_sic_bet_update_req::proto_sic_bet_update_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_sic_bet_update_req::InitAsDefaultInstance() {
}

proto_sic_bet_update_req::proto_sic_bet_update_req(const proto_sic_bet_update_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_sic_bet_update_req::SharedCtor() {
  _cached_size_ = 0;
  nbetupdateacktag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_sic_bet_update_req::~proto_sic_bet_update_req() {
  SharedDtor();
}

void proto_sic_bet_update_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_sic_bet_update_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_sic_bet_update_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_sic_bet_update_req_descriptor_;
}

const proto_sic_bet_update_req& proto_sic_bet_update_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_sic_bet_update_req* proto_sic_bet_update_req::default_instance_ = NULL;

proto_sic_bet_update_req* proto_sic_bet_update_req::New() const {
  return new proto_sic_bet_update_req;
}

void proto_sic_bet_update_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nbetupdateacktag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_sic_bet_update_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nBetUpdateAckTag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nbetupdateacktag_)));
          set_has_nbetupdateacktag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_sic_bet_update_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nBetUpdateAckTag = 1;
  if (has_nbetupdateacktag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nbetupdateacktag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_sic_bet_update_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nBetUpdateAckTag = 1;
  if (has_nbetupdateacktag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nbetupdateacktag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_sic_bet_update_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nBetUpdateAckTag = 1;
    if (has_nbetupdateacktag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbetupdateacktag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_sic_bet_update_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_sic_bet_update_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_sic_bet_update_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_sic_bet_update_req::MergeFrom(const proto_sic_bet_update_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nbetupdateacktag()) {
      set_nbetupdateacktag(from.nbetupdateacktag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_sic_bet_update_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_sic_bet_update_req::CopyFrom(const proto_sic_bet_update_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_sic_bet_update_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void proto_sic_bet_update_req::Swap(proto_sic_bet_update_req* other) {
  if (other != this) {
    std::swap(nbetupdateacktag_, other->nbetupdateacktag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_sic_bet_update_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_sic_bet_update_req_descriptor_;
  metadata.reflection = proto_sic_bet_update_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_sic_bet_clear_ack::kNBetUpdateAckTagFieldNumber;
const int proto_sic_bet_clear_ack::kNAmountBackFieldNumber;
const int proto_sic_bet_clear_ack::kNAmountTotalFieldNumber;
#endif  // !_MSC_VER

proto_sic_bet_clear_ack::proto_sic_bet_clear_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_sic_bet_clear_ack::InitAsDefaultInstance() {
}

proto_sic_bet_clear_ack::proto_sic_bet_clear_ack(const proto_sic_bet_clear_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_sic_bet_clear_ack::SharedCtor() {
  _cached_size_ = 0;
  nbetupdateacktag_ = 0;
  namountback_ = 0;
  namounttotal_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_sic_bet_clear_ack::~proto_sic_bet_clear_ack() {
  SharedDtor();
}

void proto_sic_bet_clear_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_sic_bet_clear_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_sic_bet_clear_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_sic_bet_clear_ack_descriptor_;
}

const proto_sic_bet_clear_ack& proto_sic_bet_clear_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_sic_bet_clear_ack* proto_sic_bet_clear_ack::default_instance_ = NULL;

proto_sic_bet_clear_ack* proto_sic_bet_clear_ack::New() const {
  return new proto_sic_bet_clear_ack;
}

void proto_sic_bet_clear_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nbetupdateacktag_ = 0;
    namountback_ = 0;
    namounttotal_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_sic_bet_clear_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nBetUpdateAckTag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nbetupdateacktag_)));
          set_has_nbetupdateacktag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nAmountBack;
        break;
      }

      // required int32 nAmountBack = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nAmountBack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &namountback_)));
          set_has_namountback();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nAmountTotal;
        break;
      }

      // required int32 nAmountTotal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nAmountTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &namounttotal_)));
          set_has_namounttotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_sic_bet_clear_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nBetUpdateAckTag = 1;
  if (has_nbetupdateacktag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nbetupdateacktag(), output);
  }

  // required int32 nAmountBack = 2;
  if (has_namountback()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->namountback(), output);
  }

  // required int32 nAmountTotal = 3;
  if (has_namounttotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->namounttotal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_sic_bet_clear_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nBetUpdateAckTag = 1;
  if (has_nbetupdateacktag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nbetupdateacktag(), target);
  }

  // required int32 nAmountBack = 2;
  if (has_namountback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->namountback(), target);
  }

  // required int32 nAmountTotal = 3;
  if (has_namounttotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->namounttotal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_sic_bet_clear_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nBetUpdateAckTag = 1;
    if (has_nbetupdateacktag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbetupdateacktag());
    }

    // required int32 nAmountBack = 2;
    if (has_namountback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->namountback());
    }

    // required int32 nAmountTotal = 3;
    if (has_namounttotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->namounttotal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_sic_bet_clear_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_sic_bet_clear_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_sic_bet_clear_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_sic_bet_clear_ack::MergeFrom(const proto_sic_bet_clear_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nbetupdateacktag()) {
      set_nbetupdateacktag(from.nbetupdateacktag());
    }
    if (from.has_namountback()) {
      set_namountback(from.namountback());
    }
    if (from.has_namounttotal()) {
      set_namounttotal(from.namounttotal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_sic_bet_clear_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_sic_bet_clear_ack::CopyFrom(const proto_sic_bet_clear_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_sic_bet_clear_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void proto_sic_bet_clear_ack::Swap(proto_sic_bet_clear_ack* other) {
  if (other != this) {
    std::swap(nbetupdateacktag_, other->nbetupdateacktag_);
    std::swap(namountback_, other->namountback_);
    std::swap(namounttotal_, other->namounttotal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_sic_bet_clear_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_sic_bet_clear_ack_descriptor_;
  metadata.reflection = proto_sic_bet_clear_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_bomb_not::kNDoubleFieldNumber;
#endif  // !_MSC_VER

proto_gc_bomb_not::proto_gc_bomb_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_bomb_not::InitAsDefaultInstance() {
}

proto_gc_bomb_not::proto_gc_bomb_not(const proto_gc_bomb_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_bomb_not::SharedCtor() {
  _cached_size_ = 0;
  ndouble_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_bomb_not::~proto_gc_bomb_not() {
  SharedDtor();
}

void proto_gc_bomb_not::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_bomb_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_bomb_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_bomb_not_descriptor_;
}

const proto_gc_bomb_not& proto_gc_bomb_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_bomb_not* proto_gc_bomb_not::default_instance_ = NULL;

proto_gc_bomb_not* proto_gc_bomb_not::New() const {
  return new proto_gc_bomb_not;
}

void proto_gc_bomb_not::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ndouble_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_bomb_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nDouble = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ndouble_)));
          set_has_ndouble();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_bomb_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nDouble = 1;
  if (has_ndouble()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ndouble(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_bomb_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nDouble = 1;
  if (has_ndouble()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ndouble(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_bomb_not::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nDouble = 1;
    if (has_ndouble()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ndouble());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_bomb_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_bomb_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_bomb_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_bomb_not::MergeFrom(const proto_gc_bomb_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ndouble()) {
      set_ndouble(from.ndouble());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_bomb_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_bomb_not::CopyFrom(const proto_gc_bomb_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_bomb_not::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void proto_gc_bomb_not::Swap(proto_gc_bomb_not* other) {
  if (other != this) {
    std::swap(ndouble_, other->ndouble_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_bomb_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_bomb_not_descriptor_;
  metadata.reflection = proto_gc_bomb_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

proto_cg_look_lord_card_req::proto_cg_look_lord_card_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_cg_look_lord_card_req::InitAsDefaultInstance() {
}

proto_cg_look_lord_card_req::proto_cg_look_lord_card_req(const proto_cg_look_lord_card_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_cg_look_lord_card_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_cg_look_lord_card_req::~proto_cg_look_lord_card_req() {
  SharedDtor();
}

void proto_cg_look_lord_card_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_cg_look_lord_card_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_cg_look_lord_card_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_cg_look_lord_card_req_descriptor_;
}

const proto_cg_look_lord_card_req& proto_cg_look_lord_card_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_cg_look_lord_card_req* proto_cg_look_lord_card_req::default_instance_ = NULL;

proto_cg_look_lord_card_req* proto_cg_look_lord_card_req::New() const {
  return new proto_cg_look_lord_card_req;
}

void proto_cg_look_lord_card_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_cg_look_lord_card_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void proto_cg_look_lord_card_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_cg_look_lord_card_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_cg_look_lord_card_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_cg_look_lord_card_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_cg_look_lord_card_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_cg_look_lord_card_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_cg_look_lord_card_req::MergeFrom(const proto_cg_look_lord_card_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_cg_look_lord_card_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_cg_look_lord_card_req::CopyFrom(const proto_cg_look_lord_card_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_cg_look_lord_card_req::IsInitialized() const {

  return true;
}

void proto_cg_look_lord_card_req::Swap(proto_cg_look_lord_card_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_cg_look_lord_card_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_cg_look_lord_card_req_descriptor_;
  metadata.reflection = proto_cg_look_lord_card_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_cg_auto_req::kCAutoFieldNumber;
#endif  // !_MSC_VER

proto_cg_auto_req::proto_cg_auto_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_cg_auto_req::InitAsDefaultInstance() {
}

proto_cg_auto_req::proto_cg_auto_req(const proto_cg_auto_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_cg_auto_req::SharedCtor() {
  _cached_size_ = 0;
  cauto_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_cg_auto_req::~proto_cg_auto_req() {
  SharedDtor();
}

void proto_cg_auto_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_cg_auto_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_cg_auto_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_cg_auto_req_descriptor_;
}

const proto_cg_auto_req& proto_cg_auto_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_cg_auto_req* proto_cg_auto_req::default_instance_ = NULL;

proto_cg_auto_req* proto_cg_auto_req::New() const {
  return new proto_cg_auto_req;
}

void proto_cg_auto_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cauto_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_cg_auto_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cAuto = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cauto_)));
          set_has_cauto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_cg_auto_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cAuto = 1;
  if (has_cauto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cauto(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_cg_auto_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cAuto = 1;
  if (has_cauto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cauto(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_cg_auto_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cAuto = 1;
    if (has_cauto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cauto());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_cg_auto_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_cg_auto_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_cg_auto_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_cg_auto_req::MergeFrom(const proto_cg_auto_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cauto()) {
      set_cauto(from.cauto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_cg_auto_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_cg_auto_req::CopyFrom(const proto_cg_auto_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_cg_auto_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void proto_cg_auto_req::Swap(proto_cg_auto_req* other) {
  if (other != this) {
    std::swap(cauto_, other->cauto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_cg_auto_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_cg_auto_req_descriptor_;
  metadata.reflection = proto_cg_auto_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

proto_sic_history_req::proto_sic_history_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_sic_history_req::InitAsDefaultInstance() {
}

proto_sic_history_req::proto_sic_history_req(const proto_sic_history_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_sic_history_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_sic_history_req::~proto_sic_history_req() {
  SharedDtor();
}

void proto_sic_history_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_sic_history_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_sic_history_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_sic_history_req_descriptor_;
}

const proto_sic_history_req& proto_sic_history_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_sic_history_req* proto_sic_history_req::default_instance_ = NULL;

proto_sic_history_req* proto_sic_history_req::New() const {
  return new proto_sic_history_req;
}

void proto_sic_history_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_sic_history_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void proto_sic_history_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_sic_history_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_sic_history_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_sic_history_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_sic_history_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_sic_history_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_sic_history_req::MergeFrom(const proto_sic_history_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_sic_history_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_sic_history_req::CopyFrom(const proto_sic_history_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_sic_history_req::IsInitialized() const {

  return true;
}

void proto_sic_history_req::Swap(proto_sic_history_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_sic_history_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_sic_history_req_descriptor_;
  metadata.reflection = proto_sic_history_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_auto_not::kCChairIDFieldNumber;
const int proto_gc_auto_not::kCAutoFieldNumber;
#endif  // !_MSC_VER

proto_gc_auto_not::proto_gc_auto_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_auto_not::InitAsDefaultInstance() {
}

proto_gc_auto_not::proto_gc_auto_not(const proto_gc_auto_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_auto_not::SharedCtor() {
  _cached_size_ = 0;
  cchairid_ = 0;
  cauto_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_auto_not::~proto_gc_auto_not() {
  SharedDtor();
}

void proto_gc_auto_not::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_auto_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_auto_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_auto_not_descriptor_;
}

const proto_gc_auto_not& proto_gc_auto_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_auto_not* proto_gc_auto_not::default_instance_ = NULL;

proto_gc_auto_not* proto_gc_auto_not::New() const {
  return new proto_gc_auto_not;
}

void proto_gc_auto_not::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cchairid_ = 0;
    cauto_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_auto_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cchairid_)));
          set_has_cchairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cAuto;
        break;
      }

      // required int32 cAuto = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cAuto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cauto_)));
          set_has_cauto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_auto_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cChairID = 1;
  if (has_cchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cchairid(), output);
  }

  // required int32 cAuto = 2;
  if (has_cauto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cauto(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_auto_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cChairID = 1;
  if (has_cchairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cchairid(), target);
  }

  // required int32 cAuto = 2;
  if (has_cauto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cauto(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_auto_not::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cChairID = 1;
    if (has_cchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cchairid());
    }

    // required int32 cAuto = 2;
    if (has_cauto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cauto());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_auto_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_auto_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_auto_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_auto_not::MergeFrom(const proto_gc_auto_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cchairid()) {
      set_cchairid(from.cchairid());
    }
    if (from.has_cauto()) {
      set_cauto(from.cauto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_auto_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_auto_not::CopyFrom(const proto_gc_auto_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_auto_not::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void proto_gc_auto_not::Swap(proto_gc_auto_not* other) {
  if (other != this) {
    std::swap(cchairid_, other->cchairid_);
    std::swap(cauto_, other->cauto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_auto_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_auto_not_descriptor_;
  metadata.reflection = proto_gc_auto_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_call_score_req::kNScoreFieldNumber;
const int proto_gc_call_score_req::kNSerialIDFieldNumber;
#endif  // !_MSC_VER

proto_gc_call_score_req::proto_gc_call_score_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_call_score_req::InitAsDefaultInstance() {
}

proto_gc_call_score_req::proto_gc_call_score_req(const proto_gc_call_score_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_call_score_req::SharedCtor() {
  _cached_size_ = 0;
  nscore_ = 0;
  nserialid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_call_score_req::~proto_gc_call_score_req() {
  SharedDtor();
}

void proto_gc_call_score_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_call_score_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_call_score_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_call_score_req_descriptor_;
}

const proto_gc_call_score_req& proto_gc_call_score_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_call_score_req* proto_gc_call_score_req::default_instance_ = NULL;

proto_gc_call_score_req* proto_gc_call_score_req::New() const {
  return new proto_gc_call_score_req;
}

void proto_gc_call_score_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nscore_ = 0;
    nserialid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_call_score_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nScore = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nscore_)));
          set_has_nscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nSerialID;
        break;
      }

      // required int32 nSerialID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nSerialID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nserialid_)));
          set_has_nserialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_call_score_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nScore = 1;
  if (has_nscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nscore(), output);
  }

  // required int32 nSerialID = 2;
  if (has_nserialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nserialid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_call_score_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nScore = 1;
  if (has_nscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nscore(), target);
  }

  // required int32 nSerialID = 2;
  if (has_nserialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nserialid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_call_score_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nScore = 1;
    if (has_nscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nscore());
    }

    // required int32 nSerialID = 2;
    if (has_nserialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nserialid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_call_score_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_call_score_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_call_score_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_call_score_req::MergeFrom(const proto_gc_call_score_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nscore()) {
      set_nscore(from.nscore());
    }
    if (from.has_nserialid()) {
      set_nserialid(from.nserialid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_call_score_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_call_score_req::CopyFrom(const proto_gc_call_score_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_call_score_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void proto_gc_call_score_req::Swap(proto_gc_call_score_req* other) {
  if (other != this) {
    std::swap(nscore_, other->nscore_);
    std::swap(nserialid_, other->nserialid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_call_score_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_call_score_req_descriptor_;
  metadata.reflection = proto_gc_call_score_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_cg_call_score_ack::kNScoreFieldNumber;
const int proto_cg_call_score_ack::kNSerialIDFieldNumber;
#endif  // !_MSC_VER

proto_cg_call_score_ack::proto_cg_call_score_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_cg_call_score_ack::InitAsDefaultInstance() {
}

proto_cg_call_score_ack::proto_cg_call_score_ack(const proto_cg_call_score_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_cg_call_score_ack::SharedCtor() {
  _cached_size_ = 0;
  nscore_ = 0;
  nserialid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_cg_call_score_ack::~proto_cg_call_score_ack() {
  SharedDtor();
}

void proto_cg_call_score_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_cg_call_score_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_cg_call_score_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_cg_call_score_ack_descriptor_;
}

const proto_cg_call_score_ack& proto_cg_call_score_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_cg_call_score_ack* proto_cg_call_score_ack::default_instance_ = NULL;

proto_cg_call_score_ack* proto_cg_call_score_ack::New() const {
  return new proto_cg_call_score_ack;
}

void proto_cg_call_score_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nscore_ = 0;
    nserialid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_cg_call_score_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nScore = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nscore_)));
          set_has_nscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nSerialID;
        break;
      }

      // required int32 nSerialID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nSerialID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nserialid_)));
          set_has_nserialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_cg_call_score_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nScore = 1;
  if (has_nscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nscore(), output);
  }

  // required int32 nSerialID = 2;
  if (has_nserialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nserialid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_cg_call_score_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nScore = 1;
  if (has_nscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nscore(), target);
  }

  // required int32 nSerialID = 2;
  if (has_nserialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nserialid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_cg_call_score_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nScore = 1;
    if (has_nscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nscore());
    }

    // required int32 nSerialID = 2;
    if (has_nserialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nserialid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_cg_call_score_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_cg_call_score_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_cg_call_score_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_cg_call_score_ack::MergeFrom(const proto_cg_call_score_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nscore()) {
      set_nscore(from.nscore());
    }
    if (from.has_nserialid()) {
      set_nserialid(from.nserialid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_cg_call_score_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_cg_call_score_ack::CopyFrom(const proto_cg_call_score_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_cg_call_score_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void proto_cg_call_score_ack::Swap(proto_cg_call_score_ack* other) {
  if (other != this) {
    std::swap(nscore_, other->nscore_);
    std::swap(nserialid_, other->nserialid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_cg_call_score_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_cg_call_score_ack_descriptor_;
  metadata.reflection = proto_cg_call_score_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

proto_sic_show_light_cell_not::proto_sic_show_light_cell_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_sic_show_light_cell_not::InitAsDefaultInstance() {
}

proto_sic_show_light_cell_not::proto_sic_show_light_cell_not(const proto_sic_show_light_cell_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_sic_show_light_cell_not::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_sic_show_light_cell_not::~proto_sic_show_light_cell_not() {
  SharedDtor();
}

void proto_sic_show_light_cell_not::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_sic_show_light_cell_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_sic_show_light_cell_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_sic_show_light_cell_not_descriptor_;
}

const proto_sic_show_light_cell_not& proto_sic_show_light_cell_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_sic_show_light_cell_not* proto_sic_show_light_cell_not::default_instance_ = NULL;

proto_sic_show_light_cell_not* proto_sic_show_light_cell_not::New() const {
  return new proto_sic_show_light_cell_not;
}

void proto_sic_show_light_cell_not::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_sic_show_light_cell_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void proto_sic_show_light_cell_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_sic_show_light_cell_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_sic_show_light_cell_not::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_sic_show_light_cell_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_sic_show_light_cell_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_sic_show_light_cell_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_sic_show_light_cell_not::MergeFrom(const proto_sic_show_light_cell_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_sic_show_light_cell_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_sic_show_light_cell_not::CopyFrom(const proto_sic_show_light_cell_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_sic_show_light_cell_not::IsInitialized() const {

  return true;
}

void proto_sic_show_light_cell_not::Swap(proto_sic_show_light_cell_not* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_sic_show_light_cell_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_sic_show_light_cell_not_descriptor_;
  metadata.reflection = proto_sic_show_light_cell_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_get_redpackets_88yuan_award_ack::kRetFieldNumber;
const int proto_gc_get_redpackets_88yuan_award_ack::kCurRoundsFieldNumber;
const int proto_gc_get_redpackets_88yuan_award_ack::kLimitRoundsFieldNumber;
const int proto_gc_get_redpackets_88yuan_award_ack::kNAmountFieldNumber;
const int proto_gc_get_redpackets_88yuan_award_ack::kCItemtypeFieldNumber;
const int proto_gc_get_redpackets_88yuan_award_ack::kTaskIdFieldNumber;
#endif  // !_MSC_VER

proto_gc_get_redpackets_88yuan_award_ack::proto_gc_get_redpackets_88yuan_award_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_get_redpackets_88yuan_award_ack::InitAsDefaultInstance() {
}

proto_gc_get_redpackets_88yuan_award_ack::proto_gc_get_redpackets_88yuan_award_ack(const proto_gc_get_redpackets_88yuan_award_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_get_redpackets_88yuan_award_ack::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  cur_rounds_ = 0;
  limit_rounds_ = 0;
  namount_ = 0;
  citemtype_ = 0;
  task_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_get_redpackets_88yuan_award_ack::~proto_gc_get_redpackets_88yuan_award_ack() {
  SharedDtor();
}

void proto_gc_get_redpackets_88yuan_award_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_get_redpackets_88yuan_award_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_get_redpackets_88yuan_award_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_get_redpackets_88yuan_award_ack_descriptor_;
}

const proto_gc_get_redpackets_88yuan_award_ack& proto_gc_get_redpackets_88yuan_award_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_get_redpackets_88yuan_award_ack* proto_gc_get_redpackets_88yuan_award_ack::default_instance_ = NULL;

proto_gc_get_redpackets_88yuan_award_ack* proto_gc_get_redpackets_88yuan_award_ack::New() const {
  return new proto_gc_get_redpackets_88yuan_award_ack;
}

void proto_gc_get_redpackets_88yuan_award_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    cur_rounds_ = 0;
    limit_rounds_ = 0;
    namount_ = 0;
    citemtype_ = 0;
    task_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_get_redpackets_88yuan_award_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_rounds;
        break;
      }

      // required int32 cur_rounds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_rounds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_rounds_)));
          set_has_cur_rounds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_limit_rounds;
        break;
      }

      // required int32 limit_rounds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit_rounds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_rounds_)));
          set_has_limit_rounds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nAmount;
        break;
      }

      // required int32 nAmount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &namount_)));
          set_has_namount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cItemtype;
        break;
      }

      // required int32 cItemtype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cItemtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &citemtype_)));
          set_has_citemtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_task_id;
        break;
      }

      // required int32 task_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_get_redpackets_88yuan_award_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required int32 cur_rounds = 2;
  if (has_cur_rounds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur_rounds(), output);
  }

  // required int32 limit_rounds = 3;
  if (has_limit_rounds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->limit_rounds(), output);
  }

  // required int32 nAmount = 4;
  if (has_namount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->namount(), output);
  }

  // required int32 cItemtype = 5;
  if (has_citemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->citemtype(), output);
  }

  // required int32 task_id = 6;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->task_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_get_redpackets_88yuan_award_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required int32 cur_rounds = 2;
  if (has_cur_rounds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur_rounds(), target);
  }

  // required int32 limit_rounds = 3;
  if (has_limit_rounds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->limit_rounds(), target);
  }

  // required int32 nAmount = 4;
  if (has_namount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->namount(), target);
  }

  // required int32 cItemtype = 5;
  if (has_citemtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->citemtype(), target);
  }

  // required int32 task_id = 6;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->task_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_get_redpackets_88yuan_award_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required int32 cur_rounds = 2;
    if (has_cur_rounds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_rounds());
    }

    // required int32 limit_rounds = 3;
    if (has_limit_rounds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit_rounds());
    }

    // required int32 nAmount = 4;
    if (has_namount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->namount());
    }

    // required int32 cItemtype = 5;
    if (has_citemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->citemtype());
    }

    // required int32 task_id = 6;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_get_redpackets_88yuan_award_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_get_redpackets_88yuan_award_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_get_redpackets_88yuan_award_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_get_redpackets_88yuan_award_ack::MergeFrom(const proto_gc_get_redpackets_88yuan_award_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_cur_rounds()) {
      set_cur_rounds(from.cur_rounds());
    }
    if (from.has_limit_rounds()) {
      set_limit_rounds(from.limit_rounds());
    }
    if (from.has_namount()) {
      set_namount(from.namount());
    }
    if (from.has_citemtype()) {
      set_citemtype(from.citemtype());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_get_redpackets_88yuan_award_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_get_redpackets_88yuan_award_ack::CopyFrom(const proto_gc_get_redpackets_88yuan_award_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_get_redpackets_88yuan_award_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void proto_gc_get_redpackets_88yuan_award_ack::Swap(proto_gc_get_redpackets_88yuan_award_ack* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(cur_rounds_, other->cur_rounds_);
    std::swap(limit_rounds_, other->limit_rounds_);
    std::swap(namount_, other->namount_);
    std::swap(citemtype_, other->citemtype_);
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_get_redpackets_88yuan_award_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_get_redpackets_88yuan_award_ack_descriptor_;
  metadata.reflection = proto_gc_get_redpackets_88yuan_award_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_TaskItem::kTaskIdFieldNumber;
const int proto_TaskItem::kTaskDescFieldNumber;
const int proto_TaskItem::kTaskMissionFieldNumber;
const int proto_TaskItem::kTaskMoneyTypeFieldNumber;
const int proto_TaskItem::kTaskMoneyFieldNumber;
const int proto_TaskItem::kTaskRateFieldNumber;
#endif  // !_MSC_VER

proto_TaskItem::proto_TaskItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_TaskItem::InitAsDefaultInstance() {
}

proto_TaskItem::proto_TaskItem(const proto_TaskItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_TaskItem::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0;
  task_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  task_mission_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  task_money_type_ = 0;
  task_money_ = 0;
  task_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_TaskItem::~proto_TaskItem() {
  SharedDtor();
}

void proto_TaskItem::SharedDtor() {
  if (task_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete task_desc_;
  }
  if (task_mission_ != &::google::protobuf::internal::kEmptyString) {
    delete task_mission_;
  }
  if (this != default_instance_) {
  }
}

void proto_TaskItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_TaskItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_TaskItem_descriptor_;
}

const proto_TaskItem& proto_TaskItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_TaskItem* proto_TaskItem::default_instance_ = NULL;

proto_TaskItem* proto_TaskItem::New() const {
  return new proto_TaskItem;
}

void proto_TaskItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0;
    if (has_task_desc()) {
      if (task_desc_ != &::google::protobuf::internal::kEmptyString) {
        task_desc_->clear();
      }
    }
    if (has_task_mission()) {
      if (task_mission_ != &::google::protobuf::internal::kEmptyString) {
        task_mission_->clear();
      }
    }
    task_money_type_ = 0;
    task_money_ = 0;
    task_rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_TaskItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task_desc;
        break;
      }

      // required string task_desc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->task_desc().data(), this->task_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_task_mission;
        break;
      }

      // required string task_mission = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_mission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_mission()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->task_mission().data(), this->task_mission().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_task_money_type;
        break;
      }

      // required int32 task_money_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_money_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_money_type_)));
          set_has_task_money_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_task_money;
        break;
      }

      // required int32 task_money = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_money_)));
          set_has_task_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_task_rate;
        break;
      }

      // required int32 task_rate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_rate_)));
          set_has_task_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_TaskItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->task_id(), output);
  }

  // required string task_desc = 2;
  if (has_task_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_desc().data(), this->task_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->task_desc(), output);
  }

  // required string task_mission = 3;
  if (has_task_mission()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_mission().data(), this->task_mission().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->task_mission(), output);
  }

  // required int32 task_money_type = 4;
  if (has_task_money_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->task_money_type(), output);
  }

  // required int32 task_money = 5;
  if (has_task_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->task_money(), output);
  }

  // required int32 task_rate = 6;
  if (has_task_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->task_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_TaskItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->task_id(), target);
  }

  // required string task_desc = 2;
  if (has_task_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_desc().data(), this->task_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->task_desc(), target);
  }

  // required string task_mission = 3;
  if (has_task_mission()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_mission().data(), this->task_mission().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->task_mission(), target);
  }

  // required int32 task_money_type = 4;
  if (has_task_money_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->task_money_type(), target);
  }

  // required int32 task_money = 5;
  if (has_task_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->task_money(), target);
  }

  // required int32 task_rate = 6;
  if (has_task_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->task_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_TaskItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_id());
    }

    // required string task_desc = 2;
    if (has_task_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_desc());
    }

    // required string task_mission = 3;
    if (has_task_mission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_mission());
    }

    // required int32 task_money_type = 4;
    if (has_task_money_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_money_type());
    }

    // required int32 task_money = 5;
    if (has_task_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_money());
    }

    // required int32 task_rate = 6;
    if (has_task_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_TaskItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_TaskItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_TaskItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_TaskItem::MergeFrom(const proto_TaskItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_task_desc()) {
      set_task_desc(from.task_desc());
    }
    if (from.has_task_mission()) {
      set_task_mission(from.task_mission());
    }
    if (from.has_task_money_type()) {
      set_task_money_type(from.task_money_type());
    }
    if (from.has_task_money()) {
      set_task_money(from.task_money());
    }
    if (from.has_task_rate()) {
      set_task_rate(from.task_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_TaskItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_TaskItem::CopyFrom(const proto_TaskItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_TaskItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void proto_TaskItem::Swap(proto_TaskItem* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(task_desc_, other->task_desc_);
    std::swap(task_mission_, other->task_mission_);
    std::swap(task_money_type_, other->task_money_type_);
    std::swap(task_money_, other->task_money_);
    std::swap(task_rate_, other->task_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_TaskItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_TaskItem_descriptor_;
  metadata.reflection = proto_TaskItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_clienttimer_not::kChairIdFieldNumber;
const int proto_gc_clienttimer_not::kSPeriodFieldNumber;
#endif  // !_MSC_VER

proto_gc_clienttimer_not::proto_gc_clienttimer_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_clienttimer_not::InitAsDefaultInstance() {
}

proto_gc_clienttimer_not::proto_gc_clienttimer_not(const proto_gc_clienttimer_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_clienttimer_not::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  speriod_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_clienttimer_not::~proto_gc_clienttimer_not() {
  SharedDtor();
}

void proto_gc_clienttimer_not::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_clienttimer_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_clienttimer_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_clienttimer_not_descriptor_;
}

const proto_gc_clienttimer_not& proto_gc_clienttimer_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_clienttimer_not* proto_gc_clienttimer_not::default_instance_ = NULL;

proto_gc_clienttimer_not* proto_gc_clienttimer_not::New() const {
  return new proto_gc_clienttimer_not;
}

void proto_gc_clienttimer_not::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    speriod_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_clienttimer_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chairId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sPeriod;
        break;
      }

      // required int32 sPeriod = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speriod_)));
          set_has_speriod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_clienttimer_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 chairId = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // required int32 sPeriod = 2;
  if (has_speriod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->speriod(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_clienttimer_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 chairId = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // required int32 sPeriod = 2;
  if (has_speriod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->speriod(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_clienttimer_not::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chairId = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // required int32 sPeriod = 2;
    if (has_speriod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speriod());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_clienttimer_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_clienttimer_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_clienttimer_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_clienttimer_not::MergeFrom(const proto_gc_clienttimer_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_speriod()) {
      set_speriod(from.speriod());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_clienttimer_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_clienttimer_not::CopyFrom(const proto_gc_clienttimer_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_clienttimer_not::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void proto_gc_clienttimer_not::Swap(proto_gc_clienttimer_not* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(speriod_, other->speriod_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_clienttimer_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_clienttimer_not_descriptor_;
  metadata.reflection = proto_gc_clienttimer_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

proto_cg_card_count_req::proto_cg_card_count_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_cg_card_count_req::InitAsDefaultInstance() {
}

proto_cg_card_count_req::proto_cg_card_count_req(const proto_cg_card_count_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_cg_card_count_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_cg_card_count_req::~proto_cg_card_count_req() {
  SharedDtor();
}

void proto_cg_card_count_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_cg_card_count_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_cg_card_count_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_cg_card_count_req_descriptor_;
}

const proto_cg_card_count_req& proto_cg_card_count_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_cg_card_count_req* proto_cg_card_count_req::default_instance_ = NULL;

proto_cg_card_count_req* proto_cg_card_count_req::New() const {
  return new proto_cg_card_count_req;
}

void proto_cg_card_count_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_cg_card_count_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void proto_cg_card_count_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_cg_card_count_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_cg_card_count_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_cg_card_count_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_cg_card_count_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_cg_card_count_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_cg_card_count_req::MergeFrom(const proto_cg_card_count_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_cg_card_count_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_cg_card_count_req::CopyFrom(const proto_cg_card_count_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_cg_card_count_req::IsInitialized() const {

  return true;
}

void proto_cg_card_count_req::Swap(proto_cg_card_count_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_cg_card_count_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_cg_card_count_req_descriptor_;
  metadata.reflection = proto_cg_card_count_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_three_draw_notify::kMessageFieldNumber;
#endif  // !_MSC_VER

proto_gc_three_draw_notify::proto_gc_three_draw_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_three_draw_notify::InitAsDefaultInstance() {
}

proto_gc_three_draw_notify::proto_gc_three_draw_notify(const proto_gc_three_draw_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_three_draw_notify::SharedCtor() {
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_three_draw_notify::~proto_gc_three_draw_notify() {
  SharedDtor();
}

void proto_gc_three_draw_notify::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void proto_gc_three_draw_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_three_draw_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_three_draw_notify_descriptor_;
}

const proto_gc_three_draw_notify& proto_gc_three_draw_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_three_draw_notify* proto_gc_three_draw_notify::default_instance_ = NULL;

proto_gc_three_draw_notify* proto_gc_three_draw_notify::New() const {
  return new proto_gc_three_draw_notify;
}

void proto_gc_three_draw_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_three_draw_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_three_draw_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_three_draw_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_three_draw_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_three_draw_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_three_draw_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_three_draw_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_three_draw_notify::MergeFrom(const proto_gc_three_draw_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_three_draw_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_three_draw_notify::CopyFrom(const proto_gc_three_draw_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_three_draw_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void proto_gc_three_draw_notify::Swap(proto_gc_three_draw_notify* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_three_draw_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_three_draw_notify_descriptor_;
  metadata.reflection = proto_gc_three_draw_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_laizi_not::kCardValueFieldNumber;
#endif  // !_MSC_VER

proto_gc_laizi_not::proto_gc_laizi_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_laizi_not::InitAsDefaultInstance() {
}

proto_gc_laizi_not::proto_gc_laizi_not(const proto_gc_laizi_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_laizi_not::SharedCtor() {
  _cached_size_ = 0;
  card_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_laizi_not::~proto_gc_laizi_not() {
  SharedDtor();
}

void proto_gc_laizi_not::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_laizi_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_laizi_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_laizi_not_descriptor_;
}

const proto_gc_laizi_not& proto_gc_laizi_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_laizi_not* proto_gc_laizi_not::default_instance_ = NULL;

proto_gc_laizi_not* proto_gc_laizi_not::New() const {
  return new proto_gc_laizi_not;
}

void proto_gc_laizi_not::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    card_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_laizi_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 card_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_value_)));
          set_has_card_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_laizi_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 card_value = 1;
  if (has_card_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->card_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_laizi_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 card_value = 1;
  if (has_card_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->card_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_laizi_not::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 card_value = 1;
    if (has_card_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_laizi_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_laizi_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_laizi_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_laizi_not::MergeFrom(const proto_gc_laizi_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card_value()) {
      set_card_value(from.card_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_laizi_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_laizi_not::CopyFrom(const proto_gc_laizi_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_laizi_not::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void proto_gc_laizi_not::Swap(proto_gc_laizi_not* other) {
  if (other != this) {
    std::swap(card_value_, other->card_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_laizi_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_laizi_not_descriptor_;
  metadata.reflection = proto_gc_laizi_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_magic_emoji_req::kCEmojiIndexFieldNumber;
const int proto_magic_emoji_req::kCToChairIDFieldNumber;
const int proto_magic_emoji_req::kCCostTypeFieldNumber;
#endif  // !_MSC_VER

proto_magic_emoji_req::proto_magic_emoji_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_magic_emoji_req::InitAsDefaultInstance() {
}

proto_magic_emoji_req::proto_magic_emoji_req(const proto_magic_emoji_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_magic_emoji_req::SharedCtor() {
  _cached_size_ = 0;
  cemojiindex_ = 0;
  ctochairid_ = 0;
  ccosttype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_magic_emoji_req::~proto_magic_emoji_req() {
  SharedDtor();
}

void proto_magic_emoji_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_magic_emoji_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_magic_emoji_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_magic_emoji_req_descriptor_;
}

const proto_magic_emoji_req& proto_magic_emoji_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_magic_emoji_req* proto_magic_emoji_req::default_instance_ = NULL;

proto_magic_emoji_req* proto_magic_emoji_req::New() const {
  return new proto_magic_emoji_req;
}

void proto_magic_emoji_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cemojiindex_ = 0;
    ctochairid_ = 0;
    ccosttype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_magic_emoji_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cEmojiIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cemojiindex_)));
          set_has_cemojiindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cToChairID;
        break;
      }

      // required int32 cToChairID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cToChairID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctochairid_)));
          set_has_ctochairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cCostType;
        break;
      }

      // required int32 cCostType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cCostType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ccosttype_)));
          set_has_ccosttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_magic_emoji_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cEmojiIndex = 1;
  if (has_cemojiindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cemojiindex(), output);
  }

  // required int32 cToChairID = 2;
  if (has_ctochairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ctochairid(), output);
  }

  // required int32 cCostType = 3;
  if (has_ccosttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ccosttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_magic_emoji_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cEmojiIndex = 1;
  if (has_cemojiindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cemojiindex(), target);
  }

  // required int32 cToChairID = 2;
  if (has_ctochairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ctochairid(), target);
  }

  // required int32 cCostType = 3;
  if (has_ccosttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ccosttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_magic_emoji_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cEmojiIndex = 1;
    if (has_cemojiindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cemojiindex());
    }

    // required int32 cToChairID = 2;
    if (has_ctochairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctochairid());
    }

    // required int32 cCostType = 3;
    if (has_ccosttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ccosttype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_magic_emoji_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_magic_emoji_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_magic_emoji_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_magic_emoji_req::MergeFrom(const proto_magic_emoji_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cemojiindex()) {
      set_cemojiindex(from.cemojiindex());
    }
    if (from.has_ctochairid()) {
      set_ctochairid(from.ctochairid());
    }
    if (from.has_ccosttype()) {
      set_ccosttype(from.ccosttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_magic_emoji_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_magic_emoji_req::CopyFrom(const proto_magic_emoji_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_magic_emoji_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void proto_magic_emoji_req::Swap(proto_magic_emoji_req* other) {
  if (other != this) {
    std::swap(cemojiindex_, other->cemojiindex_);
    std::swap(ctochairid_, other->ctochairid_);
    std::swap(ccosttype_, other->ccosttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_magic_emoji_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_magic_emoji_req_descriptor_;
  metadata.reflection = proto_magic_emoji_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_cg_double_score_ack::kNScoreFieldNumber;
const int proto_cg_double_score_ack::kNSerialIDFieldNumber;
#endif  // !_MSC_VER

proto_cg_double_score_ack::proto_cg_double_score_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_cg_double_score_ack::InitAsDefaultInstance() {
}

proto_cg_double_score_ack::proto_cg_double_score_ack(const proto_cg_double_score_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_cg_double_score_ack::SharedCtor() {
  _cached_size_ = 0;
  nscore_ = 0;
  nserialid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_cg_double_score_ack::~proto_cg_double_score_ack() {
  SharedDtor();
}

void proto_cg_double_score_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_cg_double_score_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_cg_double_score_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_cg_double_score_ack_descriptor_;
}

const proto_cg_double_score_ack& proto_cg_double_score_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_cg_double_score_ack* proto_cg_double_score_ack::default_instance_ = NULL;

proto_cg_double_score_ack* proto_cg_double_score_ack::New() const {
  return new proto_cg_double_score_ack;
}

void proto_cg_double_score_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nscore_ = 0;
    nserialid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_cg_double_score_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nScore = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nscore_)));
          set_has_nscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nSerialID;
        break;
      }

      // required int32 nSerialID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nSerialID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nserialid_)));
          set_has_nserialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_cg_double_score_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nScore = 1;
  if (has_nscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nscore(), output);
  }

  // required int32 nSerialID = 2;
  if (has_nserialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nserialid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_cg_double_score_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nScore = 1;
  if (has_nscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nscore(), target);
  }

  // required int32 nSerialID = 2;
  if (has_nserialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nserialid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_cg_double_score_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nScore = 1;
    if (has_nscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nscore());
    }

    // required int32 nSerialID = 2;
    if (has_nserialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nserialid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_cg_double_score_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_cg_double_score_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_cg_double_score_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_cg_double_score_ack::MergeFrom(const proto_cg_double_score_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nscore()) {
      set_nscore(from.nscore());
    }
    if (from.has_nserialid()) {
      set_nserialid(from.nserialid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_cg_double_score_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_cg_double_score_ack::CopyFrom(const proto_cg_double_score_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_cg_double_score_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void proto_cg_double_score_ack::Swap(proto_cg_double_score_ack* other) {
  if (other != this) {
    std::swap(nscore_, other->nscore_);
    std::swap(nserialid_, other->nserialid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_cg_double_score_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_cg_double_score_ack_descriptor_;
  metadata.reflection = proto_cg_double_score_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_win_doubel_ack::kCRetFieldNumber;
const int proto_gc_win_doubel_ack::kVecItemInfoFieldNumber;
#endif  // !_MSC_VER

proto_gc_win_doubel_ack::proto_gc_win_doubel_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_win_doubel_ack::InitAsDefaultInstance() {
}

proto_gc_win_doubel_ack::proto_gc_win_doubel_ack(const proto_gc_win_doubel_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_win_doubel_ack::SharedCtor() {
  _cached_size_ = 0;
  cret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_win_doubel_ack::~proto_gc_win_doubel_ack() {
  SharedDtor();
}

void proto_gc_win_doubel_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_win_doubel_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_win_doubel_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_win_doubel_ack_descriptor_;
}

const proto_gc_win_doubel_ack& proto_gc_win_doubel_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_win_doubel_ack* proto_gc_win_doubel_ack::default_instance_ = NULL;

proto_gc_win_doubel_ack* proto_gc_win_doubel_ack::New() const {
  return new proto_gc_win_doubel_ack;
}

void proto_gc_win_doubel_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cret_ = 0;
  }
  veciteminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_win_doubel_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cRet = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cret_)));
          set_has_cret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vecItemInfo;
        break;
      }

      // repeated .proto_ItemInfo vecItemInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecItemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_veciteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vecItemInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_win_doubel_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cRet = 1;
  if (has_cret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cret(), output);
  }

  // repeated .proto_ItemInfo vecItemInfo = 2;
  for (int i = 0; i < this->veciteminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->veciteminfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_win_doubel_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cRet = 1;
  if (has_cret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cret(), target);
  }

  // repeated .proto_ItemInfo vecItemInfo = 2;
  for (int i = 0; i < this->veciteminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->veciteminfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_win_doubel_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cRet = 1;
    if (has_cret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cret());
    }

  }
  // repeated .proto_ItemInfo vecItemInfo = 2;
  total_size += 1 * this->veciteminfo_size();
  for (int i = 0; i < this->veciteminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->veciteminfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_win_doubel_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_win_doubel_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_win_doubel_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_win_doubel_ack::MergeFrom(const proto_gc_win_doubel_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  veciteminfo_.MergeFrom(from.veciteminfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cret()) {
      set_cret(from.cret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_win_doubel_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_win_doubel_ack::CopyFrom(const proto_gc_win_doubel_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_win_doubel_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < veciteminfo_size(); i++) {
    if (!this->veciteminfo(i).IsInitialized()) return false;
  }
  return true;
}

void proto_gc_win_doubel_ack::Swap(proto_gc_win_doubel_ack* other) {
  if (other != this) {
    std::swap(cret_, other->cret_);
    veciteminfo_.Swap(&other->veciteminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_win_doubel_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_win_doubel_ack_descriptor_;
  metadata.reflection = proto_gc_win_doubel_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

proto_sic_bet_begin_not::proto_sic_bet_begin_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_sic_bet_begin_not::InitAsDefaultInstance() {
}

proto_sic_bet_begin_not::proto_sic_bet_begin_not(const proto_sic_bet_begin_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_sic_bet_begin_not::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_sic_bet_begin_not::~proto_sic_bet_begin_not() {
  SharedDtor();
}

void proto_sic_bet_begin_not::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_sic_bet_begin_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_sic_bet_begin_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_sic_bet_begin_not_descriptor_;
}

const proto_sic_bet_begin_not& proto_sic_bet_begin_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_sic_bet_begin_not* proto_sic_bet_begin_not::default_instance_ = NULL;

proto_sic_bet_begin_not* proto_sic_bet_begin_not::New() const {
  return new proto_sic_bet_begin_not;
}

void proto_sic_bet_begin_not::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_sic_bet_begin_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void proto_sic_bet_begin_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_sic_bet_begin_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_sic_bet_begin_not::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_sic_bet_begin_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_sic_bet_begin_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_sic_bet_begin_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_sic_bet_begin_not::MergeFrom(const proto_sic_bet_begin_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_sic_bet_begin_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_sic_bet_begin_not::CopyFrom(const proto_sic_bet_begin_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_sic_bet_begin_not::IsInitialized() const {

  return true;
}

void proto_sic_bet_begin_not::Swap(proto_sic_bet_begin_not* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_sic_bet_begin_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_sic_bet_begin_not_descriptor_;
  metadata.reflection = proto_sic_bet_begin_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_cg_get_lord_card_reward::kIndexFieldNumber;
#endif  // !_MSC_VER

proto_cg_get_lord_card_reward::proto_cg_get_lord_card_reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_cg_get_lord_card_reward::InitAsDefaultInstance() {
}

proto_cg_get_lord_card_reward::proto_cg_get_lord_card_reward(const proto_cg_get_lord_card_reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_cg_get_lord_card_reward::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_cg_get_lord_card_reward::~proto_cg_get_lord_card_reward() {
  SharedDtor();
}

void proto_cg_get_lord_card_reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_cg_get_lord_card_reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_cg_get_lord_card_reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_cg_get_lord_card_reward_descriptor_;
}

const proto_cg_get_lord_card_reward& proto_cg_get_lord_card_reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_cg_get_lord_card_reward* proto_cg_get_lord_card_reward::default_instance_ = NULL;

proto_cg_get_lord_card_reward* proto_cg_get_lord_card_reward::New() const {
  return new proto_cg_get_lord_card_reward;
}

void proto_cg_get_lord_card_reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_cg_get_lord_card_reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_cg_get_lord_card_reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_cg_get_lord_card_reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_cg_get_lord_card_reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_cg_get_lord_card_reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_cg_get_lord_card_reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_cg_get_lord_card_reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_cg_get_lord_card_reward::MergeFrom(const proto_cg_get_lord_card_reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_cg_get_lord_card_reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_cg_get_lord_card_reward::CopyFrom(const proto_cg_get_lord_card_reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_cg_get_lord_card_reward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void proto_cg_get_lord_card_reward::Swap(proto_cg_get_lord_card_reward* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_cg_get_lord_card_reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_cg_get_lord_card_reward_descriptor_;
  metadata.reflection = proto_cg_get_lord_card_reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_bet_lord_card_result_ack::kRetFieldNumber;
const int proto_gc_bet_lord_card_result_ack::kMoneyFieldNumber;
#endif  // !_MSC_VER

proto_gc_bet_lord_card_result_ack::proto_gc_bet_lord_card_result_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_bet_lord_card_result_ack::InitAsDefaultInstance() {
}

proto_gc_bet_lord_card_result_ack::proto_gc_bet_lord_card_result_ack(const proto_gc_bet_lord_card_result_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_bet_lord_card_result_ack::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  money_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_bet_lord_card_result_ack::~proto_gc_bet_lord_card_result_ack() {
  SharedDtor();
}

void proto_gc_bet_lord_card_result_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_bet_lord_card_result_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_bet_lord_card_result_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_bet_lord_card_result_ack_descriptor_;
}

const proto_gc_bet_lord_card_result_ack& proto_gc_bet_lord_card_result_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_bet_lord_card_result_ack* proto_gc_bet_lord_card_result_ack::default_instance_ = NULL;

proto_gc_bet_lord_card_result_ack* proto_gc_bet_lord_card_result_ack::New() const {
  return new proto_gc_bet_lord_card_result_ack;
}

void proto_gc_bet_lord_card_result_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    money_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_bet_lord_card_result_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_money;
        break;
      }

      // required int32 money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_bet_lord_card_result_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required int32 money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_bet_lord_card_result_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required int32 money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_bet_lord_card_result_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required int32 money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_bet_lord_card_result_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_bet_lord_card_result_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_bet_lord_card_result_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_bet_lord_card_result_ack::MergeFrom(const proto_gc_bet_lord_card_result_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_bet_lord_card_result_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_bet_lord_card_result_ack::CopyFrom(const proto_gc_bet_lord_card_result_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_bet_lord_card_result_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void proto_gc_bet_lord_card_result_ack::Swap(proto_gc_bet_lord_card_result_ack* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_bet_lord_card_result_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_bet_lord_card_result_ack_descriptor_;
  metadata.reflection = proto_gc_bet_lord_card_result_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_svr_my_ack::kBFieldNumber;
#endif  // !_MSC_VER

proto_svr_my_ack::proto_svr_my_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_svr_my_ack::InitAsDefaultInstance() {
}

proto_svr_my_ack::proto_svr_my_ack(const proto_svr_my_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_svr_my_ack::SharedCtor() {
  _cached_size_ = 0;
  b_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_svr_my_ack::~proto_svr_my_ack() {
  SharedDtor();
}

void proto_svr_my_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_svr_my_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_svr_my_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_svr_my_ack_descriptor_;
}

const proto_svr_my_ack& proto_svr_my_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_svr_my_ack* proto_svr_my_ack::default_instance_ = NULL;

proto_svr_my_ack* proto_svr_my_ack::New() const {
  return new proto_svr_my_ack;
}

void proto_svr_my_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    b_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_svr_my_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 b = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_svr_my_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 b = 1;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->b(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_svr_my_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 b = 1;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->b(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_svr_my_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 b = 1;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_svr_my_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_svr_my_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_svr_my_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_svr_my_ack::MergeFrom(const proto_svr_my_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_b()) {
      set_b(from.b());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_svr_my_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_svr_my_ack::CopyFrom(const proto_svr_my_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_svr_my_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void proto_svr_my_ack::Swap(proto_svr_my_ack* other) {
  if (other != this) {
    std::swap(b_, other->b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_svr_my_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_svr_my_ack_descriptor_;
  metadata.reflection = proto_svr_my_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_get_redpackets_newbie_award_req::kNAmountFieldNumber;
const int proto_gc_get_redpackets_newbie_award_req::kCDoubleFieldNumber;
#endif  // !_MSC_VER

proto_gc_get_redpackets_newbie_award_req::proto_gc_get_redpackets_newbie_award_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_get_redpackets_newbie_award_req::InitAsDefaultInstance() {
}

proto_gc_get_redpackets_newbie_award_req::proto_gc_get_redpackets_newbie_award_req(const proto_gc_get_redpackets_newbie_award_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_get_redpackets_newbie_award_req::SharedCtor() {
  _cached_size_ = 0;
  namount_ = 0;
  cdouble_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_get_redpackets_newbie_award_req::~proto_gc_get_redpackets_newbie_award_req() {
  SharedDtor();
}

void proto_gc_get_redpackets_newbie_award_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_get_redpackets_newbie_award_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_get_redpackets_newbie_award_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_get_redpackets_newbie_award_req_descriptor_;
}

const proto_gc_get_redpackets_newbie_award_req& proto_gc_get_redpackets_newbie_award_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_get_redpackets_newbie_award_req* proto_gc_get_redpackets_newbie_award_req::default_instance_ = NULL;

proto_gc_get_redpackets_newbie_award_req* proto_gc_get_redpackets_newbie_award_req::New() const {
  return new proto_gc_get_redpackets_newbie_award_req;
}

void proto_gc_get_redpackets_newbie_award_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    namount_ = 0;
    cdouble_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_get_redpackets_newbie_award_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nAmount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &namount_)));
          set_has_namount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cDouble;
        break;
      }

      // required int32 cDouble = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cDouble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cdouble_)));
          set_has_cdouble();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_get_redpackets_newbie_award_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nAmount = 1;
  if (has_namount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->namount(), output);
  }

  // required int32 cDouble = 2;
  if (has_cdouble()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cdouble(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_get_redpackets_newbie_award_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nAmount = 1;
  if (has_namount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->namount(), target);
  }

  // required int32 cDouble = 2;
  if (has_cdouble()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cdouble(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_get_redpackets_newbie_award_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nAmount = 1;
    if (has_namount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->namount());
    }

    // required int32 cDouble = 2;
    if (has_cdouble()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cdouble());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_get_redpackets_newbie_award_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_get_redpackets_newbie_award_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_get_redpackets_newbie_award_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_get_redpackets_newbie_award_req::MergeFrom(const proto_gc_get_redpackets_newbie_award_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_namount()) {
      set_namount(from.namount());
    }
    if (from.has_cdouble()) {
      set_cdouble(from.cdouble());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_get_redpackets_newbie_award_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_get_redpackets_newbie_award_req::CopyFrom(const proto_gc_get_redpackets_newbie_award_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_get_redpackets_newbie_award_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void proto_gc_get_redpackets_newbie_award_req::Swap(proto_gc_get_redpackets_newbie_award_req* other) {
  if (other != this) {
    std::swap(namount_, other->namount_);
    std::swap(cdouble_, other->cdouble_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_get_redpackets_newbie_award_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_get_redpackets_newbie_award_req_descriptor_;
  metadata.reflection = proto_gc_get_redpackets_newbie_award_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_play_card_req::kCAutoFieldNumber;
const int proto_gc_play_card_req::kNSerialIDFieldNumber;
#endif  // !_MSC_VER

proto_gc_play_card_req::proto_gc_play_card_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_play_card_req::InitAsDefaultInstance() {
}

proto_gc_play_card_req::proto_gc_play_card_req(const proto_gc_play_card_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_play_card_req::SharedCtor() {
  _cached_size_ = 0;
  cauto_ = 0;
  nserialid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_play_card_req::~proto_gc_play_card_req() {
  SharedDtor();
}

void proto_gc_play_card_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_play_card_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_play_card_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_play_card_req_descriptor_;
}

const proto_gc_play_card_req& proto_gc_play_card_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_play_card_req* proto_gc_play_card_req::default_instance_ = NULL;

proto_gc_play_card_req* proto_gc_play_card_req::New() const {
  return new proto_gc_play_card_req;
}

void proto_gc_play_card_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cauto_ = 0;
    nserialid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_play_card_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cAuto = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cauto_)));
          set_has_cauto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nSerialID;
        break;
      }

      // required int32 nSerialID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nSerialID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nserialid_)));
          set_has_nserialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_play_card_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cAuto = 1;
  if (has_cauto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cauto(), output);
  }

  // required int32 nSerialID = 2;
  if (has_nserialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nserialid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_play_card_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cAuto = 1;
  if (has_cauto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cauto(), target);
  }

  // required int32 nSerialID = 2;
  if (has_nserialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nserialid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_play_card_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cAuto = 1;
    if (has_cauto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cauto());
    }

    // required int32 nSerialID = 2;
    if (has_nserialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nserialid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_play_card_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_play_card_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_play_card_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_play_card_req::MergeFrom(const proto_gc_play_card_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cauto()) {
      set_cauto(from.cauto());
    }
    if (from.has_nserialid()) {
      set_nserialid(from.nserialid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_play_card_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_play_card_req::CopyFrom(const proto_gc_play_card_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_play_card_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void proto_gc_play_card_req::Swap(proto_gc_play_card_req* other) {
  if (other != this) {
    std::swap(cauto_, other->cauto_);
    std::swap(nserialid_, other->nserialid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_play_card_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_play_card_req_descriptor_;
  metadata.reflection = proto_gc_play_card_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_lord_card_lottery_base::kRetFieldNumber;
const int proto_gc_lord_card_lottery_base::kIndexFieldNumber;
#endif  // !_MSC_VER

proto_gc_lord_card_lottery_base::proto_gc_lord_card_lottery_base()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_lord_card_lottery_base::InitAsDefaultInstance() {
}

proto_gc_lord_card_lottery_base::proto_gc_lord_card_lottery_base(const proto_gc_lord_card_lottery_base& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_lord_card_lottery_base::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_lord_card_lottery_base::~proto_gc_lord_card_lottery_base() {
  SharedDtor();
}

void proto_gc_lord_card_lottery_base::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_lord_card_lottery_base::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_lord_card_lottery_base::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_lord_card_lottery_base_descriptor_;
}

const proto_gc_lord_card_lottery_base& proto_gc_lord_card_lottery_base::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_lord_card_lottery_base* proto_gc_lord_card_lottery_base::default_instance_ = NULL;

proto_gc_lord_card_lottery_base* proto_gc_lord_card_lottery_base::New() const {
  return new proto_gc_lord_card_lottery_base;
}

void proto_gc_lord_card_lottery_base::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_lord_card_lottery_base::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_lord_card_lottery_base::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_lord_card_lottery_base::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_lord_card_lottery_base::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_lord_card_lottery_base::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_lord_card_lottery_base* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_lord_card_lottery_base*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_lord_card_lottery_base::MergeFrom(const proto_gc_lord_card_lottery_base& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_lord_card_lottery_base::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_lord_card_lottery_base::CopyFrom(const proto_gc_lord_card_lottery_base& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_lord_card_lottery_base::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void proto_gc_lord_card_lottery_base::Swap(proto_gc_lord_card_lottery_base* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_lord_card_lottery_base::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_lord_card_lottery_base_descriptor_;
  metadata.reflection = proto_gc_lord_card_lottery_base_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_cg_play_card_ack::kNSerialIDFieldNumber;
const int proto_cg_play_card_ack::kCTimeOutFieldNumber;
const int proto_cg_play_card_ack::kVecCardsFieldNumber;
#endif  // !_MSC_VER

proto_cg_play_card_ack::proto_cg_play_card_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_cg_play_card_ack::InitAsDefaultInstance() {
}

proto_cg_play_card_ack::proto_cg_play_card_ack(const proto_cg_play_card_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_cg_play_card_ack::SharedCtor() {
  _cached_size_ = 0;
  nserialid_ = 0;
  ctimeout_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_cg_play_card_ack::~proto_cg_play_card_ack() {
  SharedDtor();
}

void proto_cg_play_card_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_cg_play_card_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_cg_play_card_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_cg_play_card_ack_descriptor_;
}

const proto_cg_play_card_ack& proto_cg_play_card_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_cg_play_card_ack* proto_cg_play_card_ack::default_instance_ = NULL;

proto_cg_play_card_ack* proto_cg_play_card_ack::New() const {
  return new proto_cg_play_card_ack;
}

void proto_cg_play_card_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nserialid_ = 0;
    ctimeout_ = 0;
  }
  veccards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_cg_play_card_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nSerialID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nserialid_)));
          set_has_nserialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cTimeOut;
        break;
      }

      // required int32 cTimeOut = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cTimeOut:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctimeout_)));
          set_has_ctimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vecCards;
        break;
      }

      // repeated .proto_CCard vecCards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_veccards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vecCards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_cg_play_card_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nSerialID = 1;
  if (has_nserialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nserialid(), output);
  }

  // required int32 cTimeOut = 2;
  if (has_ctimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ctimeout(), output);
  }

  // repeated .proto_CCard vecCards = 3;
  for (int i = 0; i < this->veccards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->veccards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_cg_play_card_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nSerialID = 1;
  if (has_nserialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nserialid(), target);
  }

  // required int32 cTimeOut = 2;
  if (has_ctimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ctimeout(), target);
  }

  // repeated .proto_CCard vecCards = 3;
  for (int i = 0; i < this->veccards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->veccards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_cg_play_card_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nSerialID = 1;
    if (has_nserialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nserialid());
    }

    // required int32 cTimeOut = 2;
    if (has_ctimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctimeout());
    }

  }
  // repeated .proto_CCard vecCards = 3;
  total_size += 1 * this->veccards_size();
  for (int i = 0; i < this->veccards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->veccards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_cg_play_card_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_cg_play_card_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_cg_play_card_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_cg_play_card_ack::MergeFrom(const proto_cg_play_card_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  veccards_.MergeFrom(from.veccards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nserialid()) {
      set_nserialid(from.nserialid());
    }
    if (from.has_ctimeout()) {
      set_ctimeout(from.ctimeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_cg_play_card_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_cg_play_card_ack::CopyFrom(const proto_cg_play_card_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_cg_play_card_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < veccards_size(); i++) {
    if (!this->veccards(i).IsInitialized()) return false;
  }
  return true;
}

void proto_cg_play_card_ack::Swap(proto_cg_play_card_ack* other) {
  if (other != this) {
    std::swap(nserialid_, other->nserialid_);
    std::swap(ctimeout_, other->ctimeout_);
    veccards_.Swap(&other->veccards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_cg_play_card_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_cg_play_card_ack_descriptor_;
  metadata.reflection = proto_cg_play_card_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

proto_cg_beishu_info_req::proto_cg_beishu_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_cg_beishu_info_req::InitAsDefaultInstance() {
}

proto_cg_beishu_info_req::proto_cg_beishu_info_req(const proto_cg_beishu_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_cg_beishu_info_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_cg_beishu_info_req::~proto_cg_beishu_info_req() {
  SharedDtor();
}

void proto_cg_beishu_info_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_cg_beishu_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_cg_beishu_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_cg_beishu_info_req_descriptor_;
}

const proto_cg_beishu_info_req& proto_cg_beishu_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_cg_beishu_info_req* proto_cg_beishu_info_req::default_instance_ = NULL;

proto_cg_beishu_info_req* proto_cg_beishu_info_req::New() const {
  return new proto_cg_beishu_info_req;
}

void proto_cg_beishu_info_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_cg_beishu_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void proto_cg_beishu_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_cg_beishu_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_cg_beishu_info_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_cg_beishu_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_cg_beishu_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_cg_beishu_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_cg_beishu_info_req::MergeFrom(const proto_cg_beishu_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_cg_beishu_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_cg_beishu_info_req::CopyFrom(const proto_cg_beishu_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_cg_beishu_info_req::IsInitialized() const {

  return true;
}

void proto_cg_beishu_info_req::Swap(proto_cg_beishu_info_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_cg_beishu_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_cg_beishu_info_req_descriptor_;
  metadata.reflection = proto_cg_beishu_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_rob_lord_req::kCDefaultLordFieldNumber;
const int proto_gc_rob_lord_req::kNSerialIDFieldNumber;
#endif  // !_MSC_VER

proto_gc_rob_lord_req::proto_gc_rob_lord_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_rob_lord_req::InitAsDefaultInstance() {
}

proto_gc_rob_lord_req::proto_gc_rob_lord_req(const proto_gc_rob_lord_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_rob_lord_req::SharedCtor() {
  _cached_size_ = 0;
  cdefaultlord_ = 0;
  nserialid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_rob_lord_req::~proto_gc_rob_lord_req() {
  SharedDtor();
}

void proto_gc_rob_lord_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_rob_lord_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_rob_lord_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_rob_lord_req_descriptor_;
}

const proto_gc_rob_lord_req& proto_gc_rob_lord_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_rob_lord_req* proto_gc_rob_lord_req::default_instance_ = NULL;

proto_gc_rob_lord_req* proto_gc_rob_lord_req::New() const {
  return new proto_gc_rob_lord_req;
}

void proto_gc_rob_lord_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cdefaultlord_ = 0;
    nserialid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_rob_lord_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cDefaultLord = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cdefaultlord_)));
          set_has_cdefaultlord();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nSerialID;
        break;
      }

      // required int32 nSerialID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nSerialID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nserialid_)));
          set_has_nserialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_rob_lord_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cDefaultLord = 1;
  if (has_cdefaultlord()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cdefaultlord(), output);
  }

  // required int32 nSerialID = 2;
  if (has_nserialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nserialid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_rob_lord_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cDefaultLord = 1;
  if (has_cdefaultlord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cdefaultlord(), target);
  }

  // required int32 nSerialID = 2;
  if (has_nserialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nserialid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_rob_lord_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cDefaultLord = 1;
    if (has_cdefaultlord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cdefaultlord());
    }

    // required int32 nSerialID = 2;
    if (has_nserialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nserialid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_rob_lord_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_rob_lord_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_rob_lord_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_rob_lord_req::MergeFrom(const proto_gc_rob_lord_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cdefaultlord()) {
      set_cdefaultlord(from.cdefaultlord());
    }
    if (from.has_nserialid()) {
      set_nserialid(from.nserialid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_rob_lord_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_rob_lord_req::CopyFrom(const proto_gc_rob_lord_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_rob_lord_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void proto_gc_rob_lord_req::Swap(proto_gc_rob_lord_req* other) {
  if (other != this) {
    std::swap(cdefaultlord_, other->cdefaultlord_);
    std::swap(nserialid_, other->nserialid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_rob_lord_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_rob_lord_req_descriptor_;
  metadata.reflection = proto_gc_rob_lord_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_sic_history_ack::kBIsFounderFieldNumber;
const int proto_sic_history_ack::kNPlayerMoneyBeforeFieldNumber;
const int proto_sic_history_ack::kVecHistoryFieldNumber;
const int proto_sic_history_ack::kNChipTypeFieldNumber;
const int proto_sic_history_ack::kVecChipValueFieldNumber;
const int proto_sic_history_ack::kNAmountMaxFieldNumber;
const int proto_sic_history_ack::kFNextRoundTimeWaitFieldNumber;
const int proto_sic_history_ack::kVecPeriodFieldNumber;
#endif  // !_MSC_VER

proto_sic_history_ack::proto_sic_history_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_sic_history_ack::InitAsDefaultInstance() {
}

proto_sic_history_ack::proto_sic_history_ack(const proto_sic_history_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_sic_history_ack::SharedCtor() {
  _cached_size_ = 0;
  bisfounder_ = 0;
  nplayermoneybefore_ = 0;
  nchiptype_ = 0;
  namountmax_ = 0;
  fnextroundtimewait_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_sic_history_ack::~proto_sic_history_ack() {
  SharedDtor();
}

void proto_sic_history_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_sic_history_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_sic_history_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_sic_history_ack_descriptor_;
}

const proto_sic_history_ack& proto_sic_history_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_sic_history_ack* proto_sic_history_ack::default_instance_ = NULL;

proto_sic_history_ack* proto_sic_history_ack::New() const {
  return new proto_sic_history_ack;
}

void proto_sic_history_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bisfounder_ = 0;
    nplayermoneybefore_ = 0;
    nchiptype_ = 0;
    namountmax_ = 0;
    fnextroundtimewait_ = 0;
  }
  vechistory_.Clear();
  vecchipvalue_.Clear();
  vecperiod_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_sic_history_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bIsFounder = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bisfounder_)));
          set_has_bisfounder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nPlayerMoneyBefore;
        break;
      }

      // required int32 nPlayerMoneyBefore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nPlayerMoneyBefore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nplayermoneybefore_)));
          set_has_nplayermoneybefore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vecHistory;
        break;
      }

      // repeated string vecHistory = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecHistory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_vechistory()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vechistory(this->vechistory_size() - 1).data(),
            this->vechistory(this->vechistory_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vecHistory;
        if (input->ExpectTag(32)) goto parse_nChipType;
        break;
      }

      // required int32 nChipType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nChipType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nchiptype_)));
          set_has_nchiptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vecChipValue;
        break;
      }

      // repeated int32 vecChipValue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vecChipValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_vecchipvalue())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_vecchipvalue())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vecChipValue;
        if (input->ExpectTag(48)) goto parse_nAmountMax;
        break;
      }

      // required int32 nAmountMax = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nAmountMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &namountmax_)));
          set_has_namountmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_fNextRoundTimeWait;
        break;
      }

      // required float fNextRoundTimeWait = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fNextRoundTimeWait:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fnextroundtimewait_)));
          set_has_fnextroundtimewait();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_vecPeriod;
        break;
      }

      // repeated int32 vecPeriod = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vecPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_vecperiod())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_vecperiod())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_vecPeriod;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_sic_history_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bIsFounder = 1;
  if (has_bisfounder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bisfounder(), output);
  }

  // required int32 nPlayerMoneyBefore = 2;
  if (has_nplayermoneybefore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nplayermoneybefore(), output);
  }

  // repeated string vecHistory = 3;
  for (int i = 0; i < this->vechistory_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->vechistory(i).data(), this->vechistory(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->vechistory(i), output);
  }

  // required int32 nChipType = 4;
  if (has_nchiptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nchiptype(), output);
  }

  // repeated int32 vecChipValue = 5;
  for (int i = 0; i < this->vecchipvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->vecchipvalue(i), output);
  }

  // required int32 nAmountMax = 6;
  if (has_namountmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->namountmax(), output);
  }

  // required float fNextRoundTimeWait = 7;
  if (has_fnextroundtimewait()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->fnextroundtimewait(), output);
  }

  // repeated int32 vecPeriod = 8;
  for (int i = 0; i < this->vecperiod_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->vecperiod(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_sic_history_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bIsFounder = 1;
  if (has_bisfounder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bisfounder(), target);
  }

  // required int32 nPlayerMoneyBefore = 2;
  if (has_nplayermoneybefore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nplayermoneybefore(), target);
  }

  // repeated string vecHistory = 3;
  for (int i = 0; i < this->vechistory_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vechistory(i).data(), this->vechistory(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->vechistory(i), target);
  }

  // required int32 nChipType = 4;
  if (has_nchiptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nchiptype(), target);
  }

  // repeated int32 vecChipValue = 5;
  for (int i = 0; i < this->vecchipvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->vecchipvalue(i), target);
  }

  // required int32 nAmountMax = 6;
  if (has_namountmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->namountmax(), target);
  }

  // required float fNextRoundTimeWait = 7;
  if (has_fnextroundtimewait()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->fnextroundtimewait(), target);
  }

  // repeated int32 vecPeriod = 8;
  for (int i = 0; i < this->vecperiod_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->vecperiod(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_sic_history_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bIsFounder = 1;
    if (has_bisfounder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bisfounder());
    }

    // required int32 nPlayerMoneyBefore = 2;
    if (has_nplayermoneybefore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nplayermoneybefore());
    }

    // required int32 nChipType = 4;
    if (has_nchiptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nchiptype());
    }

    // required int32 nAmountMax = 6;
    if (has_namountmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->namountmax());
    }

    // required float fNextRoundTimeWait = 7;
    if (has_fnextroundtimewait()) {
      total_size += 1 + 4;
    }

  }
  // repeated string vecHistory = 3;
  total_size += 1 * this->vechistory_size();
  for (int i = 0; i < this->vechistory_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->vechistory(i));
  }

  // repeated int32 vecChipValue = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->vecchipvalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->vecchipvalue(i));
    }
    total_size += 1 * this->vecchipvalue_size() + data_size;
  }

  // repeated int32 vecPeriod = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->vecperiod_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->vecperiod(i));
    }
    total_size += 1 * this->vecperiod_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_sic_history_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_sic_history_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_sic_history_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_sic_history_ack::MergeFrom(const proto_sic_history_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  vechistory_.MergeFrom(from.vechistory_);
  vecchipvalue_.MergeFrom(from.vecchipvalue_);
  vecperiod_.MergeFrom(from.vecperiod_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bisfounder()) {
      set_bisfounder(from.bisfounder());
    }
    if (from.has_nplayermoneybefore()) {
      set_nplayermoneybefore(from.nplayermoneybefore());
    }
    if (from.has_nchiptype()) {
      set_nchiptype(from.nchiptype());
    }
    if (from.has_namountmax()) {
      set_namountmax(from.namountmax());
    }
    if (from.has_fnextroundtimewait()) {
      set_fnextroundtimewait(from.fnextroundtimewait());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_sic_history_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_sic_history_ack::CopyFrom(const proto_sic_history_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_sic_history_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000006b) != 0x0000006b) return false;

  return true;
}

void proto_sic_history_ack::Swap(proto_sic_history_ack* other) {
  if (other != this) {
    std::swap(bisfounder_, other->bisfounder_);
    std::swap(nplayermoneybefore_, other->nplayermoneybefore_);
    vechistory_.Swap(&other->vechistory_);
    std::swap(nchiptype_, other->nchiptype_);
    vecchipvalue_.Swap(&other->vecchipvalue_);
    std::swap(namountmax_, other->namountmax_);
    std::swap(fnextroundtimewait_, other->fnextroundtimewait_);
    vecperiod_.Swap(&other->vecperiod_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_sic_history_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_sic_history_ack_descriptor_;
  metadata.reflection = proto_sic_history_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_cg_rob_lord_ack::kCRobFieldNumber;
const int proto_cg_rob_lord_ack::kNSerialIDFieldNumber;
#endif  // !_MSC_VER

proto_cg_rob_lord_ack::proto_cg_rob_lord_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_cg_rob_lord_ack::InitAsDefaultInstance() {
}

proto_cg_rob_lord_ack::proto_cg_rob_lord_ack(const proto_cg_rob_lord_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_cg_rob_lord_ack::SharedCtor() {
  _cached_size_ = 0;
  crob_ = 0;
  nserialid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_cg_rob_lord_ack::~proto_cg_rob_lord_ack() {
  SharedDtor();
}

void proto_cg_rob_lord_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_cg_rob_lord_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_cg_rob_lord_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_cg_rob_lord_ack_descriptor_;
}

const proto_cg_rob_lord_ack& proto_cg_rob_lord_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_cg_rob_lord_ack* proto_cg_rob_lord_ack::default_instance_ = NULL;

proto_cg_rob_lord_ack* proto_cg_rob_lord_ack::New() const {
  return new proto_cg_rob_lord_ack;
}

void proto_cg_rob_lord_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    crob_ = 0;
    nserialid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_cg_rob_lord_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cRob = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crob_)));
          set_has_crob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nSerialID;
        break;
      }

      // required int32 nSerialID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nSerialID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nserialid_)));
          set_has_nserialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_cg_rob_lord_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cRob = 1;
  if (has_crob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->crob(), output);
  }

  // required int32 nSerialID = 2;
  if (has_nserialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nserialid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_cg_rob_lord_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cRob = 1;
  if (has_crob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->crob(), target);
  }

  // required int32 nSerialID = 2;
  if (has_nserialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nserialid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_cg_rob_lord_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cRob = 1;
    if (has_crob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crob());
    }

    // required int32 nSerialID = 2;
    if (has_nserialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nserialid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_cg_rob_lord_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_cg_rob_lord_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_cg_rob_lord_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_cg_rob_lord_ack::MergeFrom(const proto_cg_rob_lord_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_crob()) {
      set_crob(from.crob());
    }
    if (from.has_nserialid()) {
      set_nserialid(from.nserialid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_cg_rob_lord_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_cg_rob_lord_ack::CopyFrom(const proto_cg_rob_lord_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_cg_rob_lord_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void proto_cg_rob_lord_ack::Swap(proto_cg_rob_lord_ack* other) {
  if (other != this) {
    std::swap(crob_, other->crob_);
    std::swap(nserialid_, other->nserialid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_cg_rob_lord_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_cg_rob_lord_ack_descriptor_;
  metadata.reflection = proto_cg_rob_lord_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_show_card_not::kNChairIDFieldNumber;
const int proto_gc_show_card_not::kVecCardsFieldNumber;
#endif  // !_MSC_VER

proto_gc_show_card_not::proto_gc_show_card_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_show_card_not::InitAsDefaultInstance() {
}

proto_gc_show_card_not::proto_gc_show_card_not(const proto_gc_show_card_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_show_card_not::SharedCtor() {
  _cached_size_ = 0;
  nchairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_show_card_not::~proto_gc_show_card_not() {
  SharedDtor();
}

void proto_gc_show_card_not::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_show_card_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_show_card_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_show_card_not_descriptor_;
}

const proto_gc_show_card_not& proto_gc_show_card_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_show_card_not* proto_gc_show_card_not::default_instance_ = NULL;

proto_gc_show_card_not* proto_gc_show_card_not::New() const {
  return new proto_gc_show_card_not;
}

void proto_gc_show_card_not::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nchairid_ = 0;
  }
  veccards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_show_card_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nchairid_)));
          set_has_nchairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vecCards;
        break;
      }

      // repeated .proto_CCard vecCards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_veccards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vecCards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_show_card_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nChairID = 1;
  if (has_nchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nchairid(), output);
  }

  // repeated .proto_CCard vecCards = 2;
  for (int i = 0; i < this->veccards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->veccards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_show_card_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nChairID = 1;
  if (has_nchairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nchairid(), target);
  }

  // repeated .proto_CCard vecCards = 2;
  for (int i = 0; i < this->veccards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->veccards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_show_card_not::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nChairID = 1;
    if (has_nchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nchairid());
    }

  }
  // repeated .proto_CCard vecCards = 2;
  total_size += 1 * this->veccards_size();
  for (int i = 0; i < this->veccards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->veccards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_show_card_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_show_card_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_show_card_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_show_card_not::MergeFrom(const proto_gc_show_card_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  veccards_.MergeFrom(from.veccards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nchairid()) {
      set_nchairid(from.nchairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_show_card_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_show_card_not::CopyFrom(const proto_gc_show_card_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_show_card_not::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < veccards_size(); i++) {
    if (!this->veccards(i).IsInitialized()) return false;
  }
  return true;
}

void proto_gc_show_card_not::Swap(proto_gc_show_card_not* other) {
  if (other != this) {
    std::swap(nchairid_, other->nchairid_);
    veccards_.Swap(&other->veccards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_show_card_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_show_card_not_descriptor_;
  metadata.reflection = proto_gc_show_card_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_sic_result_data_not::kVecDiceFieldNumber;
const int proto_sic_result_data_not::kNWinMoneyFieldNumber;
const int proto_sic_result_data_not::kNPlayerMoneyAfterFieldNumber;
const int proto_sic_result_data_not::kVecWinCellsFieldNumber;
const int proto_sic_result_data_not::kVecPlayerWinCellsFieldNumber;
const int proto_sic_result_data_not::kVecHitAwardFieldNumber;
const int proto_sic_result_data_not::kVecRankFieldNumber;
#endif  // !_MSC_VER

proto_sic_result_data_not::proto_sic_result_data_not()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_sic_result_data_not::InitAsDefaultInstance() {
}

proto_sic_result_data_not::proto_sic_result_data_not(const proto_sic_result_data_not& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_sic_result_data_not::SharedCtor() {
  _cached_size_ = 0;
  nwinmoney_ = 0;
  nplayermoneyafter_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_sic_result_data_not::~proto_sic_result_data_not() {
  SharedDtor();
}

void proto_sic_result_data_not::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_sic_result_data_not::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_sic_result_data_not::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_sic_result_data_not_descriptor_;
}

const proto_sic_result_data_not& proto_sic_result_data_not::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_sic_result_data_not* proto_sic_result_data_not::default_instance_ = NULL;

proto_sic_result_data_not* proto_sic_result_data_not::New() const {
  return new proto_sic_result_data_not;
}

void proto_sic_result_data_not::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    nwinmoney_ = 0;
    nplayermoneyafter_ = 0;
  }
  vecdice_.Clear();
  vecwincells_.Clear();
  vecplayerwincells_.Clear();
  vechitaward_.Clear();
  vecrank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_sic_result_data_not::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 vecDice = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vecDice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_vecdice())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_vecdice())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_vecDice;
        if (input->ExpectTag(16)) goto parse_nWinMoney;
        break;
      }

      // required int32 nWinMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nWinMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nwinmoney_)));
          set_has_nwinmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nPlayerMoneyAfter;
        break;
      }

      // required int32 nPlayerMoneyAfter = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nPlayerMoneyAfter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nplayermoneyafter_)));
          set_has_nplayermoneyafter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_vecWinCells;
        break;
      }

      // repeated int32 vecWinCells = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vecWinCells:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_vecwincells())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_vecwincells())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_vecWinCells;
        if (input->ExpectTag(40)) goto parse_vecPlayerWinCells;
        break;
      }

      // repeated int32 vecPlayerWinCells = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vecPlayerWinCells:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_vecplayerwincells())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_vecplayerwincells())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vecPlayerWinCells;
        if (input->ExpectTag(50)) goto parse_vecHitAward;
        break;
      }

      // repeated string vecHitAward = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecHitAward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_vechitaward()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vechitaward(this->vechitaward_size() - 1).data(),
            this->vechitaward(this->vechitaward_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_vecHitAward;
        if (input->ExpectTag(58)) goto parse_vecRank;
        break;
      }

      // repeated string vecRank = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecRank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_vecrank()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vecrank(this->vecrank_size() - 1).data(),
            this->vecrank(this->vecrank_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_vecRank;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_sic_result_data_not::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 vecDice = 1;
  for (int i = 0; i < this->vecdice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->vecdice(i), output);
  }

  // required int32 nWinMoney = 2;
  if (has_nwinmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nwinmoney(), output);
  }

  // required int32 nPlayerMoneyAfter = 3;
  if (has_nplayermoneyafter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nplayermoneyafter(), output);
  }

  // repeated int32 vecWinCells = 4;
  for (int i = 0; i < this->vecwincells_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->vecwincells(i), output);
  }

  // repeated int32 vecPlayerWinCells = 5;
  for (int i = 0; i < this->vecplayerwincells_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->vecplayerwincells(i), output);
  }

  // repeated string vecHitAward = 6;
  for (int i = 0; i < this->vechitaward_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->vechitaward(i).data(), this->vechitaward(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->vechitaward(i), output);
  }

  // repeated string vecRank = 7;
  for (int i = 0; i < this->vecrank_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->vecrank(i).data(), this->vecrank(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->vecrank(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_sic_result_data_not::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 vecDice = 1;
  for (int i = 0; i < this->vecdice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->vecdice(i), target);
  }

  // required int32 nWinMoney = 2;
  if (has_nwinmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nwinmoney(), target);
  }

  // required int32 nPlayerMoneyAfter = 3;
  if (has_nplayermoneyafter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nplayermoneyafter(), target);
  }

  // repeated int32 vecWinCells = 4;
  for (int i = 0; i < this->vecwincells_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->vecwincells(i), target);
  }

  // repeated int32 vecPlayerWinCells = 5;
  for (int i = 0; i < this->vecplayerwincells_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->vecplayerwincells(i), target);
  }

  // repeated string vecHitAward = 6;
  for (int i = 0; i < this->vechitaward_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vechitaward(i).data(), this->vechitaward(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->vechitaward(i), target);
  }

  // repeated string vecRank = 7;
  for (int i = 0; i < this->vecrank_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vecrank(i).data(), this->vecrank(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->vecrank(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_sic_result_data_not::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 nWinMoney = 2;
    if (has_nwinmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nwinmoney());
    }

    // required int32 nPlayerMoneyAfter = 3;
    if (has_nplayermoneyafter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nplayermoneyafter());
    }

  }
  // repeated int32 vecDice = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->vecdice_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->vecdice(i));
    }
    total_size += 1 * this->vecdice_size() + data_size;
  }

  // repeated int32 vecWinCells = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->vecwincells_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->vecwincells(i));
    }
    total_size += 1 * this->vecwincells_size() + data_size;
  }

  // repeated int32 vecPlayerWinCells = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->vecplayerwincells_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->vecplayerwincells(i));
    }
    total_size += 1 * this->vecplayerwincells_size() + data_size;
  }

  // repeated string vecHitAward = 6;
  total_size += 1 * this->vechitaward_size();
  for (int i = 0; i < this->vechitaward_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->vechitaward(i));
  }

  // repeated string vecRank = 7;
  total_size += 1 * this->vecrank_size();
  for (int i = 0; i < this->vecrank_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->vecrank(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_sic_result_data_not::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_sic_result_data_not* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_sic_result_data_not*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_sic_result_data_not::MergeFrom(const proto_sic_result_data_not& from) {
  GOOGLE_CHECK_NE(&from, this);
  vecdice_.MergeFrom(from.vecdice_);
  vecwincells_.MergeFrom(from.vecwincells_);
  vecplayerwincells_.MergeFrom(from.vecplayerwincells_);
  vechitaward_.MergeFrom(from.vechitaward_);
  vecrank_.MergeFrom(from.vecrank_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_nwinmoney()) {
      set_nwinmoney(from.nwinmoney());
    }
    if (from.has_nplayermoneyafter()) {
      set_nplayermoneyafter(from.nplayermoneyafter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_sic_result_data_not::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_sic_result_data_not::CopyFrom(const proto_sic_result_data_not& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_sic_result_data_not::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void proto_sic_result_data_not::Swap(proto_sic_result_data_not* other) {
  if (other != this) {
    vecdice_.Swap(&other->vecdice_);
    std::swap(nwinmoney_, other->nwinmoney_);
    std::swap(nplayermoneyafter_, other->nplayermoneyafter_);
    vecwincells_.Swap(&other->vecwincells_);
    vecplayerwincells_.Swap(&other->vecplayerwincells_);
    vechitaward_.Swap(&other->vechitaward_);
    vecrank_.Swap(&other->vecrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_sic_result_data_not::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_sic_result_data_not_descriptor_;
  metadata.reflection = proto_sic_result_data_not_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_cg_show_card_ack::kCShowCardFieldNumber;
const int proto_cg_show_card_ack::kNSerialIDFieldNumber;
const int proto_cg_show_card_ack::kNShowCardBetFieldNumber;
const int proto_cg_show_card_ack::kNShowCardTypeFieldNumber;
#endif  // !_MSC_VER

proto_cg_show_card_ack::proto_cg_show_card_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_cg_show_card_ack::InitAsDefaultInstance() {
}

proto_cg_show_card_ack::proto_cg_show_card_ack(const proto_cg_show_card_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_cg_show_card_ack::SharedCtor() {
  _cached_size_ = 0;
  cshowcard_ = 0;
  nserialid_ = 0;
  nshowcardbet_ = 0;
  nshowcardtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_cg_show_card_ack::~proto_cg_show_card_ack() {
  SharedDtor();
}

void proto_cg_show_card_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_cg_show_card_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_cg_show_card_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_cg_show_card_ack_descriptor_;
}

const proto_cg_show_card_ack& proto_cg_show_card_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_cg_show_card_ack* proto_cg_show_card_ack::default_instance_ = NULL;

proto_cg_show_card_ack* proto_cg_show_card_ack::New() const {
  return new proto_cg_show_card_ack;
}

void proto_cg_show_card_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cshowcard_ = 0;
    nserialid_ = 0;
    nshowcardbet_ = 0;
    nshowcardtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_cg_show_card_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cShowCard = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cshowcard_)));
          set_has_cshowcard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nSerialID;
        break;
      }

      // required int32 nSerialID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nSerialID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nserialid_)));
          set_has_nserialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nShowCardBet;
        break;
      }

      // required int32 nShowCardBet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nShowCardBet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nshowcardbet_)));
          set_has_nshowcardbet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nShowCardType;
        break;
      }

      // required int32 nShowCardType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nShowCardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nshowcardtype_)));
          set_has_nshowcardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_cg_show_card_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cShowCard = 1;
  if (has_cshowcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cshowcard(), output);
  }

  // required int32 nSerialID = 2;
  if (has_nserialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nserialid(), output);
  }

  // required int32 nShowCardBet = 3;
  if (has_nshowcardbet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nshowcardbet(), output);
  }

  // required int32 nShowCardType = 4;
  if (has_nshowcardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nshowcardtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_cg_show_card_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cShowCard = 1;
  if (has_cshowcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cshowcard(), target);
  }

  // required int32 nSerialID = 2;
  if (has_nserialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nserialid(), target);
  }

  // required int32 nShowCardBet = 3;
  if (has_nshowcardbet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nshowcardbet(), target);
  }

  // required int32 nShowCardType = 4;
  if (has_nshowcardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nshowcardtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_cg_show_card_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cShowCard = 1;
    if (has_cshowcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cshowcard());
    }

    // required int32 nSerialID = 2;
    if (has_nserialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nserialid());
    }

    // required int32 nShowCardBet = 3;
    if (has_nshowcardbet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nshowcardbet());
    }

    // required int32 nShowCardType = 4;
    if (has_nshowcardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nshowcardtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_cg_show_card_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_cg_show_card_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_cg_show_card_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_cg_show_card_ack::MergeFrom(const proto_cg_show_card_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cshowcard()) {
      set_cshowcard(from.cshowcard());
    }
    if (from.has_nserialid()) {
      set_nserialid(from.nserialid());
    }
    if (from.has_nshowcardbet()) {
      set_nshowcardbet(from.nshowcardbet());
    }
    if (from.has_nshowcardtype()) {
      set_nshowcardtype(from.nshowcardtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_cg_show_card_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_cg_show_card_ack::CopyFrom(const proto_cg_show_card_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_cg_show_card_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void proto_cg_show_card_ack::Swap(proto_cg_show_card_ack* other) {
  if (other != this) {
    std::swap(cshowcard_, other->cshowcard_);
    std::swap(nserialid_, other->nserialid_);
    std::swap(nshowcardbet_, other->nshowcardbet_);
    std::swap(nshowcardtype_, other->nshowcardtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_cg_show_card_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_cg_show_card_ack_descriptor_;
  metadata.reflection = proto_cg_show_card_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_cg_send_card_ok_ack::kNSerialIDFieldNumber;
#endif  // !_MSC_VER

proto_cg_send_card_ok_ack::proto_cg_send_card_ok_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_cg_send_card_ok_ack::InitAsDefaultInstance() {
}

proto_cg_send_card_ok_ack::proto_cg_send_card_ok_ack(const proto_cg_send_card_ok_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_cg_send_card_ok_ack::SharedCtor() {
  _cached_size_ = 0;
  nserialid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_cg_send_card_ok_ack::~proto_cg_send_card_ok_ack() {
  SharedDtor();
}

void proto_cg_send_card_ok_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_cg_send_card_ok_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_cg_send_card_ok_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_cg_send_card_ok_ack_descriptor_;
}

const proto_cg_send_card_ok_ack& proto_cg_send_card_ok_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_cg_send_card_ok_ack* proto_cg_send_card_ok_ack::default_instance_ = NULL;

proto_cg_send_card_ok_ack* proto_cg_send_card_ok_ack::New() const {
  return new proto_cg_send_card_ok_ack;
}

void proto_cg_send_card_ok_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nserialid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_cg_send_card_ok_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nSerialID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nserialid_)));
          set_has_nserialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_cg_send_card_ok_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nSerialID = 1;
  if (has_nserialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nserialid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_cg_send_card_ok_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nSerialID = 1;
  if (has_nserialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nserialid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_cg_send_card_ok_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nSerialID = 1;
    if (has_nserialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nserialid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_cg_send_card_ok_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_cg_send_card_ok_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_cg_send_card_ok_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_cg_send_card_ok_ack::MergeFrom(const proto_cg_send_card_ok_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nserialid()) {
      set_nserialid(from.nserialid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_cg_send_card_ok_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_cg_send_card_ok_ack::CopyFrom(const proto_cg_send_card_ok_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_cg_send_card_ok_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void proto_cg_send_card_ok_ack::Swap(proto_cg_send_card_ok_ack* other) {
  if (other != this) {
    std::swap(nserialid_, other->nserialid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_cg_send_card_ok_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_cg_send_card_ok_ack_descriptor_;
  metadata.reflection = proto_cg_send_card_ok_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_gc_game_result_not1::kBTypeFieldNumber;
const int proto_gc_game_result_not1::kCDoubleFieldNumber;
const int proto_gc_game_result_not1::kCCallScoreFieldNumber;
const int proto_gc_game_result_not1::kBShowCardFieldNumber;
const int proto_gc_game_result_not1::kNBombCountFieldNumber;
const int proto_gc_game_result_not1::kBSpringFieldNumber;
const int proto_gc_game_result_not1::kBReverseSpringFieldNumber;
const int proto_gc_game_result_not1::kBRobLordFieldNumber;
const int proto_gc_game_result_not1::kVecUserResult1FieldNumber;
#endif  // !_MSC_VER

proto_gc_game_result_not1::proto_gc_game_result_not1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_gc_game_result_not1::InitAsDefaultInstance() {
}

proto_gc_game_result_not1::proto_gc_game_result_not1(const proto_gc_game_result_not1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_gc_game_result_not1::SharedCtor() {
  _cached_size_ = 0;
  btype_ = 0;
  cdouble_ = 0;
  ccallscore_ = 0;
  bshowcard_ = 0;
  nbombcount_ = 0;
  bspring_ = 0;
  breversespring_ = 0;
  broblord_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_gc_game_result_not1::~proto_gc_game_result_not1() {
  SharedDtor();
}

void proto_gc_game_result_not1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void proto_gc_game_result_not1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_gc_game_result_not1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_gc_game_result_not1_descriptor_;
}

const proto_gc_game_result_not1& proto_gc_game_result_not1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_5fdefine_2eproto();
  return *default_instance_;
}

proto_gc_game_result_not1* proto_gc_game_result_not1::default_instance_ = NULL;

proto_gc_game_result_not1* proto_gc_game_result_not1::New() const {
  return new proto_gc_game_result_not1;
}

void proto_gc_game_result_not1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    btype_ = 0;
    cdouble_ = 0;
    ccallscore_ = 0;
    bshowcard_ = 0;
    nbombcount_ = 0;
    bspring_ = 0;
    breversespring_ = 0;
    broblord_ = 0;
  }
  vecuserresult1_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_gc_game_result_not1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &btype_)));
          set_has_btype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cDouble;
        break;
      }

      // required int32 cDouble = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cDouble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cdouble_)));
          set_has_cdouble();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cCallScore;
        break;
      }

      // required int32 cCallScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cCallScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ccallscore_)));
          set_has_ccallscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bShowCard;
        break;
      }

      // required int32 bShowCard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bShowCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bshowcard_)));
          set_has_bshowcard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nBombCount;
        break;
      }

      // required int32 nBombCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nBombCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nbombcount_)));
          set_has_nbombcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bSpring;
        break;
      }

      // required int32 bSpring = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bSpring:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bspring_)));
          set_has_bspring();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bReverseSpring;
        break;
      }

      // required int32 bReverseSpring = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bReverseSpring:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &breversespring_)));
          set_has_breversespring();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bRobLord;
        break;
      }

      // required int32 bRobLord = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bRobLord:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &broblord_)));
          set_has_broblord();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_vecUserResult1;
        break;
      }

      // repeated .proto_stUserResult1 vecUserResult1 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vecUserResult1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vecuserresult1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_vecUserResult1;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_gc_game_result_not1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bType = 1;
  if (has_btype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->btype(), output);
  }

  // required int32 cDouble = 2;
  if (has_cdouble()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cdouble(), output);
  }

  // required int32 cCallScore = 3;
  if (has_ccallscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ccallscore(), output);
  }

  // required int32 bShowCard = 4;
  if (has_bshowcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bshowcard(), output);
  }

  // required int32 nBombCount = 5;
  if (has_nbombcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nbombcount(), output);
  }

  // required int32 bSpring = 6;
  if (has_bspring()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bspring(), output);
  }

  // required int32 bReverseSpring = 7;
  if (has_breversespring()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->breversespring(), output);
  }

  // required int32 bRobLord = 8;
  if (has_broblord()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->broblord(), output);
  }

  // repeated .proto_stUserResult1 vecUserResult1 = 9;
  for (int i = 0; i < this->vecuserresult1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->vecuserresult1(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_gc_game_result_not1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bType = 1;
  if (has_btype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->btype(), target);
  }

  // required int32 cDouble = 2;
  if (has_cdouble()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cdouble(), target);
  }

  // required int32 cCallScore = 3;
  if (has_ccallscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ccallscore(), target);
  }

  // required int32 bShowCard = 4;
  if (has_bshowcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bshowcard(), target);
  }

  // required int32 nBombCount = 5;
  if (has_nbombcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nbombcount(), target);
  }

  // required int32 bSpring = 6;
  if (has_bspring()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bspring(), target);
  }

  // required int32 bReverseSpring = 7;
  if (has_breversespring()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->breversespring(), target);
  }

  // required int32 bRobLord = 8;
  if (has_broblord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->broblord(), target);
  }

  // repeated .proto_stUserResult1 vecUserResult1 = 9;
  for (int i = 0; i < this->vecuserresult1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->vecuserresult1(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_gc_game_result_not1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bType = 1;
    if (has_btype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->btype());
    }

    // required int32 cDouble = 2;
    if (has_cdouble()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cdouble());
    }

    // required int32 cCallScore = 3;
    if (has_ccallscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ccallscore());
    }

    // required int32 bShowCard = 4;
    if (has_bshowcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bshowcard());
    }

    // required int32 nBombCount = 5;
    if (has_nbombcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbombcount());
    }

    // required int32 bSpring = 6;
    if (has_bspring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bspring());
    }

    // required int32 bReverseSpring = 7;
    if (has_breversespring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->breversespring());
    }

    // required int32 bRobLord = 8;
    if (has_broblord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->broblord());
    }

  }
  // repeated .proto_stUserResult1 vecUserResult1 = 9;
  total_size += 1 * this->vecuserresult1_size();
  for (int i = 0; i < this->vecuserresult1_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vecuserresult1(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_gc_game_result_not1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_gc_game_result_not1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_gc_game_result_not1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_gc_game_result_not1::MergeFrom(const proto_gc_game_result_not1& from) {
  GOOGLE_CHECK_NE(&from, this);
  vecuserresult1_.MergeFrom(from.vecuserresult1_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_btype()) {
      set_btype(from.btype());
    }
    if (from.has_cdouble()) {
      set_cdouble(from.cdouble());
    }
    if (from.has_ccallscore()) {
      set_ccallscore(from.ccallscore());
    }
    if (from.has_bshowcard()) {
      set_bshowcard(from.bshowcard());
    }
    if (from.has_nbombcount()) {
      set_nbombcount(from.nbombcount());
    }
    if (from.has_bspring()) {
      set_bspring(from.bspring());
    }
    if (from.has_breversespring()) {
      set_breversespring(from.breversespring());
    }
    if (from.has_broblord()) {
      set_broblord(from.broblord());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_gc_game_result_not1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_gc_game_result_not1::CopyFrom(const proto_gc_game_result_not1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_gc_game_result_not1::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  for (int i = 0; i < vecuserresult1_size(); i++) {
    if (!this->vecuserresult1(i).IsInitialized()) return false;
  }
  return true;
}

void proto_gc_game_result_not1::Swap(proto_gc_game_result_not1* other) {
  if (other != this) {
    std::swap(btype_, other->btype_);
    std::swap(cdouble_, other->cdouble_);
    std::swap(ccallscore_, other->ccallscore_);
    std::swap(bshowcard_, other->bshowcard_);
    std::swap(nbombcount_, other->nbombcount_);
    std::swap(bspring_, other->bspring_);
    std::swap(breversespring_, other->breversespring_);
    std::swap(broblord_, other->broblord_);
    vecuserresult1_.Swap(&other->vecuserresult1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_gc_game_result_not1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_gc_game_result_not1_descriptor_;
  metadata.reflection = proto_gc_game_result_not1_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
